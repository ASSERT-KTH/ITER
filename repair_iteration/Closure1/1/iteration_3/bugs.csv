bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    	non-compiled	[CE]  	171	None	replace
2	[BUG]  [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    	non-compiled	[CE]  	171	None	replace
3	[BUG]  [BUGGY]  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
4	[BUG]  [BUGGY]  ||(removeGlobals  &&  var.isGlobal()))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||(removeGlobals  &&  var.isGlobal()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||(removeGlobals  &&  var.isGlobal()))  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
5	[BUG]  [BUGGY]  |!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
6	[BUG]  [BUGGY]  ||  isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  isPropertyAssign  &&  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
7	[BUG]  [BUGGY]  ||!removeVars  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeVars  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeVars  ||  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
8	[BUG]  [BUGGY]  parent  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	144	None	replace
9	[BUG]  [BUGGY]  if(var!=  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	144	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	144	None	replace
11	[BUG]  [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  if(var    ==    null    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	144	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeVars  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeVars  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeVars  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ==  false  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ==  false  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ==  false  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  isPropertyAssign  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isTransient())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isTransient())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isTransient())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isConstructor())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isConstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isConstructor())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
18	[BUG]  [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()!=  Token.VAR)  {  return  false;	  ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	84	None	replace
19	[BUG]  [BUGGY]  |  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()!=  Token.VAR)  {  return  false;  }	  ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	84	None	replace
20	[BUG]  [BUGGY]  ||  var.getType()  >=  Token.VAR)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  >=  Token.VAR)  {  return  false;  }	  ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	84	None	replace
21	[BUG]  [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()!=  Token.VAR)  {  return  true;  }	  ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	84	None	replace
22	[BUG]  [BUGGY]  ||  var.getName()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getName()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getName()!=  Token.VAR)  {  return  false;  }	  ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	84	None	replace
23	[BUG]  [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
24	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
25	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
26	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
27	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ ")));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
28	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "___ ")));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "___ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "___ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isConstructor());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isConstructor());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isConstructor());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  	220	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(var.isVarArgs()  ||  var.isGlobal());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isVarArgs()  ||  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isVarArgs()  ||  var.isGlobal());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  	220	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isRemovable());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isRemovable());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isRemovable());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  	220	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isInterface());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isInterface());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isInterface());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  	220	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isImmutable());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isImmutable());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isImmutable());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  	220	None	replace
34	[BUG]  [BUGGY]  return  false;  NodeTraversal.traverse(compiler,  var,  this);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  NodeTraversal.traverse(compiler,  var,  this);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  NodeTraversal.traverse(compiler,  var,  this);	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	108	None	replace
35	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	108	None	replace
36	[BUG]  [BUGGY]  return  false;  nodeTraversal.traverse(compiler,  var,  this);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  nodeTraversal.traverse(compiler,  var,  this);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  nodeTraversal.traverse(compiler,  var,  this);	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	108	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  null);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  null);	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	108	None	replace
38	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR)  {  return  true;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.VAR)  {  return  true;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR)  {  return  true;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	108	None	replace
39	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkNotNull(var);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkNotNull(var);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkNotNull(var);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	108	None	replace
40	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	134	None	replace
41	[BUG]  [BUGGY]  return(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	134	None	replace
42	[BUG]  [BUGGY]  return(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	134	None	replace
43	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	134	None	replace
44	[BUG]  [BUGGY]  parent!=  null;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  return    true;    if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	222	None	replace
45	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }	  return    true;    if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	222	None	replace
46	[BUG]  [BUGGY]  parent  ==  null;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  return    true;    if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	222	None	replace
47	[BUG]  [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "));    	non-compiled	[CE]  	197	None	replace
48	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "));    	non-compiled	[CE]  	197	None	replace
49	[BUG]  [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "));    	non-compiled	[CE]  	197	None	replace
50	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "_  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "_  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "_	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "));    	non-compiled	[CE]  	197	None	replace
51	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith(  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith(  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith(	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "));    	non-compiled	[CE]  	197	None	replace
52	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "));    	non-compiled	[CE]  	197	None	replace
53	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
54	[BUG]  [BUGGY]  ||!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	199	None	replace
55	[BUG]  [BUGGY]  parent!=  null  &&!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	199	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	199	None	replace
57	[BUG]  [BUGGY]  if(!isPropertyAssign  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign  ||  var.isGlobal())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	199	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  var.isGlobal());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!isPropertyAssign  &&  var.isGlobal());	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	199	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!isPropertyAssign  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!isPropertyAssign  ||  var.isGlobal())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	199	None	replace
60	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  codingConvention);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  codingConvention);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingVar(var,  codingConvention);	  aughtExceptionHandler.handleMissingVar(var);    	non-compiled	[CE]  	49	None	replace
61	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  fnScope);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingVar(var,  fnScope);	  aughtExceptionHandler.handleMissingVar(var);    	non-compiled	[CE]  	49	None	replace
62	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  c);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  c);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingVar(var,  c);	  aughtExceptionHandler.handleMissingVar(var);    	non-compiled	[CE]  	49	None	replace
63	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  false);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingVar(var,  false);	  aughtExceptionHandler.handleMissingVar(var);    	non-compiled	[CE]  	49	None	replace
64	[BUG]  [BUGGY]  ||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  	196	None	replace
65	[BUG]  [BUGGY]  |(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  	196	None	replace
66	[BUG]  [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  	196	None	replace
67	[BUG]  [BUGGY]  (var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  	196	None	replace
68	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")))  {  return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  	196	None	replace
69	[BUG]  [BUGGY]  var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var!=    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	89	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  if(var!=    null)    {    return    false;    }    if(var    [Delete]    null)    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  if(var!=    null)    {    return    false;    }    if(var    [Delete]    null)    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    >=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isGlobal());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||  var.isGlobal());	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    >=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  parent  ==  null  &&  parent.isGlobal())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&  parent.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&  parent.isGlobal())  {  return  false;  }	  if(var    ==    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
75	[BUG]  [BUGGY]  parent  ==  null  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
76	[BUG]  [BUGGY]  parent!=  null  &&  parent.isGlobal())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&  parent.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&  parent.isGlobal())  {  return  false;  }	  if(var    ==    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
77	[BUG]  [BUGGY]  removeGlobals  &=  var.isRemovable();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &=  var.isRemovable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &=  var.isRemovable();	  removeGlobals    |=    var.isRemovable();    	non-compiled	[CE]  	157	None	replace
78	[BUG]  [BUGGY]  removeGlobals  |=  var.getScope().isRemovable();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getScope().isRemovable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getScope().isRemovable();	  removeGlobals    |=    var.isRemovable();    	non-compiled	[CE]  	157	None	replace
79	[BUG]  [BUGGY]  removeGlobals  |=  var.getType()  ==  Token.VAR  &&  var.isGlobal();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getType()  ==  Token.VAR  &&  var.isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getType()  ==  Token.VAR  &&  var.isGlobal();	  removeGlobals    |=    var.isRemovable();    	non-compiled	[CE]  	157	None	replace
80	[BUG]  [BUGGY]  removeGlobals  |=  var.getVar(var.getName());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getVar(var.getName());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getVar(var.getName());	  removeGlobals    |=    var.isRemovable();    	non-compiled	[CE]  	157	None	replace
81	[BUG]  [BUGGY]  parent  ==  null  ||  var.isGlobal())  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.isGlobal())  {  return  true;  }	  if(var    ==    null)    {    return    true;    }    	non-compiled	[CE]  	159	None	replace
82	[BUG]  [BUGGY]  parent  ==  null)  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null)  {  return  true;  }	  if(var    ==    null)    {    return    true;    }    	non-compiled	[CE]  	159	None	replace
83	[BUG]  [BUGGY]  ||  var  ==  null)  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var  ==  null)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var  ==  null)  {  return  true;  }	  if(var    ==    null)    {    return    true;    }    	non-compiled	[CE]  	159	None	replace
84	[BUG]  [BUGGY]  ||  var!=  null)  {  return  true;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var!=  null)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var!=  null)  {  return  true;  }	  if(var    ==    null)    {    return    true;    }    	non-compiled	[CE]  	159	None	replace
85	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  	4	None	replace
86	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  ';'  expected	4	None	replace
87	[BUG]  [BUGGY]  removeGlobals  |=  var.getName()  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getName()  +  1;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getName()  +  1;	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  ';'  expected	43	None	replace
88	[BUG]  [BUGGY]  removeGlobals  |=  var.getSimpleName();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getSimpleName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getSimpleName();	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  ';'  expected	43	None	replace
89	[BUG]  [BUGGY]  removeGlobals  &=  var.getName();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &=  var.getName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &=  var.getName();	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  ';'  expected	43	None	replace
90	[BUG]  [BUGGY]  removeGlobals  |=  var.getVarName();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getVarName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getVarName();	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  ';'  expected	43	None	replace
91	[BUG]  [BUGGY]  removeGlobals  |=  var.getParent();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getParent();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getParent();	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  ';'  expected	43	None	replace
92	[BUG]  [BUGGY]  ||  var.getParent()!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getParent()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getParent()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getParent()!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	166	None	replace
93	[BUG]  [BUGGY]  parent  ==  null  ||  var.getParent()!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.getParent()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.getParent()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getParent()!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	166	None	replace
94	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getParent()!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  &&  var.getParent()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.getParent()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getParent()!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	166	None	replace
95	[BUG]  [BUGGY]  if(var!=  null  ||  var.getParent()!=  null)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getParent()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getParent()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getParent()!=    null)    {    return    false;    }    	non-compiled	[CE]  	166	None	replace
96	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getParent()!=  null)return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getParent()!=  null)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getParent()!=  null)return  false;  }	  if(var    ==    null    ||    var.getParent()!=    null)    {    return    false;    }    	non-compiled	[CE]  	166	None	replace
97	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	139	None	replace
98	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	139	None	replace
99	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	139	None	replace
100	[BUG]  [BUGGY]  return(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	139	None	replace
101	[BUG]  [BUGGY]  return(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	139	None	replace
102	[BUG]  [BUGGY]  return(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.NAME);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	139	None	replace
103	[BUG]  [BUGGY]  allowSecondarySideEffects(var.getName()))  {  if(!removeGlobals)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  allowSecondarySideEffects(var.getName()))  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	allowSecondarySideEffects(var.getName()))  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    for(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	35	None	replace
104	[BUG]  [BUGGY]  allowSecondarySideEffects(var.getName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  allowSecondarySideEffects(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	allowSecondarySideEffects(var.getName()))  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    for(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	35	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    for(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	35	None	replace
106	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    If(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	39	None	replace
107	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
108	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
109	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
110	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
111	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
112	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
113	[BUG]  [BUGGY]  if(codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    {    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	212	None	replace
114	[BUG]  [BUGGY]  parent  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    {    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	212	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getName()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getName()!=  null);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getName()!=  null);	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    {    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	212	None	replace
116	[BUG]  [BUGGY]  ||  var.getName()  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getName()  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getName()  ==  null)  {  return  false;  }	  ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
117	[BUG]  [BUGGY]  ||  var.getSimpleName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getSimpleName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getSimpleName()!=  null)  {  return  false;  }	  ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
118	[BUG]  [BUGGY]  ||  var.getLocalName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getLocalName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getLocalName()!=  null)  {  return  false;  }	  ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
119	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	135	None	replace
120	[BUG]  [BUGGY]  return(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	135	None	replace
121	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	135	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	97	None	replace
123	[BUG]  [BUGGY]  return  false;  NodeTraversal.traverse(compiler,  var,  false);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  NodeTraversal.traverse(compiler,  var,  false);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  NodeTraversal.traverse(compiler,  var,  false);	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  not  a  statement	221	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  false);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  false);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  false);	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  not  a  statement	221	None	replace
125	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  not  a  statement	221	None	replace
126	[BUG]  [BUGGY]  false;  NodeTraversal.traverse(compiler,  var,  false);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  false;  NodeTraversal.traverse(compiler,  var,  false);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	false;  NodeTraversal.traverse(compiler,  var,  false);	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  not  a  statement	221	None	replace
127	[BUG]  [BUGGY]  return  false;  NodeTraversal.traverse(compiler,  var,  true);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  NodeTraversal.traverse(compiler,  var,  true);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  NodeTraversal.traverse(compiler,  var,  true);	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  not  a  statement	221	None	replace
128	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  	221	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  var,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  var,  false);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  var,  false);	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  	221	None	replace
130	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var!=    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
131	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var!=    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	118	None	replace
132	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var!=    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	118	None	replace
133	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var!=    null    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	143	None	replace
134	[BUG]  [BUGGY]  parent  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var!=    null    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	143	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    If(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()!=  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  	68	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  >=  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  >=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  >=  Token.VAR);	          Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  	68	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(!var.getType()!=  Token.VAR);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  	68	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()!=  Token.VAR);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(scope.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(scope.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  	68	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  	64	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  	64	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  	64	None	replace
143	[BUG]  [BUGGY]  if(removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	81	None	replace
144	[BUG]  [BUGGY]  &&!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	81	None	replace
145	[BUG]  [BUGGY]  removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	81	None	replace
146	[BUG]  [BUGGY]  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    If(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
147	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()!=    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	151	None	replace
148	[BUG]  [BUGGY]  eradicateGlobals  |=  var.getType()  ==  Token.VAR  &&  var.isGlobal();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.getType()  ==  Token.VAR  &&  var.isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.getType()  ==  Token.VAR  &&  var.isGlobal();	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	45	None	replace
149	[BUG]  [BUGGY]  eradicateGlobals  |=  var.getName();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.getName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.getName();	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	45	None	replace
150	[BUG]  [BUGGY]  eradicateGlobals  |=  var.isGlobal()  &&!removeGlobals;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.isGlobal()  &&!removeGlobals;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.isGlobal()  &&!removeGlobals;	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	45	None	replace
151	[BUG]  [BUGGY]  eradicateGlobals  |=  var.getFunctionScope().isGlobal();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.getFunctionScope().isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.getFunctionScope().isGlobal();	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	45	None	replace
152	[BUG]  [BUGGY]  eradicateGlobals  |=  var.getScope().isGlobal();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.getScope().isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.getScope().isGlobal();	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	45	None	replace
153	[BUG]  [BUGGY]  eradicateGlobals  |=  var.isGlobal()  &&  isPropertyAssign();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.isGlobal()  &&  isPropertyAssign();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.isGlobal()  &&  isPropertyAssign();	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	45	None	replace
154	[BUG]  [BUGGY]  |  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()  ==  Token.VAR)  {  return  true;  }	  ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	76	None	replace
155	[BUG]  [BUGGY]  ||  var.getName()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getName()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getName()  ==  Token.VAR)  {  return  true;  }	  ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	76	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    {    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	206	None	replace
157	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  parent.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  parent.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    {    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	206	None	replace
158	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getName()!=  null)return  false;	  if(var    ==    null    ||    var.getName()!=    null)return    false;    }    	non-compiled	[CE]  	15	None	replace
159	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getName()!=  null)return  true;  }	  if(var    ==    null    ||    var.getName()!=    null)return    false;    }    	non-compiled	[CE]  	15	None	replace
160	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getName()!=  null)return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)return    false;    }    	non-compiled	[CE]  	15	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION);	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	110	None	replace
162	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR)  {  return  true;  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	110	None	replace
163	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.FUNCTION)  {  return  true;  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	110	None	replace
164	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR)  {  return  false;  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	110	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var!=    null    &&    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	225	None	replace
166	[BUG]  [BUGGY]  parent  ==  null  ||!removeGlobals)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    when(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	184	None	replace
167	[BUG]  [BUGGY]  (var  ==  null  &&  var.getType()!=  Token.VAR))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  &&  var.getType()!=  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  &&  var.getType()!=  Token.VAR))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.VAR))    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
168	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.VAR))    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
169	[BUG]  [BUGGY]  (var!=  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.VAR))    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
170	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()  >=  Token.VAR))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getType()  >=  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()  >=  Token.VAR))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.VAR))    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
171	[BUG]  [BUGGY]  (var!=  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.VAR))    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
172	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;	  (var    ==    null    ||    var.getType()!=    Token.VAR))    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
173	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.VAR)return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    }    	non-compiled	[CE]  	226	None	replace
174	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.VAR)return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.VAR)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.getType()!=  Token.VAR)return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    }    	non-compiled	[CE]  	226	None	replace
175	[BUG]  [BUGGY]  return  false;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	107	None	replace
176	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  &&  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.getName()!=  null)  {  return  false;  }	  if(var!=    null    &&    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	186	None	replace
177	[BUG]  [BUGGY]  var!=  null  &&  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var!=  null  &&  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var!=  null  &&  var.getName()!=  null)  {  return  false;  }	  if(var!=    null    &&    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	186	None	replace
178	[BUG]  [BUGGY]  if(var!=  null  &&  var.getName()  ==  null)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.getName()  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getName()  ==  null)  {  return  false;  }	  if(var!=    null    &&    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	186	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isGlobal());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isGlobal());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.hasGlobal())    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
180	[BUG]  [BUGGY]  parent  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.hasGlobal())    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
181	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
182	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
183	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
184	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
185	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
186	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  If(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  If(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    If(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
187	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
188	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	87	None	replace
189	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	87	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	211	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.isGlobal());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.isGlobal());	  Preconditions.checkArgument(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	211	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);	  Preconditions.checkArgument(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	211	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	211	None	replace
194	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
195	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  ==  Token.FUNCTION)  {  return  true;	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
196	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
197	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
198	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
200	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)return    false;    }    	non-compiled	[CE]  not  a  statement	190	None	replace
201	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  true;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  ==  Token.VAR)  {  return  true;	  ||    var.getType()    ==    Token.VAR)    {    return    false;    	non-compiled	[CE]  not  a  statement	99	None	replace
202	[BUG]  [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  true;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()!=  Token.VAR)  {  return  true;	  ||    var.getType()    ==    Token.VAR)    {    return    false;    	non-compiled	[CE]  not  a  statement	99	None	replace
203	[BUG]  [BUGGY]  |  var.getType()  ==  Token.VAR)  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()  ==  Token.VAR)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()  ==  Token.VAR)  {  return  false;	  ||    var.getType()    ==    Token.VAR)    {    return    false;    	non-compiled	[CE]  	99	None	replace
204	[BUG]  [BUGGY]  ||  var.getType()  >=  Token.VAR)  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()  >=  Token.VAR)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  >=  Token.VAR)  {  return  false;	  ||    var.getType()    ==    Token.VAR)    {    return    false;    	non-compiled	[CE]  	99	None	replace
205	[BUG]  [BUGGY]  ||  var  >=  null)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var  >=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var  >=  null)  {  return  false;  }	  ||    var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
206	[BUG]  [BUGGY]  parent!=  null)  {  return  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null)  {  return  true;  }	  if(var!=    null)    {    return    true;    }    	non-compiled	[CE]  	147	None	replace
207	[BUG]  [BUGGY]  removeGlobals  &&  var.isRemovable();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &&  var.isRemovable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &&  var.isRemovable();	  removeGlobals    ||    var.isRemovable();    	non-compiled	[CE]  	29	None	replace
208	[BUG]  [BUGGY]  var  ||  var.isRemovable();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ||  var.isRemovable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ||  var.isRemovable();	  removeGlobals    ||    var.isRemovable();    	non-compiled	[CE]  	29	None	replace
209	[BUG]  [BUGGY]  removeGlobals  ||  var.getName();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.getName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.getName();	  removeGlobals    ||    var.isRemovable();    	non-compiled	[CE]  	29	None	replace
210	[BUG]  [BUGGY]  |  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()  ==  Token.VAR)  {  return  false;  }	  ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	96	None	replace
211	[BUG]  [BUGGY]  parent  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()    >=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	176	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	115	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isGlobal());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||  var.isGlobal());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	115	None	replace
214	[BUG]  [BUGGY]  if(codingConvention.isGlobal()  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isGlobal()  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isGlobal()  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    >=    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	59	None	replace
215	[BUG]  [BUGGY]  ||  var.getName()!=  null)  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getName()!=  null)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getName()!=  null)  {  return  false;	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    >=    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	59	None	replace
216	[BUG]  [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	40	None	replace
217	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	40	None	replace
218	[BUG]  [BUGGY]  if(removeGlobals)  {  if(!removeGlobals)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals)  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals)  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    if(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    if(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals);	  if(!removeGlobals)    {    return    false;    }    if(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    if(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getName()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getName()!=  null);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getName()!=  null);	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    If(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	57	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null);	  if(var    ==    null)    {    return    false;    }    if(var    >=    null)    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
224	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  var.getType()!=    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
225	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  var.getType()!=    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
226	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  var.getType()!=    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
227	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	78	None	replace
228	[BUG]  [BUGGY]  ||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  	198	None	replace
229	[BUG]  [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  	198	None	replace
230	[BUG]  [BUGGY]  |(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  	198	None	replace
231	[BUG]  [BUGGY]  ||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( ".__ ")  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( ".__ ")  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( ".__ ")	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  	198	None	replace
232	[BUG]  [BUGGY]  ||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  	198	None	replace
233	[BUG]  [BUGGY]  |(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  	198	None	replace
234	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	53	None	replace
235	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;	  var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	53	None	replace
236	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var  ==  null  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var!=  null  ||  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isConstructor())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isConstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||  var.isConstructor())  {  return  false;  }	  Preconditions.checkState(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isRemovable())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||  var.isRemovable())  {  return  false;  }	  Preconditions.checkState(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
242	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
243	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
244	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
245	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
246	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
247	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
248	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
249	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
250	[BUG]  [BUGGY]  ||!removeGlobals)  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeGlobals)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeGlobals)  {  return  true;  }	  ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	80	None	replace
251	[BUG]  [BUGGY]  |!removeGlobals)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|!removeGlobals)  {  return  false;  }	  ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	80	None	replace
252	[BUG]  [BUGGY]  Var  var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
253	[BUG]  [BUGGY]  var  ==  null  &&  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ==  null  &&  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  &&  var.getName()!=  null)  {  return  false;  }	  var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isTransient());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isTransient());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isTransient());	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal());    	non-compiled	[CE]  	42	None	replace
255	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  for(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  for(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  for(var!=  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    for(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
256	[BUG]  [BUGGY]  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	for(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    for(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
257	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())  {  return  false;  }  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    for(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
258	[BUG]  [BUGGY]  For(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  For(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	For(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    for(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.getName())  {  return  false;  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.getName())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.getName())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.getName())    {    return    false;    }    	non-compiled	[CE]  	224	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	61	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR,  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR,  isPropertyAssign);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR,  isPropertyAssign);	          Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	61	None	replace
262	[BUG]  [BUGGY]  |  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	50	None	replace
263	[BUG]  [BUGGY]  ||  codingConvention.isGlobal(var.getName()))  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  codingConvention.isGlobal(var.getName()))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  codingConvention.isGlobal(var.getName()))  {  return  false;	  if(var    ==    null)    {    return    false;    }    if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	23	None	replace
264	[BUG]  [BUGGY]  ||  codingConvention.isGlobal(var.getName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  codingConvention.isGlobal(var.getName()))  {  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  codingConvention.isGlobal(var.getName()))  {	  if(var    ==    null)    {    return    false;    }    if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	23	None	replace
265	[BUG]  [BUGGY]  ||  var.isConstructor())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isConstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isConstructor())  {  return  false;  }	  ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
266	[BUG]  [BUGGY]  ||  var.isUnknown())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isUnknown())  {  return  false;  }	  ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
267	[BUG]  [BUGGY]  ||  var.isVarArgs())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isVarArgs())  {  return  false;  }	  ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
268	[BUG]  [BUGGY]  ||  var.isRemovable())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isRemovable())  {  return  false;  }	  ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
269	[BUG]  [BUGGY]  ||  var.isLocal())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isLocal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isLocal())  {  return  false;  }	  ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
270	[BUG]  [BUGGY]  ||  var.isInterface())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isInterface())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isInterface())  {  return  false;  }	  ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  scope);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  scope);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	215	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  null);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  null);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	215	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  isPropertyAssign);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  isPropertyAssign);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	215	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  ignoreGlobals);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  ignoreGlobals);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  ignoreGlobals);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	215	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  codingConvention);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  codingConvention);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  codingConvention);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	215	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  node);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  node);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	215	None	replace
277	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	93	None	replace
278	[BUG]  [BUGGY]  if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	93	None	replace
279	[BUG]  [BUGGY]  parent  ==  null)  {  return  false;  }  while(var!=  null)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null)  {  return  false;  }  while(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null)  {  return  false;  }  while(var!=  null)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    while(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
280	[BUG]  [BUGGY]  While(var!=  null  &&  var.isGlobal())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  While(var!=  null  &&  var.isGlobal())  {  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	While(var!=  null  &&  var.isGlobal())  {	  if(var    ==    null)    {    return    false;    }    while(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
281	[BUG]  [BUGGY]  parent  ==  null)  {  return  false;  }  while(var  ==  null)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null)  {  return  false;  }  while(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null)  {  return  false;  }  while(var  ==  null)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    while(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
282	[BUG]  [BUGGY]  While(var!=  null  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  While(var!=  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	While(var!=  null  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    while(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
283	[BUG]  [BUGGY]  While(var  ==  null  &&  var.isGlobal())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  While(var  ==  null  &&  var.isGlobal())  {  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	While(var  ==  null  &&  var.isGlobal())  {	  if(var    ==    null)    {    return    false;    }    while(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
284	[BUG]  [BUGGY]  While(var  ==  null  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  While(var  ==  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	While(var  ==  null  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    while(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
285	[BUG]  [BUGGY]  While(var!=  null  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  While(var!=  null  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	While(var!=  null  &&  var.getType()  ==  Token.VAR)  {	  if(var    ==    null)    {    return    false;    }    while(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	63	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	63	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	63	None	replace
289	[BUG]  [BUGGY]  parent  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	149	None	replace
290	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	149	None	replace
291	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  true;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	149	None	replace
292	[BUG]  [BUGGY]  allowSecondarySideEffects)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  allowSecondarySideEffects)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	allowSecondarySideEffects)  {  return  false;  }	  if(removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	83	None	replace
293	[BUG]  [BUGGY]  ||  removeGlobals)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  removeGlobals)  {  return  false;  }	  if(removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	83	None	replace
294	[BUG]  [BUGGY]  removeGlobals  ||  removeGlobals)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  removeGlobals)  {  return  false;  }	  if(removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	83	None	replace
295	[BUG]  [BUGGY]  if(removeGlobals  ||  removeGlobals)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  removeGlobals)  {  return  false;  }	  if(removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	83	None	replace
296	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	152	None	replace
297	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	152	None	replace
298	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	152	None	replace
299	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	152	None	replace
300	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	152	None	replace
301	[BUG]  [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(!var.isGlobal());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!var.isGlobal());	  Preconditions.checkState(var.isGlobal());    	non-compiled	[CE]  ';'  expected	46	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	66	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	66	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	66	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	66	None	replace
308	[BUG]  [BUGGY]  |  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	122	None	replace
309	[BUG]  [BUGGY]  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }	  ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	122	None	replace
310	[BUG]  [BUGGY]  NodeUtil.removeChild(var,  codingConvention);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeUtil.removeChild(var,  codingConvention);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeUtil.removeChild(var,  codingConvention);	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
311	[BUG]  [BUGGY]  return  false;  NodeUtil.removeChild(var,  codingConvention);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  NodeUtil.removeChild(var,  codingConvention);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  NodeUtil.removeChild(var,  codingConvention);	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
312	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
313	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  NodeUtil.removeChild(var,  codingConvention);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  NodeUtil.removeChild(var,  codingConvention);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  }  else  {  NodeUtil.removeChild(var,  codingConvention);  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
314	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  for(Iterator  <  Var>  it  =  referenced.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  ';'  expected	182	None	replace
315	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  for(Iterator  <  Var>  it  =  references.iterator();  it.hasNext();)  {  Preconditions.checkNotNull(it.next());  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  ';'  expected	182	None	replace
316	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  Preconditions.checkState(fnScope.getVar(var.getName())!=  null);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  Preconditions.checkState(fnScope.getVar(var.getName())!=  null);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  else  {  Preconditions.checkState(fnScope.getVar(var.getName())!=  null);  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
317	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    If(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	33	None	replace
318	[BUG]  [BUGGY]  if(var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    If(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
319	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    If(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
320	[BUG]  [BUGGY]  if(!removeGlobals)  {  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    If(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	33	None	replace
321	[BUG]  [BUGGY]  ||!var.isGlobal())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	217	None	replace
322	[BUG]  [BUGGY]  parent  ==  null  ||!var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||!var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||!var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||!var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||!var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||!var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
324	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR)  {  return  false;  }	  var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	154	None	replace
325	[BUG]  [BUGGY]  Var  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var.getType()!=  Token.VAR)  {  return  false;  }	  var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	154	None	replace
326	[BUG]  [BUGGY]  (var.getType()  ==  Token.VAR))  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var.getType()  ==  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var.getType()  ==  Token.VAR))  {  return  false;  }	  var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	154	None	replace
327	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	138	None	replace
328	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.VAR);	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	138	None	replace
329	[BUG]  [BUGGY]  return(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.VAR);	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	138	None	replace
330	[BUG]  [BUGGY]  return(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.VAR);	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	138	None	replace
331	[BUG]  [BUGGY]  parent!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  ||  var.isGlobal())  {  return  false;  }	  if(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
332	[BUG]  [BUGGY]  ||  var.isGlobal())  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isGlobal())  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	167	None	replace
333	[BUG]  [BUGGY]  Node  parent  =  var.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Node  parent  =  var.getParent();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Node  parent  =  var.getParent();	  return    true;    Node    parent    =    var.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
334	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  Node  parent  =  var.getParent();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  Node  parent  =  var.getParent();  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  Node  parent  =  var.getParent();  }	  return    true;    Node    parent    =    var.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
335	[BUG]  [BUGGY]  if(!isGlobal())  {  return  true;  Node  parent  =  var.getParent();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isGlobal())  {  return  true;  Node  parent  =  var.getParent();  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal())  {  return  true;  Node  parent  =  var.getParent();  }	  return    true;    Node    parent    =    var.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
336	[BUG]  [BUGGY]  parent!=  null;  Node  parent  =  var.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null;  Node  parent  =  var.getParent();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null;  Node  parent  =  var.getParent();	  return    true;    Node    parent    =    var.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME);  Node  parent  =  var.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME);  Node  parent  =  var.getParent();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME);  Node  parent  =  var.getParent();	  return    true;    Node    parent    =    var.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
338	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isLocal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isLocal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	192	None	replace
339	[BUG]  [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    	non-compiled	[CE]  not  a  statement	162	None	replace
340	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    	non-compiled	[CE]  not  a  statement	162	None	replace
341	[BUG]  [BUGGY]  if(var  ==  null  &&  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	168	None	replace
342	[BUG]  [BUGGY]  parent  ==  null  ||  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	168	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isConstructor())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isConstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||  var.isConstructor())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||  var.isRemovable())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkArgument(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isVarArgs())  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||  var.isVarArgs())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
347	[BUG]  [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()!=  Token.FUNCTION)  {  return  true;	  ||    var.getType()!=    Token.FUNCTION)    {    return    false;    	non-compiled	[CE]  not  a  statement	125	None	replace
348	[BUG]  [BUGGY]  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  >=  Token.FUNCTION)  {  return  false;	  ||    var.getType()!=    Token.FUNCTION)    {    return    false;    	non-compiled	[CE]  not  a  statement	125	None	replace
349	[BUG]  [BUGGY]  |  var.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()!=  Token.FUNCTION)  {  return  false;	  ||    var.getType()!=    Token.FUNCTION)    {    return    false;    	non-compiled	[CE]  not  a  statement	125	None	replace
350	[BUG]  [BUGGY]  ||  var.getName()!=  Token.FUNCTION)  {  return  false;  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getName()!=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getName()!=  Token.FUNCTION)  {  return  false;	  ||    var.getType()!=    Token.FUNCTION)    {    return    false;    	non-compiled	[CE]  not  a  statement	125	None	replace
351	[BUG]  [BUGGY]  ||  codingConvention.isGlobal(var.getName()))  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  codingConvention.isGlobal(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  codingConvention.isGlobal(var.getName()))  {  return  false;  }	  parent    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
352	[BUG]  [BUGGY]  parent!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null)  {  return  false;  }	  parent    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
353	[BUG]  [BUGGY]  if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
354	[BUG]  [BUGGY]  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
355	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
356	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  scope);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  scope);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  scope);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  not  a  statement	10	None	replace
357	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  fnScope);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  fnScope);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  fnScope);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  not  a  statement	10	None	replace
358	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  false);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  false);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  not  a  statement	10	None	replace
359	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName()  +  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName()  +  1);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName()  +  1);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  not  a  statement	10	None	replace
360	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  true);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  true);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  true);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  not  a  statement	10	None	replace
361	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  codingConvention);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  codingConvention);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  codingConvention);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  not  a  statement	10	None	replace
362	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
363	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
364	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
365	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
366	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.getName()!=  null)  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.getName()!=  null)  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.getName()!=  null)  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkState(var.getName()!=  null);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getName()!=  null);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getName()!=  null);	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
368	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;	  if(var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  not  a  statement	208	None	replace
369	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)return  false;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)return  false;	  if(var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  not  a  statement	208	None	replace
370	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)return  false;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)return  false;	  if(var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  not  a  statement	208	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.NAME);	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  referenced);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  referenced);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME,  referenced);	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  isPropertyAssign);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  isPropertyAssign);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME,  isPropertyAssign);	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  codingConvention);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  codingConvention);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME,  codingConvention);	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  nameNode);  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  nameNode);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME,  nameNode);	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
377	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	155	None	replace
378	[BUG]  [BUGGY]  if(!removeGlobals)  {  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
379	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.getType()  ==  Token.FUNCTION)  {  if(!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.getType()  ==  Token.FUNCTION)  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.getType()  ==  Token.FUNCTION)  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
380	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.getType()  ==  Token.VAR)  {  if(!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.getType()  ==  Token.VAR)  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.getType()  ==  Token.VAR)  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
381	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(!removeGlobals  ||!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(!removeGlobals  ||!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(!removeGlobals  ||!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
382	[BUG]  [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "))  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "))  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "))	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "))    	non-compiled	[CE]  not  a  statement	195	None	replace
383	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "))    	non-compiled	[CE]  not  a  statement	195	None	replace
384	[BUG]  [BUGGY]  return(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	136	None	replace
385	[BUG]  [BUGGY]  return(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.VAR  &&  var.getType()  ==  Token.FUNCTION);	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	136	None	replace
386	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR)&&  var.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR)&&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR)&&  var.getType()  ==  Token.FUNCTION);	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	136	None	replace
387	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    false;    }    	non-compiled	[CE]  not  a  statement	41	None	replace
388	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    false;    }    	non-compiled	[CE]  not  a  statement	41	None	replace
389	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    false;    }    	non-compiled	[CE]  not  a  statement	41	None	replace
390	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    false;    }    	non-compiled	[CE]  not  a  statement	41	None	replace
391	[BUG]  [BUGGY]  (var  ==  null  &&  var.getName()!=  null))  {  return  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  &&  var.getName()!=  null))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  &&  var.getName()!=  null))  {  return  false;  }	  (var    ==    null    ||    var.getName()!=    null))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
392	[BUG]  [BUGGY]  (var!=  null  ||  var.getName()!=  null))  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  ||  var.getName()!=  null))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  ||  var.getName()!=  null))  {  return  false;  }	  (var    ==    null    ||    var.getName()!=    null))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
393	[BUG]  [BUGGY]  (var  ==  null  ||  var.getSimpleName()!=  null))  {  return  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getSimpleName()!=  null))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getSimpleName()!=  null))  {  return  false;  }	  (var    ==    null    ||    var.getName()!=    null))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
394	[BUG]  [BUGGY]  (var  ==  null  ||  var.getName()  >=  null))  {  return  false;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getName()  >=  null))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getName()  >=  null))  {  return  false;  }	  (var    ==    null    ||    var.getName()!=    null))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
395	[BUG]  [BUGGY]  removeGlobals  &&  var.isLocal();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &&  var.isLocal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &&  var.isLocal();	  removeGlobals    ||    var.isLocal();    	non-compiled	[CE]  not  a  statement	214	None	replace
396	[BUG]  [BUGGY]  removeGlobals  ||  var.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.getType()  ==  Token.VAR;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.getType()  ==  Token.VAR;	  removeGlobals    ||    var.isLocal();    	non-compiled	[CE]  not  a  statement	214	None	replace
397	[BUG]  [BUGGY]  removeGlobals  ||  var.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.getType()  ==  Token.FUNCTION;	  removeGlobals    ||    var.isLocal();    	non-compiled	[CE]  not  a  statement	214	None	replace
398	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)return  false;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.VAR)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  not  a  statement	227	None	replace
399	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  true;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)return  true;	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  not  a  statement	227	None	replace
400	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.VAR)return  false;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.VAR)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()!=  Token.VAR)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  not  a  statement	227	None	replace
401	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)turn  false;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)turn  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)turn  false;	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  not  a  statement	227	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isRemovable())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	104	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	104	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isConstructor())  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isConstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isConstructor())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	104	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isUnknown())  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isUnknown())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	104	None	replace
406	[BUG]  [BUGGY]  parent  ==  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  return    true;    if(!removeGlobals    &&    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
407	[BUG]  [BUGGY]  parent!=  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  return    true;    if(!removeGlobals    &&    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
408	[BUG]  [BUGGY]  parent  ==  null;  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null;  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null;  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  return    true;    if(!removeGlobals    &&    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
409	[BUG]  [BUGGY]  parent!=  null;  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null;  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null;  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  return    true;    if(!removeGlobals    &&    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
410	[BUG]  [BUGGY]  ||!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeGlobals  &&  var.isGlobal())  {  return  true;  }	  return    true;    if(!removeGlobals    &&    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.isGlobal());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	62	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  codingConvention.isGlobal());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  codingConvention.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  codingConvention.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	62	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	62	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
415	[BUG]  [BUGGY]  removeGlobals  ||  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.isRemovable())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
416	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  ||  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  ||  var.isRemovable())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isRemovable());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isRemovable());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isRemovable());	  if(!removeGlobals    &&    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
418	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.isRemovable())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
419	[BUG]  [BUGGY]  parent  ==  null  ||  var.getName()  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.getName()  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.getName()  ==  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	164	None	replace
420	[BUG]  [BUGGY]  return  false;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  return    true;    Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	111	None	replace
421	[BUG]  [BUGGY]  parent!=  null  &&!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	201	None	replace
422	[BUG]  [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	201	None	replace
423	[BUG]  [BUGGY]  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	201	None	replace
424	[BUG]  [BUGGY]  removeGlobals  ||  var.isVarArgs())  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	201	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isVarArgs());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isVarArgs());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isVarArgs());	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	201	None	replace
426	[BUG]  [BUGGY]  &&!removeGlobals)  {  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&!removeGlobals)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&!removeGlobals)  {  return  true;  }	  &&!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	158	None	replace
427	[BUG]  [BUGGY]  &&!isPropertyAssign)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&!isPropertyAssign)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&!isPropertyAssign)  {  return  false;  }	  &&!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	158	None	replace
428	[BUG]  [BUGGY]  &&!isPropertyAssign)  {  return  true;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&!isPropertyAssign)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&!isPropertyAssign)  {  return  true;  }	  &&!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	158	None	replace
429	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
430	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
431	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
432	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
433	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()  >=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()  >=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    if(var!=  null  ||  var.getName()  >=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
434	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  >>  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  >>  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  >>  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
435	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  If(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  If(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    If(var!=  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
436	[BUG]  [BUGGY]  var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()    >=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	148	None	replace
437	[BUG]  [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
438	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
439	[BUG]  [BUGGY]  parent  ==  null  ||  var.isVarArgs())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.isVarArgs())  {  return  false;  }	  if(var    ==    null    ||    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	209	None	replace
440	[BUG]  [BUGGY]  removeGlobals  &&  var.getName();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &&  var.getName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &&  var.getName();	  removeGlobals    &&    var.isGlobal();    	non-compiled	[CE]  	28	None	replace
441	[BUG]  [BUGGY]  removeGlobals  &&  var.getScope();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &&  var.getScope();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &&  var.getScope();	  removeGlobals    &&    var.isGlobal();    	non-compiled	[CE]  	28	None	replace
442	[BUG]  [BUGGY]  parent  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ||  var.isGlobal())  {  return  false;  }	  if(removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	82	None	replace
443	[BUG]  [BUGGY]  return  false;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  ';'  expected	112	None	replace
444	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	79	None	replace
445	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	79	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	146	None	replace
447	[BUG]  [BUGGY]  removeGlobals  ||  var.isRemovableVar())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
448	[BUG]  [BUGGY]  parent!=  null  &&!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
449	[BUG]  [BUGGY]  ||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isRemovableVar())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isRemovableVar());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isRemovableVar());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isRemovableVar());	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
452	[BUG]  [BUGGY]  parent  ==  null;  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null;  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null;  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  return    true;    if(var    ==    null    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
453	[BUG]  [BUGGY]  parent  ==  null)  {  return  false;  }  for(var!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null)  {  return  false;  }  for(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null)  {  return  false;  }  for(var!=  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    for(var!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
454	[BUG]  [BUGGY]  parent  ==  null)  {  return  false;  }  for(var  >>  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null)  {  return  false;  }  for(var  >>  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null)  {  return  false;  }  for(var  >>  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    for(var!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
455	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    If(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
456	[BUG]  [BUGGY]  Parent  <?>  parent  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Parent  <?>  parent  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Parent  <?>  parent  ==  null  ||  var.isGlobal())  {  return  false;  }	  parent    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
457	[BUG]  [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isRemovableVar(var.getName()))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
458	[BUG]  [BUGGY]  RemoveGlobals  &&  var.isGlobal();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  &&  var.isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  &&  var.isGlobal();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
459	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isRemovable();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isRemovable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isRemovable();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
460	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isTransient();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isTransient();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isTransient();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	30	None	replace
461	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isConstructor();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isConstructor();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isConstructor();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	30	None	replace
462	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isVarArgs();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isVarArgs();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isVarArgs();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	30	None	replace
463	[BUG]  [BUGGY]  RemoveGlobals  ||  var.getName();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.getName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.getName();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	30	None	replace
464	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var!=    null    &&    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	191	None	replace
465	[BUG]  [BUGGY]  if(var!=  null  &&!var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&!var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&!var.isGlobal())  {  return  false;  }	  if(var!=    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	203	None	replace
466	[BUG]  [BUGGY]  ||  var!=  null  ||!var.isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var!=  null  ||!var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var!=  null  ||!var.isGlobal())  {  return  false;  }	  if(var!=    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
467	[BUG]  [BUGGY]  parent  ==  null  ||  var.isLocal())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.isLocal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.isLocal())  {  return  false;  }	  if(var    ==    null    ||    var.isLocal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	210	None	replace
468	[BUG]  [BUGGY]  if(var!=  null  ||  var.isLocal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isLocal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isLocal())  {  return  false;  }	  if(var    ==    null    ||    var.isLocal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	210	None	replace
469	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isLocal())return  false;  }	  if(var    ==    null    ||    var.isLocal())    {    return    false;    }    	non-compiled	[CE]  	210	None	replace
470	[BUG]  [BUGGY]  parent  ==  null  ||  var.isUnknown())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.isUnknown())  {  return  false;  }	  if(var    ==    null    ||    var.isUnknown())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	169	None	replace
471	[BUG]  [BUGGY]  if(var!=  null  ||  var.isUnknown())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isUnknown())  {  return  false;  }	  if(var    ==    null    ||    var.isUnknown())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	169	None	replace
472	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isUnknown())return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isUnknown())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isUnknown())return  false;  }	  if(var    ==    null    ||    var.isUnknown())    {    return    false;    }    	non-compiled	[CE]  	169	None	replace
473	[BUG]  [BUGGY]  |  var.getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()  ==  Token.FUNCTION)  {  return  false;	  ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    	non-compiled	[CE]  	52	None	replace
474	[BUG]  [BUGGY]  (var  ==  null  &&  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  &&  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  &&  var.getType()!=  Token.FUNCTION))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.FUNCTION))    {    return    false;    }    	non-compiled	[CE]  	142	None	replace
475	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()  ==  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getType()  ==  Token.FUNCTION))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()  ==  Token.FUNCTION))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.FUNCTION))    {    return    false;    }    	non-compiled	[CE]  	142	None	replace
476	[BUG]  [BUGGY]  (var!=  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.FUNCTION))    {    return    false;    }    	non-compiled	[CE]  	142	None	replace
477	[BUG]  [BUGGY]  (var!=  null  &&  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  &&  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  &&  var.getType()!=  Token.FUNCTION))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.FUNCTION))    {    return    false;    }    	non-compiled	[CE]  	142	None	replace
478	[BUG]  [BUGGY]  (var!=  null  ||  var.getType()  ==  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  ||  var.getType()  ==  Token.FUNCTION))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  ||  var.getType()  ==  Token.FUNCTION))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.FUNCTION))    {    return    false;    }    	non-compiled	[CE]  	142	None	replace
479	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()  >=  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getType()  >=  Token.FUNCTION))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()  >=  Token.FUNCTION))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.FUNCTION))    {    return    false;    }    	non-compiled	[CE]  	142	None	replace
480	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	67	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	67	None	replace
482	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	67	None	replace
483	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var!=    null    &&    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	188	None	replace
484	[BUG]  [BUGGY]  parent!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var!=    null    &&    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	188	None	replace
485	[BUG]  [BUGGY]  return(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION);	  return(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	137	None	replace
486	[BUG]  [BUGGY]  return(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION);	  return(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	137	None	replace
487	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.VAR)  {  return  true;  }	  return    true;    Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  	223	None	replace
488	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	51	None	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;	  if(var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	51	None	replace
490	[BUG]  [BUGGY]  parent  ==  null;  if(removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null;  if(removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null;  if(removeGlobals  ||  var.isGlobal())  {  return  false;  }	  return    true;    if(!removeGlobals    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  	179	None	replace
491	[BUG]  [BUGGY]  parent  ==  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }	  return    true;    if(!removeGlobals    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  	179	None	replace
492	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isVarArgs();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isVarArgs();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isVarArgs();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  	44	None	replace
493	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isImmutable();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isImmutable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isImmutable();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  	44	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isInterface();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isInterface();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isInterface();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  	44	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isTransient();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isTransient();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isTransient();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  	44	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isUnknown();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isUnknown();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isUnknown();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  	44	None	replace
497	[BUG]  [BUGGY]  parent!=  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  parent    ==    null    &&!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	200	None	replace
498	[BUG]  [BUGGY]  parent  ==  null  &&!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  parent    ==    null    &&!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	200	None	replace
499	[BUG]  [BUGGY]  While(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  While(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	While(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    while(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
500	[BUG]  [BUGGY]  if(removeGlobals)  {  if(!removeGlobals  ||!removeGlobals)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals)  {  if(!removeGlobals  ||!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals)  {  if(!removeGlobals  ||!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    while(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
501	[BUG]  [BUGGY]  removeGlobals  ||!removeGlobals)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    while(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
502	[BUG]  [BUGGY]  if(removeGlobals)  {  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals)  {  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals)  {  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    while(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
503	[BUG]  [BUGGY]  ||  var.isGlobal())  {  return  true;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isGlobal())  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isGlobal())  {  return  true;	  ||    var.isGlobal())    {    return    false;    	non-compiled	[CE]  	74	None	replace
504	[BUG]  [BUGGY]  ||  var.isConstructor())  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isConstructor())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isConstructor())  {  return  false;	  ||    var.isGlobal())    {    return    false;    	non-compiled	[CE]  	74	None	replace
505	[BUG]  [BUGGY]  ||  var.isVarArgs())  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isVarArgs())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isVarArgs())  {  return  false;	  ||    var.isGlobal())    {    return    false;    	non-compiled	[CE]  	74	None	replace
506	[BUG]  [BUGGY]  ||  var.isUnknown())  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isUnknown())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isUnknown())  {  return  false;	  ||    var.isGlobal())    {    return    false;    	non-compiled	[CE]  	74	None	replace
507	[BUG]  [BUGGY]  ||  var.isLocal())  {  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isLocal())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isLocal())  {  return  false;	  ||    var.isGlobal())    {    return    false;    	non-compiled	[CE]  	74	None	replace
508	[BUG]  [BUGGY]  ||  var.isInterface())  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isInterface())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isInterface())  {  return  false;	  ||    var.isGlobal())    {    return    false;    	non-compiled	[CE]  	74	None	replace
509	[BUG]  [BUGGY]  NodeUtil.removeChild(var);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeUtil.removeChild(var);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeUtil.removeChild(var);	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  	181	None	replace
510	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var);  }	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  	181	None	replace
511	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  NodeUtil.removeChild(var);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  NodeUtil.removeChild(var);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  }  else  {  NodeUtil.removeChild(var);  }	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  	181	None	replace
512	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeUtil.removeChild(var);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeUtil.removeChild(var);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeUtil.removeChild(var);  }	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  	181	None	replace
513	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var);  }  else  {  Preconditions.checkNotNull(var);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var);  }  else  {  Preconditions.checkNotNull(var);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeUtil.removeChild(var);  }  else  {  Preconditions.checkNotNull(var);  }	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  	181	None	replace
514	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeUtil.removeChild(var,  nameNode);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeUtil.removeChild(var,  nameNode);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeUtil.removeChild(var,  nameNode);  }	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  	181	None	replace
515	[BUG]  [BUGGY]  ||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
516	[BUG]  [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  ||  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
517	[BUG]  [BUGGY]  |(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
518	[BUG]  [BUGGY]  (var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
519	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")))  {  return  true;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
520	[BUG]  [BUGGY]  parent  ==  null  &&!isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!isGlobal())  {  return  false;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	219	None	replace
521	[BUG]  [BUGGY]  ||!isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!isGlobal())  {  return  false;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	219	None	replace
522	[BUG]  [BUGGY]  parent!=  null  &&!isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&!isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&!isGlobal())  {  return  false;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	219	None	replace
523	[BUG]  [BUGGY]  parent  ==  null  ||!isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||!isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||!isGlobal())  {  return  false;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	219	None	replace
524	[BUG]  [BUGGY]  if(!isPropertyAssign())  {  return  false;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign())  {  return  false;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	219	None	replace
525	[BUG]  [BUGGY]  parent!=  null  ||!isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  ||!isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  ||!isGlobal())  {  return  false;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	219	None	replace
526	[BUG]  [BUGGY]  ||!isPropertyAssign)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!isPropertyAssign)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!isPropertyAssign)  {  return  false;  }	  if(!isPropertyAssign)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	218	None	replace
527	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign)  {  return  true;  }	  if(!isPropertyAssign)    {    return    false;    }    	non-compiled	[CE]  	218	None	replace
528	[BUG]  [BUGGY]  parent  ==  null  &&!isPropertyAssign)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!isPropertyAssign)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!isPropertyAssign)  {  return  false;  }	  if(!isPropertyAssign)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	218	None	replace
529	[BUG]  [BUGGY]  parent!=  null  &&!isPropertyAssign)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&!isPropertyAssign)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&!isPropertyAssign)  {  return  false;  }	  if(!isPropertyAssign)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	218	None	replace
530	[BUG]  [BUGGY]  if(isPropertyAssign)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(isPropertyAssign)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(isPropertyAssign)  {  return  false;  }	  if(!isPropertyAssign)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	218	None	replace
531	[BUG]  [BUGGY]  if(var.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.NAME)  {  return  true;  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	183	None	replace
532	[BUG]  [BUGGY]  if(var.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.NAME)  {  return  false;  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	183	None	replace
533	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
534	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
535	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
536	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
537	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
538	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
539	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
540	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var!=    null    &&    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	204	None	replace
541	[BUG]  [BUGGY]  var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var!=    null    &&    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	204	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);	  if(var!=    null    &&    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	204	None	replace
543	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getVars())  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getVars())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getVars())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
544	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  for(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null)  {  return  false;  }  for(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  return  false;  }  for(var!=  null)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
545	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getName())  {  return  false;  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getName())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getName())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
546	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  false;  }  for(var  ==  null)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
547	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getScopes())  {  return  false;  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getScopes())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getScopes())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
548	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getGlobals())  {  return  false;  }  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getGlobals())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  return  false;  }  for(Var  var  :  var.getGlobals())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
549	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)return  false;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)return    false;    	non-compiled	[CE]  ';'  expected	189	None	replace
550	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)return  false;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)return    false;    	non-compiled	[CE]  ';'  expected	189	None	replace
551	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.FUNCTION)return  false;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.FUNCTION)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()!=  Token.FUNCTION)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)return    false;    	non-compiled	[CE]  ';'  expected	189	None	replace
552	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)turn  false;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)turn  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)turn  false;	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)return    false;    	non-compiled	[CE]  ';'  expected	189	None	replace
553	[BUG]  [BUGGY]  var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    &&    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
554	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	106	None	replace
555	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.VAR)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	106	None	replace
556	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isGlobal())  {  return  false;  }	  removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	103	None	replace
557	[BUG]  [BUGGY]  ||  var.isGlobal();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isGlobal();	  var    ||    var.isGlobal();    	non-compiled	[CE]  	31	None	replace
558	[BUG]  [BUGGY]  var  ||  var.getType()  ==  Token.VAR;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ||  var.getType()  ==  Token.VAR;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ||  var.getType()  ==  Token.VAR;	  var    ||    var.isGlobal();    	non-compiled	[CE]  	31	None	replace
559	[BUG]  [BUGGY]  var  ||  var.getType()!=  Token.VAR;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ||  var.getType()!=  Token.VAR;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ||  var.getType()!=  Token.VAR;	  var    ||    var.isGlobal();    	non-compiled	[CE]  	31	None	replace
560	[BUG]  [BUGGY]  var  |=  var.isGlobal();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  |=  var.isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  |=  var.isGlobal();	  var    ||    var.isGlobal();    	non-compiled	[CE]  	31	None	replace
561	[BUG]  [BUGGY]  var  ||  var.isVarArgs();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ||  var.isVarArgs();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ||  var.isVarArgs();	  var    ||    var.isGlobal();    	non-compiled	[CE]  	31	None	replace
562	[BUG]  [BUGGY]  parent  ==  null  &&!removeGlobals)  {  return  true;  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!removeGlobals)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!removeGlobals)  {  return  true;  }	  if(!removeGlobals)    {    return    true;    }    	non-compiled	[CE]  	170	None	replace
563	[BUG]  [BUGGY]  parent  ==  null  &&!removeGlobals)  {  return  false;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    true;    }    	non-compiled	[CE]  	170	None	replace
564	[BUG]  [BUGGY]  parent  ==  null  ||!removeGlobals)  {  return  true;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||!removeGlobals)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||!removeGlobals)  {  return  true;  }	  if(!removeGlobals)    {    return    true;    }    	non-compiled	[CE]  	170	None	replace
565	[BUG]  [BUGGY]  if(removeGlobals)  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals)  {  return  true;  }	  if(!removeGlobals)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
566	[BUG]  [BUGGY]  parent!=  null  &&!removeGlobals)  {  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&!removeGlobals)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&!removeGlobals)  {  return  true;  }	  if(!removeGlobals)    {    return    true;    }    	non-compiled	[CE]  	170	None	replace
567	[BUG]  [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    If(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
568	[BUG]  [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    If(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
569	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    If(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	119	None	replace
570	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isLocal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isLocal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	192	None	replace
571	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign  &&  var.isRemovable())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	199	None	replace
572	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  var.isGlobal())  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign  &&  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign  &&  var.isGlobal())  {  return  true;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	199	None	replace
573	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  var.isUnknown())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign  &&  var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign  &&  var.isUnknown())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	199	None	replace
574	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  not  a  statement	196	None	replace
575	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  not  a  statement	196	None	replace
576	[BUG]  [BUGGY]  return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  not  a  statement	196	None	replace
577	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ ")))  {  return  false;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  not  a  statement	196	None	replace
578	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	183	None	replace
579	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.NAME);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	183	None	replace
580	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  ||  var.isGlobal())  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	183	None	replace
581	[BUG]  [BUGGY]  |  var  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var  ==  null)  {  return  false;  }	  ||    var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
582	[BUG]  [BUGGY]  if(removeGlobals  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.getName()!=  null)  {  return  false;  }	  if(removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
583	[BUG]  [BUGGY]  if(removeGlobals  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
584	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  &&  var.isGlobal());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  &&  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  &&  var.isGlobal());	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal());    	non-compiled	[CE]  not  a  statement	42	None	replace
585	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isUnknown());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isUnknown());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isUnknown());	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal());    	non-compiled	[CE]  not  a  statement	42	None	replace
586	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  not  a  statement	221	None	replace
587	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  not  a  statement	221	None	replace
588	[BUG]  [BUGGY]  if(!removeGlobals  &&  var!=  null  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var!=  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var!=  null  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    >=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
589	[BUG]  [BUGGY]  if(var!=  null  ||  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    >=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
590	[BUG]  [BUGGY]  Preconditions.checkState(var.isRemovable());  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isRemovable());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isRemovable());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.getName())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	224	None	replace
591	[BUG]  [BUGGY]  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    &&    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	90	None	replace
592	[BUG]  [BUGGY]  var  ||  var.isConstructor();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ||  var.isConstructor();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ||  var.isConstructor();	  var    ||    var.isGlobal();    	non-compiled	[CE]  not  a  statement	31	None	replace
593	[BUG]  [BUGGY]  var  ||  var.isUnknown();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ||  var.isUnknown();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ||  var.isUnknown();	  var    ||    var.isGlobal();    	non-compiled	[CE]  not  a  statement	31	None	replace
594	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  }	  return    true;    Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	223	None	replace
595	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()!=  Token.VAR);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()!=  Token.VAR);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()!=  Token.VAR);  }	  return    true;    Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	223	None	replace
596	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  ||  var.isGlobal())  {  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  }	  return    true;    Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	223	None	replace
597	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()!=  Token.VAR);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()!=  Token.VAR);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()!=  Token.VAR);  }	  return    true;    Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	223	None	replace
598	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()!=    Token.VAR    &&    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	124	None	replace
599	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;	  if(var.getType()!=    Token.VAR    &&    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	124	None	replace
600	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isRemovable())  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isRemovable())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isRemovable())  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	167	None	replace
601	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	167	None	replace
602	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()  ==  null)return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getName()  ==  null)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getName()  ==  null)return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
603	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()  ==  null)return  false;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getName()  ==  null)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getName()  ==  null)return  false;	  if(var    ==    null    ||    var.getName()!=    null)return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.isGlobal());  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  var.getName());  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  var.getName());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME,  var.getName());	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  var.isGlobal());  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME,  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME,  var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||!var.isGlobal());  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||!var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME  ||!var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  &&  var.isGlobal());  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  &&  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME  &&  var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	65	None	replace
609	[BUG]  [BUGGY]  parent  ==  null  ||  var.isGlobal())  {  return  false;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.isGlobal())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.isGlobal())  {  return  false;	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  not  a  statement	2	None	replace
610	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getName())  {  return  false;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getName())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  false;  }  for(var  =  var.getName())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
611	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  for(var  =  var.getName())  {  return  false;  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null)  {  return  false;  }  for(var  =  var.getName())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  return  false;  }  for(var  =  var.getName())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
612	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getParent())  {  return  false;  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getParent())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  false;  }  for(var  =  var.getParent())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
613	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  }  for(var  =  var.getName())  {  return  false;  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  true;  }  for(var  =  var.getName())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  }  for(var  =  var.getName())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
614	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  for(var  =  var.getParent())  {  return  false;  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null)  {  return  false;  }  for(var  =  var.getParent())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  return  false;  }  for(var  =  var.getParent())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
615	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getName())  {  return  true;  }  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getName())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  false;  }  for(var  =  var.getName())  {  return  true;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
616	[BUG]  [BUGGY]  return  false;  NodeUtil.removeChild(var);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  NodeUtil.removeChild(var);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  NodeUtil.removeChild(var);	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  not  a  statement	181	None	replace
617	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  NodeUtil.removeChild(var);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  NodeUtil.removeChild(var);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  return  true;  NodeUtil.removeChild(var);  }	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  not  a  statement	181	None	replace
618	[BUG]  [BUGGY]  if(var!=  null)  {  if(!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
619	[BUG]  [BUGGY]  if(!var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!var.isGlobal())  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
620	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
621	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
622	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  this);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  this);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  this);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  not  a  statement	10	None	replace
623	[BUG]  [BUGGY]  removeGlobals  &&  var.isRemovableVar();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &&  var.isRemovableVar();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &&  var.isRemovableVar();	  removeGlobals    &&    var.isGlobal();    	non-compiled	[CE]  not  a  statement	28	None	replace
624	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;	  if(var    ==    null    ||    var.isGlobal())return    true;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	160	None	replace
625	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    true;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	160	None	replace
626	[BUG]  [BUGGY]  if(var  ==  null)  {  if(!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null)  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    if(!removeGlobals)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	187	None	replace
627	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var!=    null    &&    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	204	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isPropertyAssign())  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isPropertyAssign())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||  var.isPropertyAssign())  {  return  false;  }	  Preconditions.checkState(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
629	[BUG]  [BUGGY]  var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var!=    null    &&    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	225	None	replace
630	[BUG]  [BUGGY]  if(var!=  null)  {  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    for(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	161	None	replace
631	[BUG]  [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
632	[BUG]  [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }	  if(var    ==    null    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
633	[BUG]  [BUGGY]  if(var!=  null  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||!removeGlobals  &&  var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
634	[BUG]  [BUGGY]  eradicateGlobals  |=  var.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.getType()  ==  Token.VAR;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.getType()  ==  Token.VAR;	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  not  a  statement	45	None	replace
635	[BUG]  [BUGGY]  eradicateGlobals  |=  var.getType()!=  Token.VAR;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.getType()!=  Token.VAR;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.getType()!=  Token.VAR;	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  not  a  statement	45	None	replace
636	[BUG]  [BUGGY]  eradicateGlobals  |=  var.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.getType()  ==  Token.FUNCTION;	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  not  a  statement	45	None	replace
637	[BUG]  [BUGGY]  eradicateGlobals  &=  var.isGlobal();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  &=  var.isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  &=  var.isGlobal();	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  not  a  statement	45	None	replace
638	[BUG]  [BUGGY]  eradicateGlobals  |=  var.isRemovable();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.isRemovable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.isRemovable();	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  not  a  statement	45	None	replace
639	[BUG]  [BUGGY]  removeGlobals  |=  var.getGlobalName();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getGlobalName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getGlobalName();	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  not  a  statement	43	None	replace
640	[BUG]  [BUGGY]  removeGlobals  |=  var.getGlobal();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getGlobal();	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  not  a  statement	43	None	replace
641	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  not  a  statement	198	None	replace
642	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  not  a  statement	198	None	replace
643	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  isPropertyAssign);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler.handleMissingVar(var,  isPropertyAssign);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingVar(var,  isPropertyAssign);	  aughtExceptionHandler.handleMissingVar(var);    	non-compiled	[CE]  not  a  statement	49	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(var.hasType()  &&  var.getType()!=  Token.VAR);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.hasType()  &&  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.hasType()  &&  var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  ';'  expected	68	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.getType()!=  Token.VAR);  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  ';'  expected	68	None	replace
646	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isRemovable();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isRemovable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isRemovable();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  ';'  expected	44	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  &&  var.isGlobal();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  &&  var.isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  &&  var.isGlobal();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  ';'  expected	44	None	replace
648	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isConstructor();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isConstructor();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isConstructor();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  ';'  expected	44	None	replace
649	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isLocal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isLocal())  {  return  true;  }	  if(var    ==    null    ||    var.isLocal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	210	None	replace
650	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
651	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
652	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  If(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  If(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    If(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
653	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isRemovableVar())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.isRemovableVar())  {  return  false;  }	  if(removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	82	None	replace
654	[BUG]  [BUGGY]  Preconditions.checkState(!removeVars  &&  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeVars  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeVars  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	104	None	replace
655	[BUG]  [BUGGY]  Preconditions.checkState(!var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!var.isGlobal())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	104	None	replace
656	[BUG]  [BUGGY]  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    &&    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
657	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var!=    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	94	None	replace
658	[BUG]  [BUGGY]  While(var!=  null  &&  var.isGlobal())  {  if(var!=  null)  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  While(var!=  null  &&  var.isGlobal())  {  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	While(var!=  null  &&  var.isGlobal())  {  if(var!=  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    if(var    [Delete]    null)    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
659	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(var!=  null)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(var!=  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    if(var    [Delete]    null)    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
660	[BUG]  [BUGGY]  if(codingConvention.isGlobal(var))  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isGlobal(var))  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isGlobal(var))  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    ==    null    ||    var.getName()    >>    null)    {    return    false;    }    	non-compiled	[CE]  	58	None	replace
661	[BUG]  [BUGGY]  if(codingConvention.isGlobal(var.getName()))  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isGlobal(var.getName()))  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isGlobal(var.getName()))  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    ==    null    ||    var.getName()    >>    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
662	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
663	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isUnremovable())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isUnremovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isUnremovable())  {  return  false;  }	  if(var    ==    null    ||    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	168	None	replace
664	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  &&  var.isVarArgs());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  &&  var.isVarArgs());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  &&  var.isVarArgs());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  ';'  expected	220	None	replace
665	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isAll());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isAll());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isAll());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  ';'  expected	220	None	replace
666	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isRemovable())  {  return  true;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isRemovable())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isRemovable())  {  return  true;  }	  return    true;    if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	222	None	replace
667	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }	  return    true;    if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	222	None	replace
668	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	172	None	replace
669	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	172	None	replace
670	[BUG]  [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	172	None	replace
671	[BUG]  [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	172	None	replace
672	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	172	None	replace
673	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	172	None	replace
674	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  true;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getName()!=  null)  {  return  true;  }	  if(var    ==    null    ||    var.getName()    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	164	None	replace
675	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
676	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
677	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
678	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
679	[BUG]  [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
680	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
681	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    If(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	216	None	replace
682	[BUG]  [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    If(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	216	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor());	  Preconditions.checkState(var.isGlobal());    	non-compiled	[CE]  ';'  expected	46	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(var.isVar());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isVar());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isVar());	  Preconditions.checkState(var.isGlobal());    	non-compiled	[CE]  ';'  expected	46	None	replace
685	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
686	[BUG]  [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
687	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
688	[BUG]  [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
689	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
690	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;	  var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	78	None	replace
691	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	149	None	replace
692	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
693	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
694	[BUG]  [BUGGY]  Preconditions.checkState(var.isRemovable()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isRemovable()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isRemovable()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(var.isVar()  ||!removeGlobals  &&  var.isVar())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isVar()  ||!removeGlobals  &&  var.isVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isVar()  ||!removeGlobals  &&  var.isVar())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
696	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
697	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isUnknown())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isUnknown())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
698	[BUG]  [BUGGY]  ||!removeVars  &&  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeVars  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeVars  &&  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
699	[BUG]  [BUGGY]  ||!removeSeconds  &&  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeSeconds  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeSeconds  &&  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
700	[BUG]  [BUGGY]  ||!removeAllGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeAllGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeAllGlobals  &&  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
701	[BUG]  [BUGGY]  removeGlobals  |=  var.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getType()  ==  Token.VAR;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getType()  ==  Token.VAR;	  removeGlobals    |=    var.isRemovable();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
702	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(var);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(var);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingName(var);	  if(var    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
703	[BUG]  [BUGGY]  parent!=  null  &&  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&  var.isGlobal())  {  return  false;  }	  if(var!=    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
704	[BUG]  [BUGGY]  ||  var.isRemovable())  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isRemovable())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isRemovable())  {  return  false;	  ||    var.isGlobal())    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
705	[BUG]  [BUGGY]  ||  var.isPropertyAssign())  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isPropertyAssign())  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isPropertyAssign())  {  return  false;	  ||    var.isGlobal())    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
706	[BUG]  [BUGGY]  if(!codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    >=    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
707	[BUG]  [BUGGY]  ||  var.getName()  >=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getName()  >=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getName()  >=  null)  {  return  false;  }	  ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
708	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||!var.isGlobal());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||!var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||!var.isGlobal());	  Preconditions.checkArgument(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
709	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  &&  var.isGlobal());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  &&  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR  &&  var.isGlobal());	  Preconditions.checkArgument(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
710	[BUG]  [BUGGY]  parent!=  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }	  return    true;    if(!removeGlobals    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
711	[BUG]  [BUGGY]  (var  ==  null  ||  var.getName()  ==  null))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getName()  ==  null))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getName()  ==  null))  {  return  false;  }	  (var    ==    null    ||    var.getName()!=    null))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
712	[BUG]  [BUGGY]  (var!=  null  &&  var.getName()!=  null))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  &&  var.getName()!=  null))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  &&  var.getName()!=  null))  {  return  false;  }	  (var    ==    null    ||    var.getName()!=    null))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
713	[BUG]  [BUGGY]  return  false;  Node  parent  =  var.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  false;  Node  parent  =  var.getParent();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  false;  Node  parent  =  var.getParent();	  return    true;    Node    parent    =    var.getParent();    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
714	[BUG]  [BUGGY]  |  var.getType()!=  Token.VAR)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()!=  Token.VAR)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()!=  Token.VAR)  {  return  false;	  ||    var.getType()    ==    Token.VAR)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
715	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME  ||  var.getType()!=  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	67	None	replace
716	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR)&&  var.getType()  ==  Token.VAR;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR)&&  var.getType()  ==  Token.VAR;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR)&&  var.getType()  ==  Token.VAR;	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	138	None	replace
717	[BUG]  [BUGGY]  Node  parent  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Node  parent  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Node  parent  ==  null  ||  var.isGlobal())  {  return  false;  }	  parent    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
718	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	155	None	replace
719	[BUG]  [BUGGY]  &&!var.isGlobal())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&!var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&!var.isGlobal())  {  return  false;  }	  &&!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	158	None	replace
720	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!var.isGlobal());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	62	None	replace
721	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  var.isGlobal());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	62	None	replace
722	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR)return  false;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()  ==  Token.VAR)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  ';'  expected	227	None	replace
723	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.VAR)return  false;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.VAR)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  >=  Token.VAR)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  ';'  expected	227	None	replace
724	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	110	None	replace
725	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	110	None	replace
726	[BUG]  [BUGGY]  ||  var  [Delete]  null)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var  [Delete]  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var  [Delete]  null)  {  return  false;  }	  ||    var!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
727	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	152	None	replace
728	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isVarArgs())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  ||  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	201	None	replace
729	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isRemovable())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isRemovable())  {  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isRemovable())  {	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    >>    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
730	[BUG]  [BUGGY]  ||  var.isPropertyAssign())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isPropertyAssign())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isPropertyAssign())  {  return  false;  }	  ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
731	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  allFunctionScopes);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  allFunctionScopes);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  allFunctionScopes);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	215	None	replace
732	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  preserveFunctionExpressionNames);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  preserveFunctionExpressionNames);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  preserveFunctionExpressionNames);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	215	None	replace
733	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  true);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  true);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  true);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	215	None	replace
734	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  def);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  def);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  def);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	215	None	replace
735	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	108	None	replace
736	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  true;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	108	None	replace
737	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  var,  this);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  var,  this);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  var,  this);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	108	None	replace
738	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  false;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  false;  }  else  {  NodeTraversal.traverse(compiler,  var,  this);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	108	None	replace
739	[BUG]  [BUGGY]  var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }	  var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
740	[BUG]  [BUGGY]  var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }	  var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
741	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "));    	non-compiled	[CE]  not  a  statement	197	None	replace
742	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isConstructor())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isConstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isConstructor())  {  return  false;  }	  if(var    ==    null    ||    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	209	None	replace
743	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( ".__  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( ".__  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( ".__	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "))    	non-compiled	[CE]  	195	None	replace
744	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	111	None	replace
745	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)return  false;	  if(var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  	208	None	replace
746	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isRemovableVar();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isRemovableVar();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isRemovableVar();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	30	None	replace
747	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
748	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
749	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
750	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	93	None	replace
751	[BUG]  [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())  return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())  return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())  return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    	non-compiled	[CE]  	162	None	replace
752	[BUG]  [BUGGY]  |  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  |  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	|  var.getType()!=  Token.VAR)  {  return  true;  }	  ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	76	None	replace
753	[BUG]  [BUGGY]  (var!=  null  &&  var.getType()!=  Token.VAR))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var!=  null  &&  var.getType()!=  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var!=  null  &&  var.getType()!=  Token.VAR))  {  return  false;  }	  if(var!=    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	89	None	replace
754	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	40	None	replace
755	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	40	None	replace
756	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)return  false;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)return    false;    	non-compiled	[CE]  ';'  expected	189	None	replace
757	[BUG]  [BUGGY]  While(var!=  null  &&  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  While(var!=  null  &&  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	While(var!=  null  &&  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    if(var    {    null)    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
758	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isGlobal())  {  if(var  ==  null)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    if(var    {    null)    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
759	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isPropertyAssign())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isPropertyAssign())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||  var.isPropertyAssign())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
760	[BUG]  [BUGGY]  Preconditions.checkState(var.isRemovable()  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isRemovable()  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isRemovable()  ||  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
761	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isUnknown())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||  var.isUnknown())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
762	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;	  var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	150	None	replace
763	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var!=    null    &&    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	205	None	replace
764	[BUG]  [BUGGY]  ||!removeVars)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeVars)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeVars)  {  return  false;  }	  ||!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
765	[BUG]  [BUGGY]  Preconditions.checkState(!isGlobal())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!isGlobal())  {  return  false;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  	219	None	replace
766	[BUG]  [BUGGY]  if(!isGlobal())  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal())  {  return  true;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  	219	None	replace
767	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;	  var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	87	None	replace
768	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	79	None	replace
769	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	79	None	replace
770	[BUG]  [BUGGY]  if(var  ==  null  ||!var.isGlobal())  {  return  true;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!var.isGlobal())  {  return  true;  }	  if(var    ==    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
771	[BUG]  [BUGGY]  if(var  ==  null  ||!var.isRemovable())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
772	[BUG]  [BUGGY]  if(var  ==  null  ||!var.isVarArgs())  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!var.isVarArgs())  {  return  false;  }	  if(var    ==    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	217	None	replace
773	[BUG]  [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }	  parent    ==    null    &&!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	200	None	replace
774	[BUG]  [BUGGY]  var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var!=    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
775	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(var.getType()!=    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	153	None	replace
776	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  preconditions.checkState(var.getType()  ==  Token.VAR);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	106	None	replace
777	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	106	None	replace
778	[BUG]  [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  	121	None	replace
779	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  	146	None	replace
780	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isRemovableVar())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  ||  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  ||  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  	146	None	replace
781	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	98	None	replace
782	[BUG]  [BUGGY]  if(!isGlobal())  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isGlobal())  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal())  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
783	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isGlobal())  {  return  true;  NodeUtil.removeChild(var,  codingConvention);  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
784	[BUG]  [BUGGY]  if(var!=  null  ||!var.isRemovable())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||!var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||!var.isRemovable())  {  return  false;  }	  if(var!=    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
785	[BUG]  [BUGGY]  if(var!=  null  ||!var.isGlobal())  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||!var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||!var.isGlobal())  {  return  true;  }	  if(var!=    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
786	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()  >=  null)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()  >=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getName()  >=  null)  {  return  false;  }	  if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	14	None	replace
787	[BUG]  [BUGGY]  if(!removeGlobals  &&  var  ==  null  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var  ==  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var  ==  null  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
788	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	22	None	add
789	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
790	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
791	[BUG]  [BUGGY]  if(var!=  null  ||  var.getParent()  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getParent()  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getParent()  ==  null)  {  return  false;  }	  if(var    ==    null    ||    var.getParent()!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	166	None	replace
792	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.isGlobal());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	61	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||!var.isGlobal());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||!var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||!var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	61	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR,  var.isGlobal());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR,  var.isGlobal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR,  var.isGlobal());	          Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	61	None	replace
795	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  while(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  while(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  while(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
796	[BUG]  [BUGGY]  ParentNode  <?>  parent  =  var.getParent();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ParentNode  <?>  parent  =  var.getParent();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	ParentNode  <?>  parent  =  var.getParent();	  parent    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
797	[BUG]  [BUGGY]  Node  parent  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Node  parent  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Node  parent  ==  null)  {  return  false;  }	  parent    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
798	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isGlobal())  {  return  true;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.isGlobal())  {  return  true;  }	  if(!removeGlobals)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
799	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR)&&  var.getType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR)&&  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR)&&  var.getType()!=  Token.FUNCTION);	  return(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	137	None	replace
800	[BUG]  [BUGGY]  var.getType()  >=  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  >=  Token.VAR)  {  return  false;  }	  var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	154	None	replace
801	[BUG]  [BUGGY]  var.getType()  [Delete]  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  [Delete]  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  [Delete]  Token.VAR)  {  return  false;  }	  var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	154	None	replace
802	[BUG]  [BUGGY]  (var.getType()!=  Token.VAR))  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var.getType()!=  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var.getType()!=  Token.VAR))  {  return  false;  }	  var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	154	None	replace
803	[BUG]  [BUGGY]  if(removeGlobals)  {  return  false;  }  while(!removeGlobals)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals)  {  return  false;  }  while(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals)  {  return  false;  }  while(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    while(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
804	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  ==  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
805	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().startsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
806	[BUG]  [BUGGY]  return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
807	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
808	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.getName())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.getName())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.getName())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
809	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
810	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var!=    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
811	[BUG]  [BUGGY]  if(!isGlobal())  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isGlobal())  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal())  {  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	111	None	replace
812	[BUG]  [BUGGY]  if(var.isGlobal())  {  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.isGlobal())  {  return  true;  }	  return    true;    Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	183	None	replace
813	[BUG]  [BUGGY]  aughtExceptionHandler(codingConvention.isGlobal(),  var.getName());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler(codingConvention.isGlobal(),  var.getName());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler(codingConvention.isGlobal(),  var.getName());	  if(var!=    null)    {    return    false;    }    If(var!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	131	None	replace
814	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getType()!=  Token.VAR)  {  return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  parent.getType()!=  Token.VAR)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  parent.getType()!=  Token.VAR)  {  return  false;	  if(var!=    null)    {    return    false;    }    If(var!=    null)    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
815	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getType()!=  Token.VAR;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  parent.getType()!=  Token.VAR;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  parent.getType()!=  Token.VAR;	  if(var!=    null)    {    return    false;    }    If(var!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	131	None	replace
816	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getType()!=  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  parent.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  parent.getType()!=  Token.VAR)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    If(var!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	131	None	replace
817	[BUG]  [BUGGY]  parent  ==  null  &&!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	199	None	replace
818	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  var.isVarArgs())  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign  &&  var.isVarArgs())  {  return  false;  }	  if(!isPropertyAssign    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	199	None	replace
819	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);	          Preconditions.checkState(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	67	None	replace
820	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isConstructor());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isConstructor());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||  var.isConstructor());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.getName())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
821	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isInterface());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isInterface());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||  var.isInterface());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.getName())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
822	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isInstructor());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isInstructor());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||  var.isInstructor());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.getName())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isVarArgs());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isVarArgs());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||  var.isVarArgs());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.getName())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(var.isVarArgs());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isVarArgs());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isVarArgs());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.getName())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkState(var.isReferenced());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isReferenced());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isReferenced());	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    &&    var.getName())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
826	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeUtil.removeChild(parent,  var);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeUtil.removeChild(parent,  var);	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  	181	None	replace
827	[BUG]  [BUGGY]  if(!var.isGlobal())  {  return  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!var.isGlobal())  {  return  true;  }	  return    true;    NodeUtil.removeChild(var);    	non-compiled	[CE]  	181	None	replace
828	[BUG]  [BUGGY]  var  ||  var.isLocal();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ||  var.isLocal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ||  var.isLocal();	  var    ||    var.isGlobal();    	non-compiled	[CE]  	31	None	replace
829	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal())  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isLocal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isLocal())  {  return  false;  }	  if(var    ==    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
830	[BUG]  [BUGGY]  if(var!=  null  &&  var.getName()!=  null)return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.getName()!=  null)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getName()!=  null)return  false;  }	  if(var!=    null    &&    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	186	None	replace
831	[BUG]  [BUGGY]  if(var!=  null  &&  var.getName()  ==  null)return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.getName()  ==  null)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getName()  ==  null)return  false;  }	  if(var!=    null    &&    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	186	None	replace
832	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.NAME);	          Preconditions.checkState(var.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	65	None	replace
833	[BUG]  [BUGGY]  if(var!=  null  ||  var.isVarArgs())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isVarArgs())  {  return  false;  }	  if(var    ==    null    ||    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	209	None	replace
834	[BUG]  [BUGGY]  if(var!=  null  &&  var.isVarArgs())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isVarArgs())  {  return  false;  }	  if(var    ==    null    ||    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	209	None	replace
835	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isVarArgs())return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isVarArgs())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isVarArgs())return  false;  }	  if(var    ==    null    ||    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  	209	None	replace
836	[BUG]  [BUGGY]  if(var  ==  null  ||!var.isGlobal())return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!var.isGlobal())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!var.isGlobal())return  false;  }	  if(var    ==    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	217	None	replace
837	[BUG]  [BUGGY]  if(var  ==  null  ||!var.isUnknown())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!var.isUnknown())  {  return  false;  }	  if(var    ==    null    ||!var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
838	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isLocal())  {  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isLocal())  {	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	115	None	replace
839	[BUG]  [BUGGY]  return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var  ==  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
840	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( ".__ ")));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( ".__ ")));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( ".__ ")));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")));    	non-compiled	[CE]  	194	None	replace
841	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	163	None	replace
842	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	163	None	replace
843	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
844	[BUG]  [BUGGY]  if(nameNode  ==  null  ||  nameNode.getType()!=  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(nameNode  ==  null  ||  nameNode.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(nameNode  ==  null  ||  nameNode.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
845	[BUG]  [BUGGY]  if(nameNode  ==  null  ||  nameNode.getType()!=  Token.NAME)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(nameNode  ==  null  ||  nameNode.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(nameNode  ==  null  ||  nameNode.getType()!=  Token.NAME)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
846	[BUG]  [BUGGY]  parent  =  var.getParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  =  var.getParent();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  =  var.getParent();	  return    true;    Node    parent    =    var.getParent();    	non-compiled	[CE]  	109	None	replace
847	[BUG]  [BUGGY]  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR)  {  return  true;  }	  var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	154	None	replace
848	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.VAR  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR  ||  var.isGlobal())  {  return  false;  }	  var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	154	None	replace
849	[BUG]  [BUGGY]  Preconditions.checkState(var.isAll());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isAll());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isAll());	  Preconditions.checkState(var.isGlobal());    	non-compiled	[CE]  ';'  expected	46	None	replace
850	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isExtern();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isExtern();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isExtern();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  ';'  expected	44	None	replace
851	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isGlobal();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isGlobal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||  var.isGlobal();	  Preconditions.checkState(var.isGlobal()    ||    var.isGlobal();    	non-compiled	[CE]  ';'  expected	44	None	replace
852	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()  >>  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getType()  >>  Token.FUNCTION))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()  >>  Token.FUNCTION))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.FUNCTION))    {    return    false;    }    	non-compiled	[CE]  	142	None	replace
853	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  ';'  expected	64	None	replace
854	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
855	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
856	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
857	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  If(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  If(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    If(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
858	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  [Delete]  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  [Delete]  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  [Delete]  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
859	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var!=    null)    {    return    false;    }    if(var  >=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
860	[BUG]  [BUGGY]  Preconditions.checkArgument(var.isGlobal()  ||  var.isVarArgs());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(var.isGlobal()  ||  var.isVarArgs());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.isGlobal()  ||  var.isVarArgs());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  ';'  expected	220	None	replace
861	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isExtern());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isExtern());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isExtern());	  Preconditions.checkState(var.isGlobal()    ||    var.isVarArgs());    	non-compiled	[CE]  ';'  expected	220	None	replace
862	[BUG]  [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!removeGlobals  &&  var.isRemovable())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	145	None	replace
863	[BUG]  [BUGGY]  if(!isGlobal()  &&  var.isRemovable())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isGlobal()  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal()  &&  var.isRemovable())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  	145	None	replace
864	[BUG]  [BUGGY]  if(var.getType()!=  Token.NAME  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.NAME  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.NAME  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	88	None	replace
865	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  var.isVarArgs())  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal()  ||  var.isVarArgs())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    >>    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
866	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  var.isInterface())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  var.isInterface())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal()  ||  var.isInterface())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var    >>    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
867	[BUG]  [BUGGY]  return(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  	135	None	replace
868	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getName()!=  Token.VAR);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getName()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getName()!=  Token.VAR);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  	135	None	replace
869	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var!=    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	118	None	replace
870	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var!=    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	118	None	replace
871	[BUG]  [BUGGY]  if(!removeAllGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeAllGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeAllGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
872	[BUG]  [BUGGY]  if(!removeVars  &&  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeVars  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeVars  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
873	[BUG]  [BUGGY]  parent!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var!=    null    &&    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	225	None	replace
874	[BUG]  [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    If(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	119	None	replace
875	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
876	[BUG]  [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
877	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	120	None	replace
878	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName());  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName());  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	120	None	replace
879	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()    >=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
880	[BUG]  [BUGGY]  parent  ==  null  ||  var.getName()!=  null)  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||  var.getName()!=  null)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.getName()!=  null)  {  return  false;	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    If(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	57	None	replace
881	[BUG]  [BUGGY]  parent!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var!=    null    &&    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	204	None	replace
882	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    true;    	non-compiled	[CE]  	193	None	replace
883	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  propagation);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  propagation);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	NodeTraversal.traverse(compiler,  var,  this,  propagation);	          NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	215	None	replace
884	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	75	None	replace
885	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	75	None	replace
886	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
887	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;	  var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
888	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  true;  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  true;  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	112	None	replace
889	[BUG]  [BUGGY]  var  ==  null  ||  var.getVarName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ==  null  ||  var.getVarName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  ||  var.getVarName()!=  null)  {  return  false;  }	  var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
890	[BUG]  [BUGGY]  var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }	  var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
891	[BUG]  [BUGGY]  if(!isGlobal()  &&  var.isRemovableVar())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isGlobal()  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal()  &&  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isRemovableVar())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	146	None	replace
892	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
893	[BUG]  [BUGGY]  Preconditions.checkState(var.isAll()  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isAll()  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isAll()  ||  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
894	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  	167	None	replace
895	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	93	None	replace
896	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;	  var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	98	None	replace
897	[BUG]  [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.getName())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.getName())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null        ||        var.isGlobal())        {        return        false;        }        if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.getName())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
898	[BUG]  [BUGGY]  parent  ==  var  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  var  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  var  ||  var.isGlobal())  {  return  false;  }	  parent    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
899	[BUG]  [BUGGY]  var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  ||  var.isGlobal())  {  return  false;  }	  parent    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	72	None	replace
900	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    true;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
901	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    true;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
902	[BUG]  [BUGGY]  Preconditions.checkState(var.isVarArgs()  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isVarArgs()  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isVarArgs()  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
903	[BUG]  [BUGGY]  Preconditions.checkState(var.isAll()  ||!removeGlobals  &&  var.isAll())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isAll()  ||!removeGlobals  &&  var.isAll())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isAll()  ||!removeGlobals  &&  var.isAll())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
904	[BUG]  [BUGGY]  Preconditions.checkState(var.isExtern()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isExtern()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isExtern()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
905	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isConstructor())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isConstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isConstructor())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
906	[BUG]  [BUGGY]  Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isInstructor())  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isInstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isConstructor()  ||!removeGlobals  &&  var.isInstructor())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
907	[BUG]  [BUGGY]  Preconditions.checkState(var.isRemovable()  ||!removeGlobals  &&  var.isInitializingFunction())  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isRemovable()  ||!removeGlobals  &&  var.isInitializingFunction())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isRemovable()  ||!removeGlobals  &&  var.isInitializingFunction())  {  return  false;  }	  Preconditions.checkState(var.isGlobal()    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
908	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnknown())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isUnknown())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isUnknown())  {  return  false;  }	  if(var!=    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	202	None	replace
909	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())return  false;  }	  if(var!=    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	202	None	replace
910	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())  {  return  true;  }	  if(var!=    null    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	202	None	replace
911	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isLocal())  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.isLocal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.isLocal())  {  return  false;  }	  if(removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
912	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isUnreferenced())  {  return  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.isUnreferenced())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.isUnreferenced())  {  return  false;  }	  if(removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
913	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isInterface())  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.isInterface())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.isInterface())  {  return  false;  }	  if(removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
914	[BUG]  [BUGGY]  eradicateGlobals  |=  var.getFunctionExpression();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  eradicateGlobals  |=  var.getFunctionExpression();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.getFunctionExpression();	  eradicateGlobals    |=    var.isGlobal();    	non-compiled	[CE]  not  a  statement	45	None	replace
915	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)&&!referenced.contains(var.getName());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)&&!referenced.contains(var.getName());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)&&!referenced.contains(var.getName());	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	136	None	replace
916	[BUG]  [BUGGY]  parent  ==  var)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  var)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  var)  {  return  false;  }	  parent    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
917	[BUG]  [BUGGY]  Node  parent  =  var.getParentNode();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Node  parent  =  var.getParentNode();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Node  parent  =  var.getParentNode();	  parent    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
918	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	37	None	replace
919	[BUG]  [BUGGY]  removeGlobals  &&  var.isVarArgs();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  &&  var.isVarArgs();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &&  var.isVarArgs();	  removeGlobals    &&    var.isGlobal();    	non-compiled	[CE]  not  a  statement	28	None	replace
920	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);	  return(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	138	None	replace
921	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  return  false;  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	108	None	replace
922	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkState(var.isGlobal());  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkState(var.isGlobal());  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  NodeTraversal.traverse(compiler,  var,  this);  }  else  {  Preconditions.checkState(var.isGlobal());  return  false;  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	108	None	replace
923	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  return  false;  }	  return    true;    NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  not  a  statement	108	None	replace
924	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  while(!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  while(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign)  {  return  false;  }  while(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    while(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
925	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.VAR);	          Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  not  a  statement	68	None	replace
926	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.VAR);  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.VAR);	          Preconditions.checkState(var.getType()!=    Token.VAR);    	non-compiled	[CE]  ';'  expected	68	None	replace
927	[BUG]  [BUGGY]  if(var!=  null  &&  var.isRemovable())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	168	None	replace
928	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isRemovable())return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isRemovable())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isRemovable())return  false;  }	  if(var    ==    null    ||    var.isRemovable())    {    return    false;    }    	non-compiled	[CE]  	168	None	replace
929	[BUG]  [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()!=  Token.FUNCTION)  {  return  true;  }	  ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	50	None	replace
930	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  true;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  true;	  if(var.getType()!=    Token.FUNCTION    ||    var.getType()!=    Token.VAR)return    false;    	non-compiled	[CE]  	208	None	replace
931	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    false;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
932	[BUG]  [BUGGY]  if(referenced.contains(var))  return  false;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  return  false;	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    false;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
933	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);	          Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	61	None	replace
934	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.FUNCTION)  {  return  false;  }	  var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	155	None	replace
935	[BUG]  [BUGGY]  if(var  ==  null  ||!var.getName().equals( " "))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||!var.getName().equals( " "))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!var.getName().equals( " "))  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    if(var    >=    null)    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
936	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()  >=  null)return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getName()  >=  null)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getName()  >=  null)return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)return    false;    }    	non-compiled	[CE]  	15	None	replace
937	[BUG]  [BUGGY]  &&!isGlobals)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&!isGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&!isGlobals)  {  return  false;  }	  &&!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	158	None	replace
938	[BUG]  [BUGGY]  &&!isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  &&!isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&!isGlobal())  {  return  false;  }	  &&!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	158	None	replace
939	[BUG]  [BUGGY]  if(referenced  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    >=    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	59	None	replace
940	[BUG]  [BUGGY]  RemoveGlobals  var  =  removeGlobals  ||  var.isRemovable();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  var  =  removeGlobals  ||  var.isRemovable();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  var  =  removeGlobals  ||  var.isRemovable();	  removeGlobals    ||    var.isRemovable();    	non-compiled	[CE]  not  a  statement	29	None	replace
941	[BUG]  [BUGGY]  removeGlobals  ||  var.canRemove();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.canRemove();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.canRemove();	  removeGlobals    ||    var.isRemovable();    	non-compiled	[CE]  not  a  statement	29	None	replace
942	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.NAME)  {  return  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.NAME)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    if(var    >>    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
943	[BUG]  [BUGGY]  ||  var.getVarName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getVarName()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getVarName()!=  null)  {  return  false;  }	  ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
944	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getType())  {  return  false;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getType())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  false;  }  for(var  =  var.getType())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
945	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getLocalPart())  {  return  false;  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  return  false;  }  for(var  =  var.getLocalPart())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  false;  }  for(var  =  var.getLocalPart())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    for(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
946	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign()  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!isPropertyAssign()  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!isPropertyAssign()  &&  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	104	None	replace
947	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  var.isLocal())  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  var.isLocal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!isPropertyAssign  &&  var.isLocal())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	104	None	replace
948	[BUG]  [BUGGY]  Preconditions.checkArgument(!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkArgument(!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(!removeGlobals  &&  var.isRemovable())  {  return  false;  }	  Preconditions.checkState(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	104	None	replace
949	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isLocal());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isLocal());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isLocal());	  removeGlobals    ||    var.isLocal();    	non-compiled	[CE]  not  a  statement	214	None	replace
950	[BUG]  [BUGGY]  RemoveGlobals  &&  var.isLocal();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  &&  var.isLocal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  &&  var.isLocal();	  removeGlobals    ||    var.isLocal();    	non-compiled	[CE]  not  a  statement	214	None	replace
951	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isLocal();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isLocal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isLocal();	  removeGlobals    ||    var.isLocal();    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
952	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)return  true;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
953	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith(  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith(	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
954	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith(  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith(	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
955	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().startsWith( "__ "))  ||  var.getName().endsWith( "__  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().startsWith( "__ "))  ||  var.getName().endsWith( "__  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().startsWith( "__ "))  ||  var.getName().endsWith( "__	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   ")    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
956	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( "__  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( "__  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( ".__ ")||  var.getName().endsWith( ".__ "))  ||  var.getName().endsWith( "__	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "))    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
957	[BUG]  [BUGGY]  ||  var.getType()  >=  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.getType()  >=  Token.VAR)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  >=  Token.VAR)  {  return  true;  }	  ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
958	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isLocal())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeGlobals  &&  var.isLocal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isLocal())  {  return  true;  }	  return    true;    if(!removeGlobals    &&    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
959	[BUG]  [BUGGY]  removeGlobals  ||  var.isLocal())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.isLocal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.isLocal())  {  return  false;  }	  removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
960	[BUG]  [BUGGY]  removeGlobals  ||  var.isConstructor())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  ||  var.isConstructor())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.isConstructor())  {  return  false;  }	  removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
961	[BUG]  [BUGGY]  ||!removeUnusedVars  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeUnusedVars  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeUnusedVars  ||  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
962	[BUG]  [BUGGY]  ||!removeSeconds  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||!removeSeconds  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeSeconds  ||  var.isGlobal())  {  return  false;  }	  ||!removeGlobals    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
963	[BUG]  [BUGGY]  return(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	134	None	replace
964	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  true;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)return    false;    }    	non-compiled	[CE]  	190	None	replace
965	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()    >=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	148	None	replace
966	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  >=  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getType()  >=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()    >=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	148	None	replace
967	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  var.type);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  var.type);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  var.type);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  	10	None	replace
968	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  var.cloneTree());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  var.cloneTree());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  var.cloneTree());	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  	10	None	replace
969	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName(),  var.scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Var  var  =  var.getVar(var.getName(),  var.scope);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName(),  var.scope);	  Var    var    =    var.getVar(var.getName());    	non-compiled	[CE]  	10	None	replace
970	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isUnknown()  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isUnknown()  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isUnknown()  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isUnknown())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	169	None	replace
971	[BUG]  [BUGGY]  if(!isGlobal()  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isGlobal()  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal()  ||  var.isGlobal())  {  return  false;  }	  if(!isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	219	None	replace
972	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    true;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	160	None	replace
973	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    true;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	160	None	replace
974	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  true;	  if(var    ==    null    ||    var.isGlobal())return    true;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	160	None	replace
975	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()  >>  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()  >>  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null    ||    var.getName()!=    null)    {    return    false;    }    if(var!=  null  ||  var.getName()  >>  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	13	None	add
976	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isLocal())return  false;	  if(var    ==    null    ||    var.isLocal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	210	None	replace
977	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().equals( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   ")))    {    return    false;    	non-compiled	[CE]  	196	None	replace
978	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())  {  if(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    If(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  	33	None	replace
979	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isLocal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isLocal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isLocal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
980	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	97	None	replace
981	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isLocal();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isLocal();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isLocal();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	30	None	replace
982	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isUnremoved();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isUnremoved();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isUnremoved();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	30	None	replace
983	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isInterface();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  RemoveGlobals  ||  var.isInterface();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isInterface();	  RemoveGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	30	None	replace
984	[BUG]  [BUGGY]  if(var!=  null  &&  var.getParent()!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.getParent()!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getParent()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getParent()!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	166	None	replace
985	[BUG]  [BUGGY]  parent  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    &&    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
986	[BUG]  [BUGGY]  if(var!=  null)  {  if(!removeGlobals  &&  var.isLocal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null)  {  if(!removeGlobals  &&  var.isLocal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  if(!removeGlobals  &&  var.isLocal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    for(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	161	None	replace
987	[BUG]  [BUGGY]  if(codingConvention.isGlobal(var.getName()))  {  return  false;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isGlobal(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isGlobal(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    ==    null    ||    var.getName()    [Delete]    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	60	None	replace
988	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return  true;  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return  true;  Preconditions.checkState(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  return    true;    Preconditions.checkState(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	107	None	replace
989	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())return  false;	  if(var!=    null    &&    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	205	None	replace
990	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var!=    null    &&    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	205	None	replace
991	[BUG]  [BUGGY]  if(var!=  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	144	None	replace
992	[BUG]  [BUGGY]  if(isPropertyAssign)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(isPropertyAssign)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(isPropertyAssign)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var    ==    null    ||    var.isGlobal())return    false;    If(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	216	None	replace
993	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
994	[BUG]  [BUGGY]  Preconditions.checkState(var  <  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  Preconditions.checkState(var  <  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var  <  null  ||  var.isGlobal())  {  return  false;  }	  Preconditions.checkState(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
995	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingVar(var);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingVar(var);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingVar(var);  }	  aughtExceptionHandler.handleMissingVar(var);    	non-compiled	[CE]  ';'  expected	49	None	replace
996	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingVar(var);  }  else  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingVar(var);  }  else  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingVar(var);  }  else  {  return  false;  }	  aughtExceptionHandler.handleMissingVar(var);    	non-compiled	[CE]  not  a  statement	49	None	replace
997	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( ".__ "));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( ".__ "));  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( ".__ "));	  return(var!=    null    &&    var.getName().length()    >    0)||(var.getName().endsWith(   "__   ")||    var.getName().endsWith(   "__   "))    ||    var.getName().endsWith(   "__   "));    	non-compiled	[CE]  not  a  statement	197	None	replace
998	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  true;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  true;  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  true;	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)return    false;    	non-compiled	[CE]  not  a  statement	189	None	replace
999	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
1000	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
1001	[BUG]  [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced!=  null)  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
1002	[BUG]  [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
1003	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    return    true;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
1004	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var    ==    null    ||    var.isGlobal())return    false;    ifcodingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	172	None	replace
1005	[BUG]  [BUGGY]  if(isPropertyAssign)  {  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(isPropertyAssign)  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(isPropertyAssign)  {  return  true;  }	  if(!isPropertyAssign)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	218	None	replace
1006	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  (var  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  (var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  (var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
1007	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
1008	[BUG]  [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  while(var  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  while(var  ==  null)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var        ==        null)        {        return        false;        }        if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  while(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
1009	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(var,  codingConvention);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(var,  codingConvention);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingName(var,  codingConvention);	  if(var!=    null)    {    return    false;    }    if(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
1010	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingVars(var);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  aughtExceptionHandler.handleMissingVars(var);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingVars(var);	  if(var!=    null)    {    return    false;    }    if(var    ==    null)    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
1011	[BUG]  [BUGGY]  parent  ==  null  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	201	None	replace
1012	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isVarArgs())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(removeGlobals  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	201	None	replace
1013	[BUG]  [BUGGY]  if(!removeVars  &&  var.isVarArgs())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!removeVars  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeVars  &&  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  	201	None	replace
1014	[BUG]  [BUGGY]  if(!isGlobal()  &&  var.isVarArgs())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isGlobal()  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal()  &&  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isVarArgs())    {    return    false;    }    	non-compiled	[CE]  	201	None	replace
1015	[BUG]  [BUGGY]  if(codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isGlobal())  {  if(var  ==  null  ||  var.getName()!=  null)return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var    {    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	212	None	replace
1016	[BUG]  [BUGGY]  parent  ==  null;  var  =  parent.getParent();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null;  var  =  parent.getParent();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null;  var  =  parent.getParent();	  return    true;    if(var    ==    null    ||    var.isGlobal())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	180	None	replace
1017	[BUG]  [BUGGY]  removeGlobals  |=  var.getScope().getVar(var.getName());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getScope().getVar(var.getName());  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getScope().getVar(var.getName());	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  	43	None	replace
1018	[BUG]  [BUGGY]  removeGlobals  |=  var.getScope().getName();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  removeGlobals  |=  var.getScope().getName();  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getScope().getName();	  removeGlobals    |=    var.getName();    	non-compiled	[CE]  	43	None	replace
1019	[BUG]  [BUGGY]  parent  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  parent  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    &&    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	90	None	replace
1020	[BUG]  [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!referenced.contains(var))  {  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    If(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	39	None	replace
1021	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  }	  if(var!=    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	70	None	replace
1022	[BUG]  [BUGGY]  (var  ==  null  ||  var.getName()!=  Token.VAR))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  (var  ==  null  ||  var.getName()!=  Token.VAR))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getName()!=  Token.VAR))  {  return  false;  }	  (var    ==    null    ||    var.getType()!=    Token.VAR))    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
1023	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getName()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getName()  ==  Token.NAME);  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getName()  ==  Token.NAME);	  return(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	139	None	replace
1024	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(var!=  null  &&  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var!=    null    &&    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	191	None	replace
1025	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  for(!removeGlobals)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  for(!removeGlobals)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign)  {  return  false;  }  for(!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    for(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
1026	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  for(!removeSideEffects)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  for(!removeSideEffects)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign)  {  return  false;  }  for(!removeSideEffects)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    for(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
1027	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  for(!removeFunctionExpressionNames)  {  return  false;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  for(!removeFunctionExpressionNames)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign)  {  return  false;  }  for(!removeFunctionExpressionNames)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    for(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
1028	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  for(!removeVars)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  for(!removeVars)  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign)  {  return  false;  }  for(!removeVars)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    for(!removeGlobals)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
1029	[BUG]  [BUGGY]  if(codingConvention.isGlobal())  {  return  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isGlobal())  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isGlobal())  {  return  true;  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
1030	[BUG]  [BUGGY]  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isExported(var.getName()))  {  return  true;  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
1031	[BUG]  [BUGGY]  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(codingConvention.isExported(var.getName()))  {  return  false;  }	  return    true;    NodeUtil.removeChild(var,    codingConvention);    	non-compiled	[CE]  	182	None	replace
1032	[BUG]  [BUGGY]  ||  var.isExtern())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  ||  var.isExtern())  {  return  false;  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isExtern())  {  return  false;  }	  ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
1033	[BUG]  [BUGGY]  if(compiler!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(compiler!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(compiler!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  true);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  	221	None	replace
1034	[BUG]  [BUGGY]  if(compiler!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {      [BUGGY]  if(compiler!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }  [BUGGY]      }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(compiler!=  null)  {  return  true;  NodeTraversal.traverse(compiler,  var,  false);  }	  return    true;    NodeTraversal.traverse(compiler,    var,    true);    	non-compiled	[CE]  	221	None	replace
