bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	add	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	compilable	timeout	12	1	add
2	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  timeout  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	compilable	timeout	12	1	add
3	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	add	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	compilable	timeout	12	1	add
4	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  timeout  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	compilable	timeout	12	1	add
5	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  If(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  If(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    If(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	12	None	add
6	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  >=  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	add
7	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >>  null  ||  var.isGlobal())  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >>  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  >>  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	12	None	add
8	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    for(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	12	None	add
9	[BUG]  [BUGGY]  ||  var  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var  ==  null)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
10	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName());  [CE]  variable  var  is  already  defined  in  method  isRemovableVar(Var)  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Var  var  =  var.getVar(var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Var  var  =  var.getVar(var.getName());	  if(var    ==    null)    {    return    false;    }    timeout    	non-compiled	[CE]  variable  var  is  already  defined  in  method  isRemovableVar(Var)	21	None	replace
11	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    timeout    	non-compiled	[CE]  incomparable  types:  JSType  and  int	21	None	replace
12	[BUG]  [BUGGY]  ||  var.getName()!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
13	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	add	if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	compilable	timeout	29	1	replace
14	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	compilable	timeout	29	1	replace
15	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getName()!=  null)return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
16	[BUG]  [BUGGY]  (var  ==  null  ||  var.getName()!=  null))  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  (var  ==  null  ||  var.getName()!=  null))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getName()!=  null))  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  not  a  statement	29	None	replace
17	[BUG]  [BUGGY]  var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  not  a  statement	29	None	replace
18	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
19	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
20	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	add	if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }	  timeout    	compilable	timeout	20	1	add
21	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  timeout  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }	  timeout    	compilable	timeout	20	1	add
22	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	add	if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }	  timeout    	compilable	timeout	20	1	add
23	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  timeout  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }	  timeout    	compilable	timeout	20	1	add
24	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  If(var  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  If(var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null)    {    return    false;    }    If(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
25	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null)    {    return    false;    }    if(var  >=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	add
26	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null)    {    return    false;    }    if(var  >>  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  incomparable  types:  JSType  and  int	20	None	add
27	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  for(var  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  for(var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null)    {    return    false;    }    for(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	20	None	add
28	[BUG]  [BUGGY]  removeGlobals  &&  var.isGlobal();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  &&  var.isGlobal();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  &&  var.isGlobal();	  removeGlobals    ||    var.isGlobal();    	non-compiled	[CE]  not  a  statement	16	None	replace
29	[BUG]  [BUGGY]  removeGlobals  ||  var.isRemovable();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  ||  var.isRemovable();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.isRemovable();	  removeGlobals    ||    var.isGlobal();    	non-compiled	[CE]  not  a  statement	16	None	replace
30	[BUG]  [BUGGY]  RemoveGlobals  ||  var.isGlobal();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  RemoveGlobals  ||  var.isGlobal();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	RemoveGlobals  ||  var.isGlobal();	  removeGlobals    ||    var.isGlobal();    	non-compiled	[CE]  not  a  statement	16	None	replace
31	[BUG]  [BUGGY]  var  ||  var.isGlobal();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var  ||  var.isGlobal();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var  ||  var.isGlobal();	  removeGlobals    ||    var.isGlobal();    	non-compiled	[CE]  not  a  statement	16	None	replace
32	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  false;  }  if(!removeGlobals)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  false;  }  if(!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)    {    return    false;    }    if(!removeGlobals)  {  return  false;  }	  timeout    	non-compiled	[CE]  incomparable  types:  JSType  and  int	18	None	add
33	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  false;  }  If(!removeGlobals)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  false;  }  If(!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)    {    return    false;    }    If(!removeGlobals)  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	18	None	add
34	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  false;  }  while(!removeGlobals)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  false;  }  while(!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)    {    return    false;    }    while(!removeGlobals)  {  return  false;  }	  timeout    	non-compiled	[CE]  incomparable  types:  JSType  and  int	18	None	add
35	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  false;  }  for(!removeGlobals)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  false;  }  for(!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)    {    return    false;    }    for(!removeGlobals)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	18	None	add
36	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  false;  }  ||!removeGlobals)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  false;  }  ||!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)    {    return    false;    }    ||!removeGlobals)  {  return  false;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	18	None	add
37	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  timeout    	non-compiled	[CE]  incomparable  types:  JSType  and  int	24	None	add
38	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  timeout    	non-compiled	[CE]  incomparable  types:  JSType  and  int	24	None	add
39	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
40	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
41	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  false;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	24	None	add
42	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isGlobal());	  removeGlobals    |=    var.isGlobal();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
43	[BUG]  [BUGGY]  removeGlobals  |=  var.getName();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  |=  var.getName();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.getName();	  removeGlobals    |=    var.isGlobal();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isGlobal();	  removeGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	17	None	replace
45	[BUG]  [BUGGY]  eradicateGlobals  |=  var.isGlobal();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  eradicateGlobals  |=  var.isGlobal();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	eradicateGlobals  |=  var.isGlobal();	  removeGlobals    |=    var.isGlobal();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.isGlobal());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal());	  removeGlobals    |=    var.isGlobal();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
47	[BUG]  [BUGGY]  ||  var!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var!=  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
48	[BUG]  [BUGGY]  parent  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  parent  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  not  a  statement	15	None	replace
49	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingVar(var);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  aughtExceptionHandler.handleMissingVar(var);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	aughtExceptionHandler.handleMissingVar(var);	  if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
50	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  ==  Token.FUNCTION)  {  return  false;	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
54	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  not  a  statement	28	None	add
55	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	28	None	add
56	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	28	None	add
57	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  If(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  If(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    If(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	28	None	add
58	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  >>  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  >>  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()  >>  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	28	None	add
59	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	28	None	add
60	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  [Delete]  null)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  [Delete]  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()  [Delete]  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	28	None	add
61	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        Preconditions.checkState(var.getType()  ==  Token.VAR);	  timeout    	non-compiled	[CE]  illegal  start  of  type	10	None	add
62	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        Preconditions.checkState(var.getType()  ==  Token.FUNCTION);	  timeout    	non-compiled	[CE]  illegal  start  of  type	10	None	add
63	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  timeout    	non-compiled	[CE]  illegal  start  of  type	10	None	add
64	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  timeout    	non-compiled	[CE]  illegal  start  of  type	10	None	add
65	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.NAME);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        Preconditions.checkState(var.getType()  ==  Token.NAME);	  timeout    	non-compiled	[CE]  illegal  start  of  type	10	None	add
66	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  timeout    	non-compiled	[CE]  illegal  start  of  type	10	None	add
67	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);	  timeout    	non-compiled	[CE]  illegal  start  of  type	10	None	add
68	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        Preconditions.checkState(var.getType()!=  Token.VAR);	  timeout    	non-compiled	[CE]  illegal  start  of  type	10	None	add
69	[BUG]  [BUGGY]  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
70	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  	13	None	replace
72	[BUG]  [BUGGY]  parent  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  parent  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  not  a  statement	13	None	replace
73	[BUG]  [BUGGY]  if(var  ==  null  &&  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  ||  var.isGlobal())  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.isGlobal())  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.isGlobal())  {  return  false;	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
75	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
77	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
79	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  ||!removeGlobals)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
81	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
82	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
83	[BUG]  [BUGGY]  if(removeGlobals)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
84	[BUG]  [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
87	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
88	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
89	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
90	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
91	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
92	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
93	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
94	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
95	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
96	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
97	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
98	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
99	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()  ==  Token.VAR)  {  return  false;	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
101	[BUG]  [BUGGY]  ||!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
103	[BUG]  [BUGGY]  removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
105	[BUG]  [BUGGY]  return  true;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }	  	non-compiled	[CE]  	1	None	add
106	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.VAR);	  	non-compiled	[CE]  	1	None	add
107	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  	non-compiled	[CE]  	1	None	add
108	[BUG]  [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var,  this);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var,  this);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    NodeTraversal.traverse(compiler,  var,  this);	  	non-compiled	[CE]  	1	None	add
109	[BUG]  [BUGGY]  return  true;  Node  parent  =  var.getParent();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Node  parent  =  var.getParent();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    Node  parent  =  var.getParent();	  	non-compiled	[CE]  	1	None	add
110	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  	1	None	add
111	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  	1	None	add
112	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  	non-compiled	[CE]  	1	None	add
113	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
114	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  If(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  If(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    If(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
115	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
116	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.hasGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.hasGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals  &&  var.hasGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
117	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  timeout    	non-compiled	[CE]  	22	None	add
118	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  timeout    	non-compiled	[CE]  	22	None	add
119	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  timeout    	non-compiled	[CE]  	22	None	add
120	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  timeout    	non-compiled	[CE]  	22	None	add
121	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }	  timeout    	non-compiled	[CE]  <identifier>  expected	22	None	add
122	[BUG]  [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
123	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
124	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
125	[BUG]  [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	||  var.getType()!=  Token.FUNCTION)  {  return  false;	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
126	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
127	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
128	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	14	None	add
129	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	14	None	add
130	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null)    {    return    false;    }    if(var  >=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	14	None	add
131	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  If(var!=  null)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  If(var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null)    {    return    false;    }    If(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	14	None	add
132	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null)    {    return    false;    }    if(var  >>  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	14	None	add
133	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  [BUGGY]  null)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  [BUGGY]  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null)    {    return    false;    }    if(var  [BUGGY]  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	14	None	add
134	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  return    true;    	non-compiled	[CE]  	2	None	replace
135	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  return    true;    	non-compiled	[CE]  	2	None	replace
136	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  return    true;    	non-compiled	[CE]  	2	None	replace
137	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);	  return    true;    	non-compiled	[CE]  	2	None	replace
138	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  return    true;    	non-compiled	[CE]  	2	None	replace
139	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);	  return    true;    	non-compiled	[CE]  	2	None	replace
140	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
141	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
142	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	(var  ==  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
143	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
144	[BUG]  [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
145	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isRemovable())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
146	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
147	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null)  {  return  true;  }	  if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	15	None	replace
148	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
149	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
150	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
151	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
152	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	9	None	replace
153	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	9	None	replace
154	[BUG]  [BUGGY]  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
155	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
156	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
157	[BUG]  [BUGGY]  removeGlobals  |=  var.isRemovable();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  |=  var.isRemovable();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  |=  var.isRemovable();	  removeGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	17	None	replace
158	[BUG]  [BUGGY]  &&!removeGlobals)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  &&!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	&&!removeGlobals)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    timeout    	non-compiled	[CE]  	19	None	replace
159	[BUG]  [BUGGY]  if(var  ==  null)  {  return  true;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null)  {  return  true;  }	  if(var    ==    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	21	None	replace
160	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    timeout    	non-compiled	[CE]  	23	None	replace
161	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  for(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  for(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    for(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
162	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())return  false;	  timeout    	non-compiled	[CE]  	24	None	add
163	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  false;  }	  timeout    	non-compiled	[CE]  	24	None	add
164	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	29	None	replace
165	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	29	None	replace
166	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	29	None	replace
167	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  true;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isGlobal())  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  	13	None	replace
168	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isRemovable())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isRemovable())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  	13	None	replace
169	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isUnknown())  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isUnknown())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isUnknown())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  	13	None	replace
170	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)  {  return  true;  }	  return    true;    	non-compiled	[CE]  	2	None	replace
171	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;	  timeout    	non-compiled	[CE]  	22	None	add
172	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }	  timeout    	non-compiled	[CE]  	22	None	add
173	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  [Delete]  null)  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  [Delete]  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null)    {    return    false;    }    if(var  [Delete]  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	14	None	add
174	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  for(var!=  null)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  for(var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=    null)    {    return    false;    }    for(var!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	14	None	add
175	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
176	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
177	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  {  null)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  if(var  {  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null)    {    return    false;    }    if(var  {  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
178	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  while(var  ==  null)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  while(var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null)    {    return    false;    }    while(var  ==  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	20	None	add
179	[BUG]  [BUGGY]  return  true;  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }	  	non-compiled	[CE]  	1	None	add
180	[BUG]  [BUGGY]  return  true;  if(var  ==  null  ||  var.isGlobal())  {  return  true;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(var  ==  null  ||  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    if(var  ==  null  ||  var.isGlobal())  {  return  true;  }	  	non-compiled	[CE]  	1	None	add
181	[BUG]  [BUGGY]  return  true;  NodeUtil.removeChild(var);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  NodeUtil.removeChild(var);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    NodeUtil.removeChild(var);	  	non-compiled	[CE]  	1	None	add
182	[BUG]  [BUGGY]  return  true;  NodeUtil.removeChild(var,  codingConvention);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  NodeUtil.removeChild(var,  codingConvention);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    NodeUtil.removeChild(var,  codingConvention);	  	non-compiled	[CE]  	1	None	add
183	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.NAME);	  	non-compiled	[CE]  	1	None	add
184	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  false;  }  when(!removeGlobals)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  false;  }  when(!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)    {    return    false;    }    when(!removeGlobals)  {  return  false;  }	  timeout    	non-compiled	[CE]  	18	None	add
185	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.hasGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.hasGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.hasGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  	12	None	add
186	[BUG]  [BUGGY]  if(var!=  null  &&  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	29	None	replace
187	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  false;  }  if(!removeGlobals)  {  return  true;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  false;  }  if(!removeGlobals)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals)    {    return    false;    }    if(!removeGlobals)  {  return  true;  }	  timeout    	non-compiled	[CE]  	18	None	add
188	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
189	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
190	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
191	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    timeout    	non-compiled	[CE]  	23	None	replace
192	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isLocal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isLocal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    timeout    	non-compiled	[CE]  	23	None	replace
193	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return    true;    	non-compiled	[CE]  	2	None	replace
194	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));	  return    true;    	non-compiled	[CE]  	2	None	replace
195	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "))  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "))  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "))	  return    true;    	non-compiled	[CE]  	2	None	replace
196	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return    true;    	non-compiled	[CE]  	2	None	replace
197	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ "));	  return    true;    	non-compiled	[CE]  	2	None	replace
198	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ "))  ||  var.getName().endsWith( "__ ")	  return    true;    	non-compiled	[CE]  	2	None	replace
199	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
200	[BUG]  [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	parent  ==  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
201	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
202	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())  {  return  false;  }	  if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	15	None	replace
203	[BUG]  [BUGGY]  if(var!=  null  ||!var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||!var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  ||!var.isGlobal())  {  return  false;  }	  if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	15	None	replace
204	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	15	None	replace
205	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    timeout    	non-compiled	[CE]  	25	None	replace
206	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  {  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  {  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  {  null  ||  var.isGlobal())  {  return  false;  }	  timeout    	non-compiled	[CE]  	12	None	add
207	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  <  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  <  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  <  return  false;  }	  timeout    	non-compiled	[CE]  	12	None	add
208	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
209	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isVarArgs())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isVarArgs())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isVarArgs())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  	13	None	replace
210	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isLocal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.isLocal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    timeout    	non-compiled	[CE]  	13	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR);	      timeout    	non-compiled	[CE]  	11	None	replace
212	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  {  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  {  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  {  null  ||  var.getName()!=  null)  {  return  false;  }	  timeout    	non-compiled	[CE]  	28	None	add
213	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())  return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())  return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())  return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  timeout    	non-compiled	[CE]  ';'  expected	22	None	add
214	[BUG]  [BUGGY]  removeGlobals  ||  var.isLocal();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  ||  var.isLocal();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	removeGlobals  ||  var.isLocal();	  removeGlobals    ||    var.isGlobal();    	non-compiled	[CE]  	16	None	replace
215	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  var,  this);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      NodeTraversal.traverse(compiler,  var,  this);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	        NodeTraversal.traverse(compiler,  var,  this);	  timeout    	non-compiled	[CE]  	10	None	add
216	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  If(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())return  false;  If(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())return  false;  If(codingConvention.isExported(var.getName()))  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
217	[BUG]  [BUGGY]  if(var  ==  null  ||!var.isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||!var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||!var.isGlobal())  {  return  false;  }	  if(var    ==    null)    {    return    false;    }    timeout    	non-compiled	[CE]  	21	None	replace
218	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!isPropertyAssign)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isPropertyAssign)  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    timeout    	non-compiled	[CE]  	19	None	replace
219	[BUG]  [BUGGY]  if(!isGlobal())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!isGlobal())  {  return  false;  }	  if(!removeGlobals)    {    return    false;    }    timeout    	non-compiled	[CE]  	19	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isVarArgs());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isVarArgs());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	Preconditions.checkState(var.isGlobal()  ||  var.isVarArgs());	  removeGlobals    |=    var.isGlobal();    	non-compiled	[CE]  	17	None	replace
221	[BUG]  [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var,  true);  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var,  true);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    NodeTraversal.traverse(compiler,  var,  true);	  	non-compiled	[CE]  	1	None	add
222	[BUG]  [BUGGY]  return  true;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	1	None	add
223	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	return    true;    Preconditions.checkState(var.getType()!=  Token.VAR);	  	non-compiled	[CE]  	1	None	add
224	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.getName())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.getName())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals  &&  var.getName())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
225	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
226	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
227	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
