bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  referenced);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  referenced);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg  +  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg  +  1);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  nameNode);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  nameNode);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  parentScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  parentScope);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
5	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  parentScope);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
6	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  lastArg);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  lastArg);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
7	[BUG]  [BUGGY]  Var  var  =  argList.getVar(parentScope.getString(),  lastArg);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(parentScope.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(parentScope.getString(),  lastArg);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
8	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg,  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  lastArg,  referenced);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
9	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  parent);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
10	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  argList.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(argList.getString(),    argList.getLastChild());    	non-compiled	[CE]  	86	None	replace
11	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  argList.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(argList.getString(),    argList.getLastChild());    	non-compiled	[CE]  	86	None	replace
12	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  argList.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(scope.getString(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(argList.getString(),    argList.getLastChild());    	non-compiled	[CE]  	86	None	replace
13	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  argList.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(argList.getString(),    argList.getLastChild());    	non-compiled	[CE]  	86	None	replace
14	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  lastArg.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  lastArg.getFirstChild());	  Var    var    =    scope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	38	None	replace
15	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  argList.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  argList.getFirstChild());	  Var    var    =    scope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	38	None	replace
16	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  scope.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  scope.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  scope.getLastChild());	  Var    var    =    scope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	38	None	replace
17	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.cloneTree());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.cloneTree());    	non-compiled	[CE]  	80	None	replace
18	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.cloneTree());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.cloneTree());    	non-compiled	[CE]  	80	None	replace
19	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.cloneTree(),  scope);	  Var    var    =    fnScope.getVar(lastArg.cloneTree());    	non-compiled	[CE]  	80	None	replace
20	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.cloneTree());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.cloneTree());    	non-compiled	[CE]  	80	None	replace
21	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList);	  Var    var    =    fnScope.getVar(lastArg.cloneTree());    	non-compiled	[CE]  	80	None	replace
22	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString());	  Var    var    =    lastArg.getVar(parentScope.getString());    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(scope.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(scope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(scope.getString());	  Var    var    =    lastArg.getVar(parentScope.getString());    	non-compiled	[CE]  	16	None	replace
24	[BUG]  [BUGGY]  Var  var  =  argList.getVar(parentScope.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(parentScope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(parentScope.getString());	  Var    var    =    lastArg.getVar(parentScope.getString());    	non-compiled	[CE]  	16	None	replace
25	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  referenced);	  Var    var    =    scope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	68	None	replace
26	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  nameNode);	  Var    var    =    scope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	68	None	replace
27	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  lastArg);	  Var    var    =    scope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	68	None	replace
28	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  referenced,  lastArg);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  referenced,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  referenced,  lastArg);	  Var    var    =    scope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	68	None	replace
29	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(scope.getString(),  referenced);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(scope.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(scope.getString(),  referenced);	  Var    var    =    scope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	68	None	replace
30	[BUG]  [BUGGY]  Node  var  =  argList.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  argList.getNext();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  argList.getNext();	  Node    var    =    lastArg.getNext();    	non-compiled	[CE]  	53	None	replace
31	[BUG]  [BUGGY]  Node  var  =  lastArg.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  lastArg.getParent();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  lastArg.getParent();	  Node    var    =    lastArg.getNext();    	non-compiled	[CE]  	53	None	replace
32	[BUG]  [BUGGY]  Node  var  =  lastArg.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  lastArg.removeFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  lastArg.removeFirstChild();	  Node    var    =    lastArg.getNext();    	non-compiled	[CE]  	53	None	replace
33	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getFirstChild());    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.getFirstChild());    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  fnScope);	  Var    var    =    fnScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	49	None	replace
36	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  parentScope);	  Var    var    =    fnScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	49	None	replace
37	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getFirstChild(),  scope);	  Var    var    =    fnScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	49	None	replace
38	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
39	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode.cloneTree());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  nameNode.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
40	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree(),  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree(),  parent);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
41	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  parent.cloneTree());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  parent.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  parent.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
42	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode.cloneTree());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
43	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.cloneTree());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
44	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString()  +  1);	  Var    var    =    scope.getVar(lastArg.getString());    	non-compiled	[CE]  	14	None	replace
45	[BUG]  [BUGGY]  Node  var  =  parentScope.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  parentScope.getLastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  parentScope.getLastChild();	  Node    var    =    argList.getLastChild();    	non-compiled	[CE]  	71	None	replace
46	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.toString(),  lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.toString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.toString(),  lastArg);	  Var    var    =    fnScope.getVar(lastArg.toString(),    argList);    	non-compiled	[CE]  	79	None	replace
47	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.toString(),  argList);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.toString(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.toString(),  argList);	  Var    var    =    fnScope.getVar(lastArg.toString(),    argList);    	non-compiled	[CE]  	79	None	replace
48	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  parent);	  Var    var    =    fnScope.getVar(lastArg.toString(),    argList);    	non-compiled	[CE]  	79	None	replace
49	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  nameNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  nameNode);	  Var    var    =    fnScope.getVar(lastArg.toString(),    argList);    	non-compiled	[CE]  	79	None	replace
50	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.toString(),  argList);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.toString(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.toString(),  argList);	  Var    var    =    fnScope.getVar(lastArg.toString(),    argList);    	non-compiled	[CE]  	79	None	replace
51	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  prefix);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  prefix);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  prefix);	  Var    var    =    fnScope.getVar(lastArg.toString(),    argList);    	non-compiled	[CE]  	79	None	replace
52	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  argList.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  argList.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    argList.getFirstChild());    	non-compiled	[CE]  	33	None	replace
53	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    argList.getFirstChild());    	non-compiled	[CE]  	33	None	replace
54	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  lastArg.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    argList.getFirstChild());    	non-compiled	[CE]  	33	None	replace
55	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(scope.getString(),  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(scope.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(scope.getString(),  fnScope);	  Var    var    =    lastArg.getVar(fnScope.getString(),    scope);    	non-compiled	[CE]  	51	None	replace
56	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getString(),  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(lastArg.getString(),  scope);	  Var    var    =    lastArg.getVar(fnScope.getString(),    scope);    	non-compiled	[CE]  	51	None	replace
57	[BUG]  [BUGGY]  Var  var  =  scope.getVar(fnScope.getString(),  lastArg);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(fnScope.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(fnScope.getString(),  lastArg);	  Var    var    =    lastArg.getVar(fnScope.getString(),    scope);    	non-compiled	[CE]  	51	None	replace
58	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  scope);	  Var    var    =    lastArg.getVar(fnScope.getString(),    scope);    	non-compiled	[CE]  	51	None	replace
59	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString()  +  1);	  Var    var    =    fnScope.getVar(argList.getString()    +    1);    	non-compiled	[CE]  	24	None	replace
60	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString())+  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString())+  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString())+  1;	  Var    var    =    fnScope.getVar(argList.getString()    +    1);    	non-compiled	[CE]  	24	None	replace
61	[BUG]  [BUGGY]  Var  var  =  argList.getVar(argList.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(argList.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(argList.getString());	  Var    var    =    fnScope.getVar(argList.getString()    +    1);    	non-compiled	[CE]  	24	None	replace
62	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.toString(),  referenced);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.toString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.toString(),  referenced);	  Var    var    =    fnScope.getVar(lastArg.toString(),    referenced);    	non-compiled	[CE]  	63	None	replace
63	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.toString(),  referenced);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.toString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.toString(),  referenced);	  Var    var    =    fnScope.getVar(lastArg.toString(),    referenced);    	non-compiled	[CE]  	63	None	replace
64	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  referenced,  parent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  referenced,  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  referenced,  parent);	  Var    var    =    fnScope.getVar(lastArg.toString(),    referenced);    	non-compiled	[CE]  	63	None	replace
65	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  referenced,  lastArg);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  referenced,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  referenced,  lastArg);	  Var    var    =    fnScope.getVar(lastArg.toString(),    referenced);    	non-compiled	[CE]  	63	None	replace
66	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(nameNode.getString(),  lastArg);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(nameNode.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(nameNode.getString(),  lastArg);	  Var    var    =    fnScope.getVar(nameNode.getString(),    lastArg);    	non-compiled	[CE]  	3	None	replace
67	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(nameNode.getString(),  fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(nameNode.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(nameNode.getString(),  fnScope);	  Var    var    =    fnScope.getVar(nameNode.getString(),    lastArg);    	non-compiled	[CE]  	3	None	replace
68	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  lastArg);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(scope.getString(),  lastArg);	  Var    var    =    fnScope.getVar(nameNode.getString(),    lastArg);    	non-compiled	[CE]  	3	None	replace
69	[BUG]  [BUGGY]  Var  var  =  scope.getVar(nameNode.getString(),  lastArg);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(nameNode.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(nameNode.getString(),  lastArg);	  Var    var    =    fnScope.getVar(nameNode.getString(),    lastArg);    	non-compiled	[CE]  	3	None	replace
70	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getFirstChild());	  Var    var    =    scope.getVar(lastArg.getFirstChild());    	non-compiled	[CE]  	13	None	replace
71	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getLastChild());	  Var    var    =    scope.getVar(lastArg.getFirstChild());    	non-compiled	[CE]  	13	None	replace
72	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getFirstChild(),  argList.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getFirstChild(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getFirstChild(),  argList.getLastChild());	  Var    var    =    scope.getVar(lastArg.getFirstChild());    	non-compiled	[CE]  	13	None	replace
73	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(scope.getLastChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(scope.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(scope.getLastChild());	  Var    var    =    scope.getVar(lastArg.getFirstChild());    	non-compiled	[CE]  	13	None	replace
74	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.toString()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.toString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.toString()  +  1);	  Var    var    =    fnScope.getVar(lastArg.toString()    +    1);    	non-compiled	[CE]  	62	None	replace
75	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString())+  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString())+  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString())+  1;	  Var    var    =    fnScope.getVar(lastArg.toString()    +    1);    	non-compiled	[CE]  	62	None	replace
76	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.toString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.toString());	  Var    var    =    fnScope.getVar(lastArg.toString()    +    1);    	non-compiled	[CE]  	62	None	replace
77	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.toString()  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.toString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.toString()  +  1);	  Var    var    =    fnScope.getVar(lastArg.toString()    +    1);    	non-compiled	[CE]  	62	None	replace
78	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString()).toString();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString()).toString();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString()).toString();	  Var    var    =    fnScope.getVar(lastArg.toString()    +    1);    	non-compiled	[CE]  	62	None	replace
79	[BUG]  [BUGGY]  Var  var  =  getFunctionScope().getVar(lastArg.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  getFunctionScope().getVar(lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  getFunctionScope().getVar(lastArg.getString());	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
80	[BUG]  [BUGGY]  Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()):  lastArg.getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()):  lastArg.getString();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()):  lastArg.getString();	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
81	[BUG]  [BUGGY]  Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()):  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()):  null;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()):  null;	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
82	[BUG]  [BUGGY]  Var  var  =  getFunctionScope().getVar(lastArg.getString())+  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  getFunctionScope().getVar(lastArg.getString())+  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  getFunctionScope().getVar(lastArg.getString())+  1;	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
83	[BUG]  [BUGGY]  Var  var  =  getFunctionScope().getVar(argList.getString()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  getFunctionScope().getVar(argList.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  getFunctionScope().getVar(argList.getString()  +  1);	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
84	[BUG]  [BUGGY]  Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()  +  1):  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()  +  1):  null;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  isPropertyAssign?  getFunctionScope().getVar(lastArg.getString()  +  1):  null;	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
85	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getLastChild());	  Var    var    =    lastArg.getVar(fnScope.getLastChild());    	non-compiled	[CE]  	12	None	replace
86	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(fnScope.getFirstChild());	  Var    var    =    lastArg.getVar(fnScope.getLastChild());    	non-compiled	[CE]  	12	None	replace
87	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg,  argList.getLastChild());	  Var    var    =    scope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	73	None	replace
88	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg,  scope.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg,  scope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg,  scope.getString());	  Var    var    =    scope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	73	None	replace
89	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg,  argList.getFirstChild());	  Var    var    =    scope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	73	None	replace
90	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg,  lastArg.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg,  lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg,  lastArg.getString());	  Var    var    =    scope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	73	None	replace
91	[BUG]  [BUGGY]  Var  var  =  argList.getVar(parentScope.getNameNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(parentScope.getNameNode());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(parentScope.getNameNode());	  Var    var    =    parentScope.getVar(argList.getString());    	non-compiled	[CE]  	17	None	replace
92	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getFirstChild());	  Var    var    =    parentScope.getVar(argList.getString());    	non-compiled	[CE]  	17	None	replace
93	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.size()  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.size()  -  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.size()  -  1);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
94	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.getString(),  argList.size());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.getString(),  argList.size());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg,  argList.getString(),  argList.size());	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
95	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.getChildCount());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.getChildCount());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.getChildCount());	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
96	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  argList.size());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  argList.size());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  argList.size());	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
97	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
98	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeChild(lastArg));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeChild(lastArg));  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeChild(lastArg));	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
99	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.size()  -  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.size()  -  2);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.size()  -  2);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
100	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  lastArg);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    lastArg);    	non-compiled	[CE]  	4	None	replace
101	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  prefix);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  prefix);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  prefix);	  Var    var    =    fnScope.getVar(lastArg.getString(),    lastArg);    	non-compiled	[CE]  	4	None	replace
102	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  referenced);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    lastArg);    	non-compiled	[CE]  	4	None	replace
103	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  fnScope.getLastChild();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	55	None	replace
104	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  argList.getLastChild()  +  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  argList.getLastChild()  +  1;	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	55	None	replace
105	[BUG]  [BUGGY]  Node  lastArg  =  varList.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  varList.getLastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  varList.getLastChild();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	55	None	replace
106	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild().getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  argList.getLastChild().getNext();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  argList.getLastChild().getNext();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	55	None	replace
107	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild().cloneTree();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  argList.getLastChild().cloneTree();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  argList.getLastChild().cloneTree();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	55	None	replace
108	[BUG]  [BUGGY]  Node  lastArg  =  varList.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  varList.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  varList.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	58	None	replace
109	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  fnScope.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	58	None	replace
110	[BUG]  [BUGGY]  Node  varArg  =  argList.getFirstChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  varArg  =  argList.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  varArg  =  argList.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	58	None	replace
111	[BUG]  [BUGGY]  Var  var  =  referenced.getVar(lastArg.getString(),  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  referenced.getVar(lastArg.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  referenced.getVar(lastArg.getString(),  parentScope);	  Var    var    =    parentScope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	43	None	replace
112	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(parentScope.getString(),  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(parentScope.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(parentScope.getString(),  referenced);	  Var    var    =    parentScope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	43	None	replace
113	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  referenced);	  Var    var    =    parentScope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	43	None	replace
114	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  referenced);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  referenced);	  Var    var    =    parentScope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	43	None	replace
115	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.getString(),  parentScope);	  Var    var    =    parentScope.getVar(lastArg.getString(),    nameNode);    	non-compiled	[CE]  	2	None	replace
116	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  nameNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  nameNode);	  Var    var    =    parentScope.getVar(lastArg.getString(),    nameNode);    	non-compiled	[CE]  	2	None	replace
117	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  nameNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  nameNode);	  Var    var    =    parentScope.getVar(lastArg.getString(),    nameNode);    	non-compiled	[CE]  	2	None	replace
118	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  parent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.getString(),  parent);	  Var    var    =    parentScope.getVar(lastArg.getString(),    nameNode);    	non-compiled	[CE]  	2	None	replace
119	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getString(),  referenced);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(lastArg.getString(),  referenced);	  Var    var    =    lastArg.getVar(fnScope.getString(),    referenced);    	non-compiled	[CE]  	46	None	replace
120	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getString(),  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getString(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(fnScope.getString(),  nameNode);	  Var    var    =    lastArg.getVar(fnScope.getString(),    referenced);    	non-compiled	[CE]  	46	None	replace
121	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  referenced);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  referenced);	  Var    var    =    lastArg.getVar(fnScope.getString(),    referenced);    	non-compiled	[CE]  	46	None	replace
122	[BUG]  [BUGGY]  Var  var  =  referenced.getVar(fnScope.getString(),  lastArg);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  referenced.getVar(fnScope.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  referenced.getVar(fnScope.getString(),  lastArg);	  Var    var    =    lastArg.getVar(fnScope.getString(),    referenced);    	non-compiled	[CE]  	46	None	replace
123	[BUG]  [BUGGY]  Node  var  =  fnScope.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getLastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getLastChild();	  Node    var    =    lastArg.getLastChild();    	non-compiled	[CE]  	57	None	replace
124	[BUG]  [BUGGY]  Node  var  =  argList.getfirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  argList.getfirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  argList.getfirstChild();	  Node    var    =    lastArg.getLastChild();    	non-compiled	[CE]  	57	None	replace
125	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getLastChild(),  lastArg);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getLastChild(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getLastChild(),  lastArg);	  Var    var    =    fnScope.getVar(argList.getLastChild());    	non-compiled	[CE]  	8	None	replace
126	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  fnScope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
127	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  referenced,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  referenced,  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  referenced,  parent);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
128	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  referenced);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
129	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  parent);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
130	[BUG]  [BUGGY]  Var  var  =  parent.getVar(lastArg.getString(),  referenced,  fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parent.getVar(lastArg.getString(),  referenced,  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parent.getVar(lastArg.getString(),  referenced,  fnScope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
131	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  scope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  scope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
132	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(referenced.getString(),  lastArg,  parent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(referenced.getString(),  lastArg,  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(referenced.getString(),  lastArg,  parent);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
133	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.toString(),  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.toString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.toString(),  fnScope);	  Var    var    =    fnScope.getVar(lastArg.toString(),    scope);    	non-compiled	[CE]  	70	None	replace
134	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.toString(),  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.toString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.toString(),  scope);	  Var    var    =    fnScope.getVar(lastArg.toString(),    scope);    	non-compiled	[CE]  	70	None	replace
135	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  parentScope);	  Var    var    =    fnScope.getVar(lastArg.toString(),    scope);    	non-compiled	[CE]  	70	None	replace
136	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.toString(),  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.toString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.toString(),  scope);	  Var    var    =    fnScope.getVar(lastArg.toString(),    scope);    	non-compiled	[CE]  	70	None	replace
137	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  scope,  referenced);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  scope,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  scope,  referenced);	  Var    var    =    fnScope.getVar(lastArg.toString(),    scope);    	non-compiled	[CE]  	70	None	replace
138	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getLastChild());	  Var    var    =    parentScope.getVar(lastArg.getLastChild());    	non-compiled	[CE]  	10	None	replace
139	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(parentScope.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(parentScope.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(parentScope.getLastChild());	  Var    var    =    parentScope.getVar(lastArg.getLastChild());    	non-compiled	[CE]  	10	None	replace
140	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(lastArg.getLastChild());	  Var    var    =    parentScope.getVar(lastArg.getLastChild());    	non-compiled	[CE]  	10	None	replace
141	[BUG]  [BUGGY]  Node  referenced  =  argList.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  referenced  =  argList.getLastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  referenced  =  argList.getLastChild();	  Node    referenced    =    argList.getFirstChild();    	non-compiled	[CE]  	72	None	replace
142	[BUG]  [BUGGY]  Node  referenced  =  lastArg.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  referenced  =  lastArg.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  referenced  =  lastArg.getFirstChild();	  Node    referenced    =    argList.getFirstChild();    	non-compiled	[CE]  	72	None	replace
143	[BUG]  [BUGGY]  Node  referenced  =  fnScope.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  referenced  =  fnScope.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  referenced  =  fnScope.getFirstChild();	  Node    referenced    =    argList.getFirstChild();    	non-compiled	[CE]  	72	None	replace
144	[BUG]  [BUGGY]  Node  referenced  =  varList.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  referenced  =  varList.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  referenced  =  varList.getFirstChild();	  Node    referenced    =    argList.getFirstChild();    	non-compiled	[CE]  	72	None	replace
145	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  argList.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  argList.getFirstChild());	  Var    var    =    scope.getVar(lastArg.getString(),    argList.getLastChild());    	non-compiled	[CE]  	69	None	replace
146	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList,  lastArg.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList,  lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList,  lastArg.getString());	  Var    var    =    fnScope.getVar(argList,    lastArg.getString());    	non-compiled	[CE]  	29	None	replace
147	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList,  fnScope.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList,  fnScope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList,  fnScope.getString());	  Var    var    =    fnScope.getVar(argList,    lastArg.getString());    	non-compiled	[CE]  	29	None	replace
148	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList,  lastArg.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList,  lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList,  lastArg.getString());	  Var    var    =    fnScope.getVar(argList,    lastArg.getString());    	non-compiled	[CE]  	29	None	replace
149	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString())+  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString())+  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString())+  1;	  Var    var    =    fnScope.getVar(lastArg.getString())+    1;    	non-compiled	[CE]  	23	None	replace
150	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString())+  2;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString())+  2;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString())+  2;	  Var    var    =    fnScope.getVar(lastArg.getString())+    1;    	non-compiled	[CE]  	23	None	replace
151	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getString())+  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getString())+  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(fnScope.getString())+  1;	  Var    var    =    fnScope.getVar(lastArg.getString())+    1;    	non-compiled	[CE]  	23	None	replace
152	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString())/  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString())/  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString())/  1;	  Var    var    =    fnScope.getVar(lastArg.getString())+    1;    	non-compiled	[CE]  	23	None	replace
153	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString()  +  1)+  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString()  +  1)+  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString()  +  1)+  1;	  Var    var    =    fnScope.getVar(lastArg.getString())+    1;    	non-compiled	[CE]  	23	None	replace
154	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg,  scope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    scope);    	non-compiled	[CE]  	64	None	replace
155	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  nameNode,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  nameNode,  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  nameNode,  fnScope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    scope);    	non-compiled	[CE]  	64	None	replace
156	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode,  scope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    scope);    	non-compiled	[CE]  	64	None	replace
157	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  scope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    scope);    	non-compiled	[CE]  	64	None	replace
158	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode,  scope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  nameNode,  scope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    scope);    	non-compiled	[CE]  	64	None	replace
159	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  lastArg,  nameNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  lastArg,  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(scope.getString(),  lastArg,  nameNode);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    scope);    	non-compiled	[CE]  	64	None	replace
160	[BUG]  [BUGGY]  Var  var  =  argList.getVar(parentScope.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(parentScope.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(parentScope.getLastChild());	  Var    var    =    parentScope.getVar(argList.getLastChild());    	non-compiled	[CE]  	75	None	replace
161	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  referenced,  lastArg);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  referenced,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  referenced,  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
162	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  lastArg);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  referenced,  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
163	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
164	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(referenced.getString(),  lastArg,  lastArg);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(referenced.getString(),  lastArg,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(referenced.getString(),  lastArg,  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
165	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  parent);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
166	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(argList.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(argList.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(argList.getString());	  Var    var    =    callSiteOptimizer.getVar(lastArg.getString());    	non-compiled	[CE]  	18	None	replace
167	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  scope);	  Var    var    =    callSiteOptimizer.getVar(lastArg.getString());    	non-compiled	[CE]  	18	None	replace
168	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  fnScope);	  Var    var    =    callSiteOptimizer.getVar(lastArg.getString());    	non-compiled	[CE]  	18	None	replace
169	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg,  argList.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg,  argList.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg,  argList.getString());	  Var    var    =    callSiteOptimizer.getVar(lastArg.getString());    	non-compiled	[CE]  	18	None	replace
170	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.getLastChild());	  Var    var    =    callSiteOptimizer.getVar(lastArg.getString());    	non-compiled	[CE]  	18	None	replace
171	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString()  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.getString()  +  1);	  Var    var    =    callSiteOptimizer.getVar(lastArg.getString());    	non-compiled	[CE]  	18	None	replace
172	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.toString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.toString());	  Var    var    =    fnScope.getVar(lastArg,    argList.toString());    	non-compiled	[CE]  	78	None	replace
173	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.toString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg,  argList.toString());	  Var    var    =    fnScope.getVar(lastArg,    argList.toString());    	non-compiled	[CE]  	78	None	replace
174	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.toString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  lastArg.toString());	  Var    var    =    fnScope.getVar(lastArg,    argList.toString());    	non-compiled	[CE]  	78	None	replace
175	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList,  lastArg.toString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList,  lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList,  lastArg.toString());	  Var    var    =    fnScope.getVar(lastArg,    argList.toString());    	non-compiled	[CE]  	78	None	replace
176	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.toString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg,  argList.toString());	  Var    var    =    fnScope.getVar(lastArg,    argList.toString());    	non-compiled	[CE]  	78	None	replace
177	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getString(),  argList);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getString(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(fnScope.getString(),  argList);	  Var    var    =    lastArg.getVar(argList.getString(),    fnScope);    	non-compiled	[CE]  	41	None	replace
178	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  fnScope);	  Var    var    =    lastArg.getVar(argList.getString(),    fnScope);    	non-compiled	[CE]  	41	None	replace
179	[BUG]  [BUGGY]  Node  var  =(Node)argList.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =(Node)argList.getLastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =(Node)argList.getLastChild();	  Node    var    =(Node)argList.getFirstChild();    	non-compiled	[CE]  	56	None	replace
180	[BUG]  [BUGGY]  Node  var  =(Node)lastArg.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =(Node)lastArg.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =(Node)lastArg.getFirstChild();	  Node    var    =(Node)argList.getFirstChild();    	non-compiled	[CE]  	56	None	replace
181	[BUG]  [BUGGY]  Node  var  =(Node)argList.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =(Node)argList.getNext();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =(Node)argList.getNext();	  Node    var    =(Node)argList.getFirstChild();    	non-compiled	[CE]  	56	None	replace
182	[BUG]  [BUGGY]  Node  var  =(Node)argList.getLowerCase();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =(Node)argList.getLowerCase();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =(Node)argList.getLowerCase();	  Node    var    =(Node)argList.getFirstChild();    	non-compiled	[CE]  	56	None	replace
183	[BUG]  [BUGGY]  Node  var  =(Node)argList.get(0);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =(Node)argList.get(0);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =(Node)argList.get(0);	  Node    var    =(Node)argList.getFirstChild();    	non-compiled	[CE]  	56	None	replace
184	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.get  lastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.get  lastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.get  lastChild());	  Var    var    =    fnScope.getVar(argList.get    lastChild());    	non-compiled	[CE]  	85	None	replace
185	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getValue());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getValue());	  Var    var    =    fnScope.getVar(argList.get    lastChild());    	non-compiled	[CE]  	85	None	replace
186	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getChild());	  Var    var    =    fnScope.getVar(argList.get    lastChild());    	non-compiled	[CE]  	85	None	replace
187	[BUG]  [BUGGY]  Node  var  =  parentScope.getVar(lastArg);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  parentScope.getVar(lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  parentScope.getVar(lastArg);	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
188	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(argList.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getVar(argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getVar(argList.getFirstChild());	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
189	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(lastArg  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getVar(lastArg  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getVar(lastArg  +  1);	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
190	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  referenced);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getVar(lastArg,  referenced);	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
191	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(argList.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getVar(argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getVar(argList.getLastChild());	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
192	[BUG]  [BUGGY]  Node  var  =  scope.getVar(lastArg);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  scope.getVar(lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  scope.getVar(lastArg);	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
193	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  nameNode);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getVar(lastArg,  nameNode);	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
194	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg  +  1);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode    +    1);    	non-compiled	[CE]  	65	None	replace
195	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg  +  1);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode    +    1);    	non-compiled	[CE]  	65	None	replace
196	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  nameNode  +  1);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode    +    1);    	non-compiled	[CE]  	65	None	replace
197	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode  +  1);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode    +    1);    	non-compiled	[CE]  	65	None	replace
198	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode  +  2);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode  +  2);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode  +  2);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode    +    1);    	non-compiled	[CE]  	65	None	replace
199	[BUG]  [BUGGY]  Node  var  =  fnScope.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getFirstChild();	  Node    var    =    lastArg.getFirstChild();    	non-compiled	[CE]  	54	None	replace
200	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getFirstChild(),  referenced);	  Var    var    =    fnScope.getVar(argList.getString(),    referenced);    	non-compiled	[CE]  	42	None	replace
201	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  parent);	  Var    var    =    fnScope.getVar(argList.getString(),    referenced);    	non-compiled	[CE]  	42	None	replace
202	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(args.getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(args.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(args.getString());	  Var    var    =    args.getVar(lastArg.getString());    	non-compiled	[CE]  	90	None	replace
203	[BUG]  [BUGGY]  Var  var  =  args.getVar(lastArg.getString(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  args.getVar(lastArg.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  args.getVar(lastArg.getString(),  scope);	  Var    var    =    args.getVar(lastArg.getString());    	non-compiled	[CE]  	90	None	replace
204	[BUG]  [BUGGY]  Var  var  =  args.getVar(lastArg.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  args.getVar(lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  args.getVar(lastArg.getLastChild());	  Var    var    =    args.getVar(lastArg.getString());    	non-compiled	[CE]  	90	None	replace
205	[BUG]  [BUGGY]  Var  var  =  args.getVar(lastArg.getString()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  args.getVar(lastArg.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  args.getVar(lastArg.getString()  +  1);	  Var    var    =    args.getVar(lastArg.getString());    	non-compiled	[CE]  	90	None	replace
206	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  fnScope.getFirstChild());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.getFirstChild());    	non-compiled	[CE]  	37	None	replace
207	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  fnScope.getLastChild());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.getFirstChild());    	non-compiled	[CE]  	37	None	replace
208	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg,  parentScope.getString());	  Var    var    =    parentScope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	26	None	replace
209	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getVar(argList.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getVar(argList.getString()));  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg,  parentScope.getVar(argList.getString()));	  Var    var    =    parentScope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	26	None	replace
210	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getNameNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getNameNode());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg,  parentScope.getNameNode());	  Var    var    =    parentScope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	26	None	replace
211	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getLineno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getLineno());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg,  parentScope.getLineno());	  Var    var    =    parentScope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	26	None	replace
212	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  lastArg.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg,  lastArg.getString());	  Var    var    =    fnScope.getVar(lastArg,    lastArg.getString());    	non-compiled	[CE]  	30	None	replace
213	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.getString(),  referenced);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  lastArg.getString(),  referenced);	  Var    var    =    fnScope.getVar(lastArg,    lastArg.getString());    	non-compiled	[CE]  	30	None	replace
214	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  lastArg.getLastChild());	  Var    var    =    fnScope.getVar(lastArg,    lastArg.getString());    	non-compiled	[CE]  	30	None	replace
215	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  parentScope);	  Var    var    =    parentScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	84	None	replace
216	[BUG]  [BUGGY]  Var  var  =  argList.getVar(parentScope.getString(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(parentScope.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(parentScope.getString(),  scope);	  Var    var    =    parentScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	84	None	replace
217	[BUG]  [BUGGY]  Var  var  =  argList.getVar(scope.getString(),  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(scope.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(scope.getString(),  parentScope);	  Var    var    =    parentScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	84	None	replace
218	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  fnScope);	  Var    var    =    parentScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	84	None	replace
219	[BUG]  [BUGGY]  Node  var  =  argList.getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  argList.getString();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  argList.getString();	  Node    var    =    lastArg.getString();    	non-compiled	[CE]  	89	None	replace
220	[BUG]  [BUGGY]  Node  var  =  fnScope.getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getString();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getString();	  Node    var    =    lastArg.getString();    	non-compiled	[CE]  	89	None	replace
221	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg,  referenced);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    referenced);    	non-compiled	[CE]  	7	None	replace
222	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode,  referenced);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  nameNode,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    referenced);    	non-compiled	[CE]  	7	None	replace
223	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  referenced,  nameNode);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  referenced,  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  referenced,  nameNode);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    referenced);    	non-compiled	[CE]  	7	None	replace
224	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode,  referenced);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    referenced);    	non-compiled	[CE]  	7	None	replace
225	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  argList);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  argList);	  Var    var    =    parentScope.getVar(lastArg.getString(),    argList);    	non-compiled	[CE]  	39	None	replace
226	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  prefix);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  prefix);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  prefix);	  Var    var    =    scope.getVar(lastArg.getString(),    argList);    	non-compiled	[CE]  	40	None	replace
227	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  fnScope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    parent);    	non-compiled	[CE]  	5	None	replace
228	[BUG]  [BUGGY]  Var  var  =  parent.getVar(lastArg.getString(),  fnScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parent.getVar(lastArg.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parent.getVar(lastArg.getString(),  fnScope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    parent);    	non-compiled	[CE]  	5	None	replace
229	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  scope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  scope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    parent);    	non-compiled	[CE]  	5	None	replace
230	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList.toString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  argList.toString());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.toString());    	non-compiled	[CE]  	92	None	replace
231	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope.toString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  fnScope.toString());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.toString());    	non-compiled	[CE]  	92	None	replace
232	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg.toString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  lastArg.toString());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.toString());    	non-compiled	[CE]  	92	None	replace
233	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.toString(),  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.toString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg.toString(),  referenced);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.toString());    	non-compiled	[CE]  	92	None	replace
234	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  lastArg.toString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  lastArg.toString());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.toString());    	non-compiled	[CE]  	92	None	replace
235	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.toString()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.toString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg.toString()  +  1);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.toString());    	non-compiled	[CE]  	92	None	replace
236	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  parentScope);	  Var    var    =    parentScope.getVar(lastArg.getString(),    scope);    	non-compiled	[CE]  	48	None	replace
237	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(scope.getString(),  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(scope.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(scope.getString(),  parentScope);	  Var    var    =    parentScope.getVar(lastArg.getString(),    scope);    	non-compiled	[CE]  	48	None	replace
238	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  scope);	  Var    var    =    parentScope.getVar(lastArg.getString(),    scope);    	non-compiled	[CE]  	48	None	replace
239	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  function);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  function);	  Var    var    =    fnScope.getVar(lastArg.getString(),    function);    	non-compiled	[CE]  	67	None	replace
240	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  function);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  function);	  Var    var    =    fnScope.getVar(lastArg.getString(),    function);    	non-compiled	[CE]  	67	None	replace
241	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  function,  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  function,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  function,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    function);    	non-compiled	[CE]  	67	None	replace
242	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg.removeFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.getString(),  lastArg.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
243	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode.removeFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  nameNode.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  nameNode.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
244	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.removeFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
245	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.removeLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.removeLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.removeLastChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
246	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
247	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode.removeFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  nameNode.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
248	[BUG]  [BUGGY]  Var  var  =  referenced.getVar(lastArg.getString(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  referenced.getVar(lastArg.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  referenced.getVar(lastArg.getString(),  scope);	  Var    var    =    referenced.getVar(lastArg.getString(),    fnScope);    	non-compiled	[CE]  	66	None	replace
249	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.getString(),  fnScope);	  Var    var    =    referenced.getVar(lastArg.getString(),    fnScope);    	non-compiled	[CE]  	66	None	replace
250	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(referenced.getString(),  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(referenced.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(referenced.getString(),  fnScope);	  Var    var    =    referenced.getVar(lastArg.getString(),    fnScope);    	non-compiled	[CE]  	66	None	replace
251	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  nameNode.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  nameNode.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg,  nameNode.getString());	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
252	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  referenced);	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
253	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  parent);	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
254	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.getLastChild());	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
255	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
256	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  parent.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  parent.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  parent.getString());	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
257	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.toString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.toString());	  Var    var    =    parentScope.getVar(lastArg.toString());    	non-compiled	[CE]  	60	None	replace
258	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.toString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.toString());	  Var    var    =    parentScope.getVar(lastArg.toString());    	non-compiled	[CE]  	60	None	replace
259	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.toString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.toString());	  Var    var    =    parentScope.getVar(lastArg.toString());    	non-compiled	[CE]  	60	None	replace
260	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.toString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.toString());	  Var    var    =    parentScope.getVar(lastArg.toString());    	non-compiled	[CE]  	60	None	replace
261	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList.cloneTree());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  argList.cloneTree());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
262	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  fnScope.cloneTree());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
263	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  lastArg.cloneTree());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
264	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  lastArg.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  lastArg.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  lastArg.cloneTree());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
265	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  referenced);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
266	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  parent);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
267	[BUG]  [BUGGY]  Node  var  =  parentScope.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  parentScope.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  parentScope.getFirstChild();	  Node    var    =    argList.getFirstChild();    	non-compiled	[CE]  	52	None	replace
268	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.toString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.toString());	  Var    var    =    fnScope.getVar(argList.toString());    	non-compiled	[CE]  	61	None	replace
269	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.toString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.toString());	  Var    var    =    fnScope.getVar(argList.toString());    	non-compiled	[CE]  	61	None	replace
270	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(nameNode.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(nameNode.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(nameNode.getString());	  Var    var    =    nameNode.getVar(lastArg.getString());    	non-compiled	[CE]  	19	None	replace
271	[BUG]  [BUGGY]  Var  var  =  parent.getVar(lastArg.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parent.getVar(lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parent.getVar(lastArg.getString());	  Var    var    =    nameNode.getVar(lastArg.getString());    	non-compiled	[CE]  	19	None	replace
272	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(argList.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(argList.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(argList.getString());	  Var    var    =    nameNode.getVar(lastArg.getString());    	non-compiled	[CE]  	19	None	replace
273	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(lastArg.getString());	  Var    var    =    nameNode.getVar(lastArg.getString());    	non-compiled	[CE]  	19	None	replace
274	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  lastArg);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  lastArg);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
275	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  nameNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  nameNode);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
276	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.getString(),  referenced);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg,  argList.getString(),  referenced);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
277	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  referenced,  lastArg);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  referenced,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  referenced,  lastArg);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
278	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  referenced,  parent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  referenced,  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  referenced,  parent);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
279	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.getLastChild(),  referenced);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.getLastChild(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg.getLastChild(),  referenced);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	32	None	replace
280	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  lastArg.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(scope.getString(),  lastArg.getLastChild());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	32	None	replace
281	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  parentScope.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  parentScope.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  parentScope.getLastChild());	  Var    var    =    parentScope.getVar(lastArg.getString(),    argList.getLastChild());    	non-compiled	[CE]  	35	None	replace
282	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  lastArg.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  lastArg.getLastChild());	  Var    var    =    parentScope.getVar(lastArg.getString(),    argList.getLastChild());    	non-compiled	[CE]  	35	None	replace
283	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(parentScope.getString()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(parentScope.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(parentScope.getString()  +  1);	  Var    var    =    parentScope.getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	22	None	replace
284	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.getString()  +  1);	  Var    var    =    parentScope.getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	22	None	replace
285	[BUG]  [BUGGY]  Var  var  =  getScope().getVar(lastArg.getString()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  getScope().getVar(lastArg.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  getScope().getVar(lastArg.getString()  +  1);	  Var    var    =    parentScope.getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	22	None	replace
286	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.getString(),  argList);	  Var    var    =    fnScope.getVar(argList.getString(),    nameNode);    	non-compiled	[CE]  	1	None	replace
287	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getFirstChild(),  nameNode);	  Var    var    =    fnScope.getVar(argList.getString(),    nameNode);    	non-compiled	[CE]  	1	None	replace
288	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg,  argList.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getFirstChild());    	non-compiled	[CE]  	28	None	replace
289	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getFirstChild(),  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getFirstChild(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getFirstChild(),  referenced);	  Var    var    =    fnScope.getVar(lastArg,    argList.getFirstChild());    	non-compiled	[CE]  	28	None	replace
290	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList,  lastArg.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList,  lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList,  lastArg.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getFirstChild());    	non-compiled	[CE]  	28	None	replace
291	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  lastArg.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg.getString(),  lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg.getString(),  lastArg.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	36	None	replace
292	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getString(),  argList.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(lastArg.getString(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(lastArg.getString(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	36	None	replace
293	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.getLastChild(),  referenced);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.getLastChild(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.getLastChild(),  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	36	None	replace
294	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  lastArg.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  lastArg.getLastChild());	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	34	None	replace
295	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  parentScope.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  parentScope.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  parentScope.getLastChild());	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	34	None	replace
296	[BUG]  [BUGGY]  Var  var  =  function.getVar(lastArg,  fnScope.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  function.getVar(lastArg,  fnScope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  function.getVar(lastArg,  fnScope.getString());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
297	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  function.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  function.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg,  function.getString());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
298	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getName());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getName());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  function.getName());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
299	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getQualifiedName());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getQualifiedName());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  function.getQualifiedName());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
300	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getLineno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getLineno());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  function.getLineno());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
301	[BUG]  [BUGGY]  Var  var  =  firstArg.getVar(fnScope.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  firstArg.getVar(fnScope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  firstArg.getVar(fnScope.getString());	  Var    var    =    lastArg.getVar(fnScope.getString()    +    1);    	non-compiled	[CE]  	21	None	replace
302	[BUG]  [BUGGY]  Var  var  =  this.lastArg.getVar(fnScope.getString()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  this.lastArg.getVar(fnScope.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  this.lastArg.getVar(fnScope.getString()  +  1);	  Var    var    =    lastArg.getVar(fnScope.getString()    +    1);    	non-compiled	[CE]  	21	None	replace
303	[BUG]  [BUGGY]  Var  var  =  nextArg.getVar(fnScope.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nextArg.getVar(fnScope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nextArg.getVar(fnScope.getString());	  Var    var    =    lastArg.getVar(fnScope.getString()    +    1);    	non-compiled	[CE]  	21	None	replace
304	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  referenced);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  referenced);	  Var    var    =    scope.getVar(lastArg.getString(),    fnScope);    	non-compiled	[CE]  	47	None	replace
305	[BUG]  [BUGGY]  Var  var  =  argList.getVar(scope.getString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(scope.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(scope.getString());	  Var    var    =    scope.getVar(argList.getString());    	non-compiled	[CE]  	59	None	replace
306	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(lastArg,  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(lastArg,  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getLastChild());    	non-compiled	[CE]  	25	None	replace
307	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList,  lastArg.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList,  lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList,  lastArg.getLastChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getLastChild());    	non-compiled	[CE]  	25	None	replace
308	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getLastChild(),  referenced);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getLastChild(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getLastChild(),  referenced);	  Var    var    =    fnScope.getVar(lastArg,    argList.getLastChild());    	non-compiled	[CE]  	25	None	replace
309	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  lastArg.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getLastChild());    	non-compiled	[CE]  	25	None	replace
310	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  lastArg);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getFirstChild(),  lastArg);	  Var    var    =    fnScope.getVar(argList.getFirstChild());    	non-compiled	[CE]  	11	None	replace
311	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString()  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString()  +  1);	  Var    var    =    argList.getVar(lastArg.getString());    	non-compiled	[CE]  	15	None	replace
312	[BUG]  [BUGGY]  Var  var  =  argList.getVar(parentScope.getString(),  referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(parentScope.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(parentScope.getString(),  referenced);	  Var    var    =    parentScope.getVar(argList.getString(),    referenced);    	non-compiled	[CE]  	87	None	replace
313	[BUG]  [BUGGY]  Var  var  =  referenced.getVar(argList.getString(),  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  referenced.getVar(argList.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  referenced.getVar(argList.getString(),  parentScope);	  Var    var    =    parentScope.getVar(argList.getString(),    referenced);    	non-compiled	[CE]  	87	None	replace
314	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getNameNode());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getNameNode());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(fnScope.getNameNode());	  Var    var    =    lastArg.getVar(fnScope.getString());    	non-compiled	[CE]  	20	None	replace
315	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(argList.getString(),  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(argList.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(argList.getString(),  scope);	  Var    var    =    parentScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	84	None	replace
316	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(argList.getString(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(argList.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(argList.getString(),  scope);	  Var    var    =    parentScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	84	None	replace
317	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  argList.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.toString(),    referenced);    	non-compiled	[CE]  	63	None	replace
318	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.removeVar(argList.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.removeVar(argList.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.removeVar(argList.getString());	  Var    var    =    callSiteOptimizer.getVar(lastArg.getString());    	non-compiled	[CE]  	18	None	replace
319	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  parent);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
320	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  predicate);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  predicate);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  predicate);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
321	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  null);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  null);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
322	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  argList.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getVar(lastArg,  argList.getLastChild());	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
323	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  parentScope);	  Var    var    =    scope.getVar(lastArg.getString(),    fnScope);    	non-compiled	[CE]  	47	None	replace
324	[BUG]  [BUGGY]  Node  var  =  lastArg.removeChild(lastArg);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  lastArg.removeChild(lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  lastArg.removeChild(lastArg);	  Node    var    =    lastArg.getNext();    	non-compiled	[CE]  	53	None	replace
325	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  argList.getFirstChild());	  Var    var    =    fnScope.getVar(argList.getString(),    argList.getLastChild());    	non-compiled	[CE]  	86	None	replace
326	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.getChildCount());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.getChildCount());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  argList.getChildCount());	  Var    var    =    fnScope.getVar(argList.getString(),    argList.getLastChild());    	non-compiled	[CE]  	86	None	replace
327	[BUG]  [BUGGY]  Var  var  =  args.getVar(lastArg.getString(),  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  args.getVar(lastArg.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  args.getVar(lastArg.getString(),  fnScope);	  Var    var    =    args.getVar(lastArg.getString());    	non-compiled	[CE]  	90	None	replace
328	[BUG]  [BUGGY]  Node  var  =(Node)parent.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =(Node)parent.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =(Node)parent.getFirstChild();	  Node    var    =(Node)argList.getFirstChild();    	non-compiled	[CE]  	56	None	replace
329	[BUG]  [BUGGY]  Node  var  =(Node)a.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =(Node)a.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =(Node)a.getFirstChild();	  Node    var    =(Node)argList.getFirstChild();    	non-compiled	[CE]  	56	None	replace
330	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList.getLastChild()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList.getLastChild()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  argList.getLastChild()  +  1);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode    +    1);    	non-compiled	[CE]  	65	None	replace
331	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  argList.removeChild(lastArg));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  argList.removeChild(lastArg));  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  argList.removeChild(lastArg));	  Var    var    =    scope.getVar(lastArg.getString(),    argList);    	non-compiled	[CE]  	40	None	replace
332	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getNameNode(),  referenced);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getNameNode(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(fnScope.getNameNode(),  referenced);	  Var    var    =    lastArg.getVar(fnScope.getString(),    referenced);    	non-compiled	[CE]  	46	None	replace
333	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getFirstChild(),  argList.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getFirstChild(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getFirstChild(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.getFirstChild());    	non-compiled	[CE]  	9	None	replace
334	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.getString(),  scope);	  Var    var    =    parentScope.getVar(lastArg.getString(),    scope);    	non-compiled	[CE]  	48	None	replace
335	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList,  fnScope.getVar(lastArg.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList,  fnScope.getVar(lastArg.getString()));  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList,  fnScope.getVar(lastArg.getString()));	  Var    var    =    fnScope.getVar(argList,    lastArg.getString());    	non-compiled	[CE]  	29	None	replace
336	[BUG]  [BUGGY]  Node  var  =  nameNode.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  nameNode.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  nameNode.getFirstChild();	  Node    var    =    argList.getFirstChild();    	non-compiled	[CE]  	52	None	replace
337	[BUG]  [BUGGY]  Node  var  =  function.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  function.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  function.getFirstChild();	  Node    var    =    argList.getFirstChild();    	non-compiled	[CE]  	52	None	replace
338	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString())+  3;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString())+  3;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString())+  3;	  Var    var    =    fnScope.getVar(lastArg.getString())+    1;    	non-compiled	[CE]  	23	None	replace
339	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString())+  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString())+  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString())+  1;	  Var    var    =    fnScope.getVar(lastArg.getString())+    1;    	non-compiled	[CE]  	23	None	replace
340	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(function,  lastArg.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(function,  lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(function,  lastArg.getString());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
341	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  function.getLastChild());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
342	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getNameNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.getNameNode());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  function.getNameNode());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
343	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  referenced);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.getString(),  referenced);	  Var    var    =    parentScope.getVar(lastArg.getString(),    referenced);    	non-compiled	[CE]  	43	None	replace
344	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getLastChild(),  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getLastChild(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getLastChild(),  scope);	  Var    var    =    fnScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	49	None	replace
345	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  argList.removeFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  argList.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.getString(),  argList.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
346	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.getLastChild());	  Var    var    =    parentScope.getVar(lastArg.getLastChild());    	non-compiled	[CE]  	10	None	replace
347	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  null);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode,  null);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    referenced);    	non-compiled	[CE]  	7	None	replace
348	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  function.getFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  function.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	58	None	replace
349	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  nameNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg.cloneTree(),  nameNode);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
350	[BUG]  [BUGGY]  Var  lastArg  =  getFunctionScope().getVar(lastArg.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  lastArg  =  getFunctionScope().getVar(lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  lastArg  =  getFunctionScope().getVar(lastArg.getString());	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
351	[BUG]  [BUGGY]  Var  var  =  findFunctionScope().getVar(lastArg.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  findFunctionScope().getVar(lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  findFunctionScope().getVar(lastArg.getString());	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
352	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode,  lastArg.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode,  lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode,  lastArg.getString());	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
353	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  null);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  null);	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
354	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  argList.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.getString(),  argList.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.getString(),  argList.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
355	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.getString(),  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg,  argList.getString(),  fnScope);	  Var    var    =    scope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	73	None	replace
356	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.getString(),  referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg,  argList.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg,  argList.getString(),  referenced);	  Var    var    =    scope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	73	None	replace
357	[BUG]  [BUGGY]  Var  var  =  getFunctionScope().getVar(lastArg.toString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  getFunctionScope().getVar(lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  getFunctionScope().getVar(lastArg.toString());	  Var    var    =    fnScope.getVar(lastArg.toString()    +    1);    	non-compiled	[CE]  	62	None	replace
358	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  lastArg.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  lastArg.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	36	None	replace
359	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  argList);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(lastArg.getString(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(lastArg.getString(),  argList);	  Var    var    =    parentScope.getVar(lastArg.getString(),    argList);    	non-compiled	[CE]  	39	None	replace
360	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeChild(lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeChild(lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeChild(lastArg);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
361	[BUG]  [BUGGY]  Node  var  =  function.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  function.getLastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  function.getLastChild();	  Node    var    =    argList.getLastChild();    	non-compiled	[CE]  	71	None	replace
362	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(function.getString(),  lastArg);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(function.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(function.getString(),  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    function);    	non-compiled	[CE]  	67	None	replace
363	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  referenced);	  Var    var    =    lastArg.getVar(argList.getString(),    fnScope);    	non-compiled	[CE]  	41	None	replace
364	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  nameNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  nameNode);	  Var    var    =    lastArg.getVar(argList.getString(),    fnScope);    	non-compiled	[CE]  	41	None	replace
365	[BUG]  [BUGGY]  Node  referenced  =  argList.getQualifiedName();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  referenced  =  argList.getQualifiedName();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  referenced  =  argList.getQualifiedName();	  Node    referenced    =    argList.getFirstChild();    	non-compiled	[CE]  	72	None	replace
366	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getLastChild(),  referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getLastChild(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getLastChild(),  referenced);	  Var    var    =    fnScope.getVar(argList.getString(),    referenced);    	non-compiled	[CE]  	42	None	replace
367	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(nameNode.getString(),  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(nameNode.getString(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(nameNode.getString(),  parentScope);	  Var    var    =    parentScope.getVar(lastArg.getString(),    nameNode);    	non-compiled	[CE]  	2	None	replace
368	[BUG]  [BUGGY]  Node  var  =  argList.getlastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  argList.getlastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  argList.getlastChild();	  Node    var    =    lastArg.getLastChild();    	non-compiled	[CE]  	57	None	replace
369	[BUG]  [BUGGY]  Var  var  =  referenced.getVar(argList.getString(),  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  referenced.getVar(argList.getString(),  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  referenced.getVar(argList.getString(),  fnScope);	  Var    var    =    referenced.getVar(lastArg.getString(),    fnScope);    	non-compiled	[CE]  	66	None	replace
370	[BUG]  [BUGGY]  Var  var  =  referenced.getVar(lastArg.getString(),  fnScope,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  referenced.getVar(lastArg.getString(),  fnScope,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  referenced.getVar(lastArg.getString(),  fnScope,  scope);	  Var    var    =    referenced.getVar(lastArg.getString(),    fnScope);    	non-compiled	[CE]  	66	None	replace
371	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(fnScope.getString(),  lastArg);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(fnScope.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(fnScope.getString(),  lastArg);	  Var    var    =    lastArg.getVar(fnScope.getString(),    scope);    	non-compiled	[CE]  	51	None	replace
372	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getNameNode(),  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getNameNode(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(fnScope.getNameNode(),  scope);	  Var    var    =    lastArg.getVar(fnScope.getString(),    scope);    	non-compiled	[CE]  	51	None	replace
373	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.removeChild(lastArg));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg.removeChild(lastArg));  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg.removeChild(lastArg));	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.toString());    	non-compiled	[CE]  	92	None	replace
374	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(arglist.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(arglist.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(arglist.getString());	  Var    var    =    fnScope.getVar(argList.getString()    +    1);    	non-compiled	[CE]  	24	None	replace
375	[BUG]  [BUGGY]  Var  var  =  fnScope.getVars(argList.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVars(argList.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVars(argList.getString());	  Var    var    =    fnScope.getVar(argList.getString()    +    1);    	non-compiled	[CE]  	24	None	replace
376	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  referenced,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  referenced,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  referenced,  scope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
377	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.cloneTree());    	non-compiled	[CE]  	80	None	replace
378	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.cloneTree(),  parentScope);	  Var    var    =    fnScope.getVar(lastArg.cloneTree());    	non-compiled	[CE]  	80	None	replace
379	[BUG]  [BUGGY]  Var  var  =  argList.getVar(parentScope.getVar(argList.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(parentScope.getVar(argList.getString()));  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(parentScope.getVar(argList.getString()));	  Var    var    =    parentScope.getVar(argList.getString());    	non-compiled	[CE]  	17	None	replace
380	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  lastArg  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  lastArg  +  1);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
381	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(argList.getString(),  lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(argList.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(argList.getString(),  lastArg);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
382	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(argList.getString(),  referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(argList.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(argList.getString(),  referenced);	  Var    var    =    parentScope.getVar(argList.getString(),    referenced);    	non-compiled	[CE]  	87	None	replace
383	[BUG]  [BUGGY]  Var  var  =  nameNode.getVar(argList.getString(),  referenced);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  nameNode.getVar(argList.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  nameNode.getVar(argList.getString(),  referenced);	  Var    var    =    parentScope.getVar(argList.getString(),    referenced);    	non-compiled	[CE]  	87	None	replace
384	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  nameNode);	  Var    var    =    fnScope.getVar(argList.getString(),    nameNode);    	non-compiled	[CE]  	1	None	replace
385	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.toString(),  lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.toString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.toString(),  lastArg);	  Var    var    =    fnScope.getVar(lastArg.toString(),    argList);    	non-compiled	[CE]  	79	None	replace
386	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  predicate);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  predicate);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  predicate);	  Var    var    =    fnScope.getVar(lastArg.toString(),    scope);    	non-compiled	[CE]  	70	None	replace
387	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  parent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  parent);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  parent);	  Var    var    =    fnScope.getVar(lastArg.getString(),    parent);    	non-compiled	[CE]  	5	None	replace
388	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList,  lastArg);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  argList,  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
389	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  lastArg,  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(scope.getString(),  lastArg,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(scope.getString(),  lastArg,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
390	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(nameNode.toString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(nameNode.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(nameNode.toString());	  Var    var    =    fnScope.getVar(argList.toString());    	non-compiled	[CE]  	61	None	replace
391	[BUG]  [BUGGY]  Var  var  =  getFunctionScope().getVar(lastArg.toString()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  getFunctionScope().getVar(lastArg.toString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  getFunctionScope().getVar(lastArg.toString()  +  1);	  Var    var    =    fnScope.getVar(lastArg.toString()    +    1);    	non-compiled	[CE]  	62	None	replace
392	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  argList.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getFirstChild(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(argList.getFirstChild());    	non-compiled	[CE]  	11	None	replace
393	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  argList.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getFirstChild(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getFirstChild(),  argList.getFirstChild());	  Var    var    =    fnScope.getVar(argList.getFirstChild());    	non-compiled	[CE]  	11	None	replace
394	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  lastArg.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  lastArg.cloneTree());	  Var    var    =    fnScope.getVar(lastArg,    lastArg.getString());    	non-compiled	[CE]  	30	None	replace
395	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  argList.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getVar(lastArg,  argList.getFirstChild());	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
396	[BUG]  [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  argList);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  fnScope.getVar(lastArg,  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  fnScope.getVar(lastArg,  argList);	  Node    var    =    fnScope.getVar(lastArg);    	non-compiled	[CE]  	88	None	replace
397	[BUG]  [BUGGY]  Var  var  =  argList.get(lastArg.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.get(lastArg.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.get(lastArg.getLastChild());	  Var    var    =    parentScope.getVar(lastArg.getLastChild());    	non-compiled	[CE]  	10	None	replace
398	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList,  argList.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList,  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList,  argList.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getLastChild());    	non-compiled	[CE]  	25	None	replace
399	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getLastChild(),  argList.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getLastChild(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getLastChild(),  argList.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getLastChild());    	non-compiled	[CE]  	25	None	replace
400	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  argList.size());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  argList.size());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  argList.size());	  Var    var    =    scope.getVar(lastArg.getString(),    fnScope);    	non-compiled	[CE]  	47	None	replace
401	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.removeFirstChild()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.removeFirstChild()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.removeFirstChild()  +  1);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode    +    1);    	non-compiled	[CE]  	65	None	replace
402	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree()  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree()  +  1);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode    +    1);    	non-compiled	[CE]  	65	None	replace
403	[BUG]  [BUGGY]  Var  var  =  argList.getVar(parentScope.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(parentScope.getCharno());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(parentScope.getCharno());	  Var    var    =    parentScope.getVar(argList.getString());    	non-compiled	[CE]  	17	None	replace
404	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.cloneTree());	  Var    var    =    argList.getVar(lastArg.getString());    	non-compiled	[CE]  	15	None	replace
405	[BUG]  [BUGGY]  Var  var  =  args.getVar(lastArg.toString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  args.getVar(lastArg.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  args.getVar(lastArg.toString());	  Var    var    =    args.getVar(lastArg.getString());    	non-compiled	[CE]  	90	None	replace
406	[BUG]  [BUGGY]  Var  var  =  arglist.getVar(lastArg.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  arglist.getVar(lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  arglist.getVar(lastArg.getString());	  Var    var    =    args.getVar(lastArg.getString());    	non-compiled	[CE]  	90	None	replace
407	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(argList.getString(),  lastArg);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(argList.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(argList.getString(),  lastArg);	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	74	None	replace
408	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  function,  argList);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  function,  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  function,  argList);	  Var    var    =    fnScope.getVar(lastArg.getString(),    function);    	non-compiled	[CE]  	67	None	replace
409	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  nameNode,  referenced);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  nameNode,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  nameNode,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    referenced);    	non-compiled	[CE]  	7	None	replace
410	[BUG]  [BUGGY]  Var  var  =  referenced.getVar(lastArg.getString(),  nameNode,  fnScope);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  referenced.getVar(lastArg.getString(),  nameNode,  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  referenced.getVar(lastArg.getString(),  nameNode,  fnScope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    referenced);    	non-compiled	[CE]  	7	None	replace
411	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getFirstChild());	  Var    var    =    parentScope.getVar(argList.getLastChild());    	non-compiled	[CE]  	75	None	replace
412	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.cloneTree());	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
413	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  nameNode.getString(),  argList);	  Var    var    =    fnScope.getVar(lastArg,    nameNode.getString());    	non-compiled	[CE]  	27	None	replace
414	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getLastChild(),  argList);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(fnScope.getLastChild(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(fnScope.getLastChild(),  argList);	  Var    var    =    lastArg.getVar(fnScope.getLastChild());    	non-compiled	[CE]  	12	None	replace
415	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg);	  Var    var    =    lastArg.getVar(fnScope.getLastChild());    	non-compiled	[CE]  	12	None	replace
416	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  argList.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  argList.getFirstChild());	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	34	None	replace
417	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  argList.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg.getString(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg.getString(),  argList.getLastChild());	  Var    var    =    parentScope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	34	None	replace
418	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.getFirstChild());	  Var    var    =    scope.getVar(lastArg.getFirstChild());    	non-compiled	[CE]  	13	None	replace
419	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.cloneTree());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  argList.cloneTree());	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
420	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.removeChild(lastArg));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.removeChild(lastArg));  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  argList.removeChild(lastArg));	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg.cloneTree());    	non-compiled	[CE]  	91	None	replace
421	[BUG]  [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  referenced,  lastArg);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parentScope.getVar(argList.getString(),  referenced,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parentScope.getVar(argList.getString(),  referenced,  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
422	[BUG]  [BUGGY]  Var  var  =  parent.getVar(argList.getString(),  referenced,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parent.getVar(argList.getString(),  referenced,  fnScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parent.getVar(argList.getString(),  referenced,  fnScope);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
423	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  argList);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  parent,  argList);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
424	[BUG]  [BUGGY]  Var  var  =  parent.getVar(lastArg.getString(),  referenced);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  parent.getVar(lastArg.getString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  parent.getVar(lastArg.getString(),  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    parent);    	non-compiled	[CE]  	45	None	replace
425	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString()  +  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString()  +  1);	  Var    var    =    parentScope.getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	22	None	replace
426	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString()  *  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString()  *  1);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString()  *  1);	  Var    var    =    fnScope.getVar(argList.getString()    +    1);    	non-compiled	[CE]  	24	None	replace
427	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.toString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.toString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  function.toString());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
428	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  function.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  function.cloneTree());	  Var    var    =    fnScope.getVar(lastArg,    function.getString());    	non-compiled	[CE]  	77	None	replace
429	[BUG]  [BUGGY]  Node  lastArg  =  argList.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  argList.removeFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  argList.removeFirstChild();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	55	None	replace
430	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  lastArg  =  function.getLastChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  lastArg  =  function.getLastChild();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	55	None	replace
431	[BUG]  [BUGGY]  Node  var  =  lastArg.removeChild(argList.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  lastArg.removeChild(argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  lastArg.removeChild(argList.getFirstChild());	  Node    var    =    lastArg.getNext();    	non-compiled	[CE]  	53	None	replace
432	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList.removeFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  argList.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  argList.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
433	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.removeFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.removeFirstChild());    	non-compiled	[CE]  	83	None	replace
434	[BUG]  [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  argList.getLastChild(),  argList.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(argList.getString(),  argList.getLastChild(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(argList.getString(),  argList.getLastChild(),  argList.getFirstChild());	  Var    var    =    scope.getVar(argList.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	38	None	replace
435	[BUG]  [BUGGY]  Var  var  =  getFunctionScope().getVar(argList.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  getFunctionScope().getVar(argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  getFunctionScope().getVar(argList.getLastChild());	  Var    var    =    fnScope.getVar(argList.getLastChild());    	non-compiled	[CE]  	8	None	replace
436	[BUG]  [BUGGY]  Node  var  =  lastArg.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  lastArg.cloneTree();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  lastArg.cloneTree();	  Node    var    =    lastArg.getFirstChild();    	non-compiled	[CE]  	54	None	replace
437	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  argList.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  lastArg,  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
438	[BUG]  [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  referenced,  lastArg);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  referenced,  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  callSiteOptimizer.getVar(lastArg.getString(),  referenced,  lastArg);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
439	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(args.getString(),  lastArg,  referenced);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(args.getString(),  lastArg,  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(args.getString(),  lastArg,  referenced);	  Var    var    =    fnScope.getVar(lastArg.getString(),    referenced,    lastArg);    	non-compiled	[CE]  	44	None	replace
440	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree(),  argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree(),  argList);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  nameNode.cloneTree(),  argList);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
441	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  function.cloneTree());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString(),  function.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString(),  function.cloneTree());	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode.cloneTree());    	non-compiled	[CE]  	82	None	replace
442	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.removeFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.toString());    	non-compiled	[CE]  	78	None	replace
443	[BUG]  [BUGGY]  Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  lastArg.getString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  lastArg.getString();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  lastArg.getString();	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
444	[BUG]  [BUGGY]  Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  fnScope.getVar(lastArg.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  fnScope.getVar(lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  fnScope.getVar(lastArg.getString());	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
445	[BUG]  [BUGGY]  Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  scope.getVar(lastArg.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  scope.getVar(lastArg.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =(lastArg  ==  null)?  getFunctionScope().getVar(lastArg.getString()):  scope.getVar(lastArg.getString());	  Var    var    =    getFunctionScope().getVar(lastArg.getString()    +    1);    	non-compiled	[CE]  	81	None	replace
446	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getFirstChild(),  argList.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getFirstChild(),  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getFirstChild(),  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getFirstChild());    	non-compiled	[CE]  	28	None	replace
447	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList,  argList.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList,  argList.getLastChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList,  argList.getLastChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getFirstChild());    	non-compiled	[CE]  	28	None	replace
448	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString()  +  1)/  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getString()  +  1)/  1;  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getString()  +  1)/  1;	  Var    var    =    fnScope.getVar(lastArg.getString())+    1;    	non-compiled	[CE]  	23	None	replace
449	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.getImmediateParentNode());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  argList.getImmediateParentNode());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  argList.getImmediateParentNode());	  Var    var    =    fnScope.getVar(argList.getString(),    argList.getLastChild());    	non-compiled	[CE]  	86	None	replace
450	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  fnScope,  nameNode);	  Var    var    =    fnScope.getVar(lastArg.getString(),    nameNode,    scope);    	non-compiled	[CE]  	64	None	replace
451	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  scope);	  Var    var    =    lastArg.getVar(argList.getString(),    fnScope);    	non-compiled	[CE]  	41	None	replace
452	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  nameNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  nameNode);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  nameNode);	  Var    var    =    lastArg.getVar(argList.getString(),    fnScope);    	non-compiled	[CE]  	41	None	replace
453	[BUG]  [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  parentScope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  lastArg.getVar(argList.getString(),  fnScope,  parentScope);	  Var    var    =    lastArg.getVar(argList.getString(),    fnScope);    	non-compiled	[CE]  	41	None	replace
454	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.removeFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.removeFirstChild());	  Var    var    =    fnScope.getVar(argList.toString());    	non-compiled	[CE]  	61	None	replace
455	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  c);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  c);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(argList.getString(),  lastArg,  c);	  Var    var    =    fnScope.getVar(argList.getString(),    lastArg);    	non-compiled	[CE]  	6	None	replace
456	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.cloneTree(),  argList.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg.cloneTree());    	non-compiled	[CE]  	80	None	replace
457	[BUG]  [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  lastArg.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  scope.getVar(lastArg.getString(),  lastArg.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  scope.getVar(lastArg.getString(),  lastArg.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg.getString(),    lastArg.getLastChild());    	non-compiled	[CE]  	36	None	replace
458	[BUG]  [BUGGY]  Var  var  =  argList.getVar(scope.getVar(lastArg.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(scope.getVar(lastArg.getString()));  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(scope.getVar(lastArg.getString()));	  Var    var    =    scope.getVar(argList.getString());    	non-compiled	[CE]  	59	None	replace
459	[BUG]  [BUGGY]  Var  var  =  argList.getVar(argList.getString(),  lastArg);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(argList.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(argList.getString(),  lastArg);	  Var    var    =    parentScope.getVar(argList.getString(),    referenced);    	non-compiled	[CE]  	87	None	replace
460	[BUG]  [BUGGY]  Var  var  =  argList.getVar(argList.getString(),  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(argList.getString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(argList.getString(),  scope);	  Var    var    =    parentScope.getVar(argList.getString(),    scope);    	non-compiled	[CE]  	84	None	replace
461	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getChildCount());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.getChildCount());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.getChildCount());	  Var    var    =    fnScope.getVar(argList.get    lastChild());    	non-compiled	[CE]  	85	None	replace
462	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.removeFirstChild());	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
463	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.cloneTree());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  argList.cloneTree());	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    argList.size());    	non-compiled	[CE]  	76	None	replace
464	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(args.getString(),  lastArg);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(args.getString(),  lastArg);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(args.getString(),  lastArg);	  Var    var    =    fnScope.getVar(nameNode.getString(),    lastArg);    	non-compiled	[CE]  	3	None	replace
465	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  function);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  function);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  function);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
466	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  varName);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  varName);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.getString(),  varName);	  Var    var    =    fnScope.getVar(lastArg,    argList.getString(),    referenced);    	non-compiled	[CE]  	31	None	replace
467	[BUG]  [BUGGY]  Node  var  =  lastArg.getfirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  var  =  lastArg.getfirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  var  =  lastArg.getfirstChild();	  Node    var    =    argList.getLastChild();    	non-compiled	[CE]  	71	None	replace
468	[BUG]  [BUGGY]  Node  referenced  =  argList.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Node  referenced  =  argList.removeFirstChild();  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Node  referenced  =  argList.removeFirstChild();	  Node    referenced    =    argList.getFirstChild();    	non-compiled	[CE]  	72	None	replace
469	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.toString(),  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.toString(),  scope);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.toString(),  scope);	  Var    var    =    fnScope.getVar(lastArg.toString(),    scope);    	non-compiled	[CE]  	70	None	replace
470	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg,  argList.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg,  argList.getString());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg,  argList.getString());	  Var    var    =    parentScope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	26	None	replace
471	[BUG]  [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getRootNode());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  argList.getVar(lastArg,  parentScope.getRootNode());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  argList.getVar(lastArg,  parentScope.getRootNode());	  Var    var    =    parentScope.getVar(lastArg,    argList.getString());    	non-compiled	[CE]  	26	None	replace
472	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  argList.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg.toString(),  argList.getFirstChild());  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg.toString(),  argList.getFirstChild());	  Var    var    =    fnScope.getVar(lastArg.toString(),    referenced);    	non-compiled	[CE]  	63	None	replace
473	[BUG]  [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.toString(),  referenced);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {      [BUGGY]  Var  var  =  fnScope.getVar(lastArg,  argList.toString(),  referenced);  [BUGGY]      if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	Var  var  =  fnScope.getVar(lastArg,  argList.toString(),  referenced);	  Var    var    =    fnScope.getVar(lastArg.toString(),    referenced);    	non-compiled	[CE]  	63	None	replace
