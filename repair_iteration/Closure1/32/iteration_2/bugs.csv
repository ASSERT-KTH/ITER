bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  continue;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  continue;  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getFirstChild().getString());  continue;	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  else  {  return;  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  else  {  return;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  else  {  return;  }	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getType()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.getType()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
6	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
7	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
8	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  scope))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var,  scope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
9	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
10	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
11	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var))  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpressionVar(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
12	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var))  {  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionExpressionVar(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
13	[BUG]  [BUGGY]  Node  var  =  n.getLastChild().getNext();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  n.getLastChild().getNext();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getLastChild().getNext();	      Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	21	None	replace
14	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getFirstChild().getString());	      Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	21	None	replace
15	[BUG]  [BUGGY]  Node  var  =  scope.getFirstChild().getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  scope.getFirstChild().getNext();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getFirstChild().getNext();	      Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	21	None	replace
16	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getString();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  n.getFirstChild().getString();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getFirstChild().getString();	      Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	21	None	replace
17	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  n.getFirstChild().getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getFirstChild().getLastChild();	      Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	21	None	replace
18	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild().getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  parent.getFirstChild().getNext();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getFirstChild().getNext();	      Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	21	None	replace
19	[BUG]  [BUGGY]  var  =  scope.getVar(n.getFirstChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  var  =  scope.getVar(n.getFirstChild());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getFirstChild());	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
20	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
21	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getString());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n.getString());	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
22	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getFirstChild());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getFirstChild());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n.getFirstChild());	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
23	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  return;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  return;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  return;  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
24	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getNext());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getNext());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n.getNext());	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
25	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  continue;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  continue;  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);  [CE]  [FE]                                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
34	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isRemovableVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var)||  type  ==  Token.FUNCTION)  {	  if    (var    ==    null    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	16	None	replace
35	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getType()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.getType()))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
36	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isPropertyAssign(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
37	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  scope))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var,  scope))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
38	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(n))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isPropertyAssign(var))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  if(n!=  null  &&  isPropertyAssign(var))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n!=  null  &&  isPropertyAssign(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isPropertyAssign(var))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
41	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  type))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  type))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var,  type))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
42	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getFirstChild()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.getFirstChild()))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
43	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getType()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getType()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
44	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
45	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
46	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  scope))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var,  scope))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
47	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
48	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
49	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionPrototypeVar(var))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
50	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var))  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionPrototypeVar(var))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
51	[BUG]  [BUGGY]  if(var!=  null  ||  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
52	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
53	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
54	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
55	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
56	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
57	[BUG]  [BUGGY]  if(var!=  null  &&  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
58	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isRemovableVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
59	[BUG]  [BUGGY]  n  =  scope.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  scope.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getFirstChild();	      n    =    n.getFirstChild();    	non-compiled	[CE]  	23	None	replace
60	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  n.getNext();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.getNext();	      n    =    n.getFirstChild();    	non-compiled	[CE]  	23	None	replace
61	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  parent.getFirstChild();	      n    =    n.getFirstChild();    	non-compiled	[CE]  	23	None	replace
62	[BUG]  [BUGGY]  n  =  scope.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  scope.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getLastChild();	      n    =    n.getFirstChild();    	non-compiled	[CE]  	23	None	replace
63	[BUG]  [BUGGY]  n  =  n.getParent();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  n.getParent();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.getParent();	      n    =    n.getFirstChild();    	non-compiled	[CE]  	23	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
71	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  parent.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  parent.getLastChild();	      n    =    n.getLastChild();    	non-compiled	[CE]  	30	None	replace
72	[BUG]  [BUGGY]  n  =  node.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  node.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  node.getLastChild();	      n    =    n.getLastChild();    	non-compiled	[CE]  	30	None	replace
73	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isFunctionAssign(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
74	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.getType()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var.getType()))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
75	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(n))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
76	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  scope))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var,  scope))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
77	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(var))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
78	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionAssign(var))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n!=  null  &&  isFunctionAssign(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionAssign(var))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
79	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
80	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  parent.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	6	None	replace
81	[BUG]  [BUGGY]  Node  n  =  scope.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  n  =  scope.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  scope.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	6	None	replace
82	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  n.getLastChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	6	None	replace
83	[BUG]  [BUGGY]  Node  n  =  scope.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  n  =  scope.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  scope.getLastChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	6	None	replace
84	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  node.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	6	None	replace
85	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  n  =  n.getNext();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  n.getNext();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	6	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  continuations);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
88	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  scope);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Context.traverse(compiler,  n,  scope);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  scope);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  type);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  type);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  type);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  continuations);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  continuations);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  scope,  continuations);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
91	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Traversal.traverse(compiler,  n,  parent);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  parent);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  this);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
93	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  return;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  return;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  return;  }	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
95	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
96	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild().getString()  +  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  var  =  scope.getVar(n.getLastChild().getString()  +  1);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild().getString()  +  1);	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
97	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope);  }	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n!=  null);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null);	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var  ==  null);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null);	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION);	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(scope!=  null);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null);	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.NAME);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.NAME);	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
111	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
112	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString()  +  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString()  +  1);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString()  +  1);	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
113	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n);	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
114	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
115	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
116	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
117	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
118	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  n.getLastChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
119	[BUG]  [BUGGY]  Node  c  =  parent.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  parent.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  parent.getFirstChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
120	[BUG]  [BUGGY]  Node  c  =  scope.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  scope.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getFirstChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
121	[BUG]  [BUGGY]  Node  c  =  n.getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  n.getNext();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  n.getNext();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
122	[BUG]  [BUGGY]  Node  c  =  n.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  n.getParent();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  n.getParent();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
123	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  node.getFirstChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
124	[BUG]  [BUGGY]  Node  c  =  scope.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  scope.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getLastChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
125	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getType()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var.getType()))  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
126	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isFunctionVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var))  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
127	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(n))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionVar(n))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(n))  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
128	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)||  type  ==  Token.FUNCTION)  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
129	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(n))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
130	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(var))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
131	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n,  scope))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n,  scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(n,  scope))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
132	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  scope))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var,  scope))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
133	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var.getType()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var.getType()))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
134	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionDeclaration(var))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
135	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
136	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionDeclaration(var))  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(scope!=  null  &&  isFunctionDeclaration(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionDeclaration(var))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
137	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getType()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getType()))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
138	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isDefinedVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
139	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  scope))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  scope))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
140	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
141	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getFirstChild()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getFirstChild()))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
142	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  type))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  type))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  type))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
143	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(var))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isDefinedVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(var))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
144	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  true))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  true))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  true))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
145	[BUG]  [BUGGY]  Node  var  =  scope.getFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  scope.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getFirstChild();	      Node    var    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
146	[BUG]  [BUGGY]  Node  var  =  scope.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  scope.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getLastChild();	      Node    var    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
147	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  scope.getVar(n.getLastChild());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild());	      Node    var    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
148	[BUG]  [BUGGY]  Node  var  =  parent.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  parent.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getLastChild();	      Node    var    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
149	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  parent.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getFirstChild();	      Node    var    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
150	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
151	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
152	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
153	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
154	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getString());	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
155	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var.getType()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isVar(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var.getType()))  {	  if(var!=    null    &&    isVar(var))    {    	non-compiled	[CE]  	14	None	replace
156	[BUG]  [BUGGY]  if(var!=  null  ||  isVar(var))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isVar(var))  {	  if(var!=    null    &&    isVar(var))    {    	non-compiled	[CE]  	14	None	replace
157	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var))    {    	non-compiled	[CE]  	14	None	replace
158	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isVar(n))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n))  {	  if(var!=    null    &&    isVar(var))    {    	non-compiled	[CE]  	14	None	replace
159	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpression(var))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpression(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpression(var))  {	  if(var!=    null    &&    isVar(var))    {    	non-compiled	[CE]  	14	None	replace
160	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString()  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString()  +  1);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString()  +  1);	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
161	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
162	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(parent.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(parent.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(parent.getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
163	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n);	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
164	[BUG]  [BUGGY]  Assign  var  =  parent.getVar(n.getFirstChild().getString());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  parent.getVar(n.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  parent.getVar(n.getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
165	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getFirstChild());	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
166	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild().getString());	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
167	[BUG]  [BUGGY]  if(var  ==  null  ||  isRemovableVar(var))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  ||  isRemovableVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isRemovableVar(var))  {	  if(var!=    null    ||    isRemovableVar(var))    {    	non-compiled	[CE]  	12	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkArgument(n!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(n!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n!=  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkArgument(var  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(var  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var  ==  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkArgument(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var  ==  null  ||  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkArgument(var  >=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(var  >=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var  >=  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkArgument(n  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(n  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n  ==  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
174	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
175	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.NAME);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
180	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
181	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getString()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
182	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.contains(var))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.contains(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
183	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
184	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionVar(var))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isFunctionVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionVar(var))  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
185	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
186	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionAssign(var))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionAssign(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionAssign(var))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
187	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getString()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
188	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
189	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
190	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getString()))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
191	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.scope))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinedVar(var.scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.scope))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
192	[BUG]  [BUGGY]  n  =  node.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  node.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  node.getFirstChild();	      n    =    n.getFirstChild();    	non-compiled	[CE]  	23	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isFunctionDeclaration());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isFunctionDeclaration());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.isFunctionDeclaration());	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isFunctionPrototype());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isFunctionPrototype());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.isFunctionPrototype());	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
195	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
196	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
197	[BUG]  [BUGGY]  if(type  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(type  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(type  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
198	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getNext().getString());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
199	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getType());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getType());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getType());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
200	[BUG]  [BUGGY]  Assign  var  =  type.getVar(n.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  type.getVar(n.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  type.getVar(n.getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
201	[BUG]  [BUGGY]  Assign  var  =  target.getVar(n.getFirstChild().getString());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  target.getVar(n.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  target.getVar(n.getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
202	[BUG]  [BUGGY]  Node  var  =  node.getLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  node.getLastChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  node.getLastChild();	      Node    var    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
203	[BUG]  [BUGGY]  Node  var  =  node.getFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  node.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  node.getFirstChild();	      Node    var    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
204	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
205	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
206	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
207	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  return;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  return;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  return;  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
208	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n);	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
209	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getParent();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  n.getFirstChild().getParent();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getFirstChild().getParent();	      Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	21	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkArgument(var  ==  null  &&  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(var  ==  null  &&  var.getType()!=  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var  ==  null  &&  var.getType()!=  Token.FUNCTION);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()  >=  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()  >=  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  var.getType()  >=  Token.FUNCTION);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.VAR  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type!=  Token.VAR  &&  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.VAR  &&  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
215	[BUG]  [BUGGY]  Node  c  =  n.getCurrentNode();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  n.getCurrentNode();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  n.getCurrentNode();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
216	[BUG]  [BUGGY]  if(var  ==  null  &&  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
217	[BUG]  [BUGGY]  Node  var  =  n.getNext();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  n.getNext();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getNext();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
218	[BUG]  [BUGGY]  Node  var  =  n.getParent();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  n.getParent();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getParent();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  scope));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  scope));  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  scope));	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  replications);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  replications);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  replications);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  parent));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  parent));  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  parent));	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  extension);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  extension);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  extension);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  referencedVars);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  referencedVars);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  referencedVars);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
224	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(var))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionDeclaration(var))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
225	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
226	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(var))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionDeclaration(var))  {	  if(var!=    null    ||    isRemovableVar(var))    {    	non-compiled	[CE]  	12	None	replace
227	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpression(var))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  ||  isFunctionExpression(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpression(var))  {	  if(var!=    null    ||    isRemovableVar(var))    {    	non-compiled	[CE]  	12	None	replace
228	[BUG]  [BUGGY]  if(var  ==  null  &&  isVar(var))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  ==  null  &&  isVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isVar(var))  {	  if(var!=    null    &&    isVar(var))    {    	non-compiled	[CE]  	14	None	replace
229	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
230	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
231	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
232	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(variables!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(variables!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(variables!=  null  &&  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
236	[BUG]  [BUGGY]  Node  n  =  nameNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  n  =  nameNode.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  nameNode.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	6	None	replace
237	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope);	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
238	[BUG]  [BUGGY]  Assign  var  =  type.getVar(n.getLastChild().getString());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  type.getVar(n.getLastChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  type.getVar(n.getLastChild().getString());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
239	[BUG]  [BUGGY]  Assign  var  =  parent.getVar(n.getLastChild().getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  parent.getVar(n.getLastChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  parent.getVar(n.getLastChild().getString());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
240	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
241	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.removeFirstChild();	      n    =    n.getLastChild();    	non-compiled	[CE]  	30	None	replace
242	[BUG]  [BUGGY]  n  =  n.getfirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  n.getfirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.getfirstChild();	      n    =    n.getLastChild();    	non-compiled	[CE]  	30	None	replace
243	[BUG]  [BUGGY]  Node  var  =  n.removeFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  n.removeFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.removeFirstChild();	      Node    var    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
244	[BUG]  [BUGGY]  if(var!=  null  &&  modifiedVar.isDefined())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  modifiedVar.isDefined())  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  modifiedVar.isDefined())  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
245	[BUG]  [BUGGY]  if(var!=  null  &&  modifiedVar.equals(var))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  modifiedVar.equals(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  modifiedVar.equals(var))  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
246	[BUG]  [BUGGY]  if(var!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	26	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isFunction());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isFunction());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.isFunction());	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null,  var.type  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null,  var.type  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null,  var.type  ==  Token.VAR);	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.scope!=  scope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  &&  var.scope!=  scope);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.scope!=  scope);	      Preconditions.checkState(var!=    null);    	non-compiled	[CE]  	19	None	replace
250	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getFirstChild().getString());  }	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
251	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }	      var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	4	None	replace
252	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
253	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }	      var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	1	None	replace
254	[BUG]  [BUGGY]  Node  c  =  n.removeFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  n.removeFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  n.removeFirstChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
255	[BUG]  [BUGGY]  Node  c  =  n.getOwnerChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  c  =  n.getOwnerChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  n.getOwnerChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
256	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isRemovableVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var)&&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
257	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
258	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	17	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	22	None	replace
262	[BUG]  [BUGGY]  n  =  n.getPreviousSibling();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  n  =  n.getPreviousSibling();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.getPreviousSibling();	      n    =    n.getFirstChild();    	non-compiled	[CE]  	23	None	replace
263	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var.scope))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isVar(var.scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var.scope))  {	  if(var!=    null    &&    isVar(var))    {    	non-compiled	[CE]  	14	None	replace
264	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var))    {    	non-compiled	[CE]  	14	None	replace
265	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
266	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.scope))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.scope))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
267	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getName()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getName()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getName()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	27	None	replace
268	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPropertyAssign(var))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionPropertyAssign(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPropertyAssign(var))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
269	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
270	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.name))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.name))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.name))  {	  if(var!=    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	11	None	replace
271	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getfirstChild().getString());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(n.getfirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getfirstChild().getString());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
272	[BUG]  [BUGGY]  Assign  var  =  target.getVar(n.getLastChild().getString());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  target.getVar(n.getLastChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  target.getVar(n.getLastChild().getString());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
273	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(parent.getLastChild().getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  scope.getVar(parent.getLastChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(parent.getLastChild().getString());	      Assign    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	2	None	replace
274	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
275	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  scope))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var,  scope))  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
276	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var.scope))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionVar(var.scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var.scope))  {	  if    (var!=    null    &&    isFunctionVar(var))    {    	non-compiled	[CE]  	15	None	replace
277	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.NAME)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
278	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	      var    =    scope.getVar(n.getLastChild().getString());    continue;    	non-compiled	[CE]  	9	None	replace
279	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var.getType()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isRemovableVar(var.getType()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var.getType()))  {	  if(var!=    null    ||    isRemovableVar(var))    {    	non-compiled	[CE]  	12	None	replace
280	[BUG]  [BUGGY]  if(var  >=  null  &&  isRemovableVar(var))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var  >=  null  &&  isRemovableVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  >=  null  &&  isRemovableVar(var))  {	  if(var!=    null    ||    isRemovableVar(var))    {    	non-compiled	[CE]  	12	None	replace
281	[BUG]  [BUGGY]  if(v!=  null  &&  isRemovableVar(var))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(v!=  null  &&  isRemovableVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  isRemovableVar(var))  {	  if(var!=    null    ||    isRemovableVar(var))    {    	non-compiled	[CE]  	12	None	replace
282	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var.getString()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isRemovableVar(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var.getString()))  {	  if(var!=    null    ||    isRemovableVar(var))    {    	non-compiled	[CE]  	12	None	replace
283	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isRemovableVar(var.getFirstChild()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var.getFirstChild()))  {	  if(var!=    null    ||    isRemovableVar(var))    {    	non-compiled	[CE]  	12	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentScope);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentScope);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  currentScope);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
285	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  scope);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  TraverseScope.traverse(compiler,  n,  scope);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  scope);	      NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	7	None	replace
286	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
287	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  type))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  type))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var,  type))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
288	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.toString()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.toString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.toString()))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
289	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.scope))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var.scope))  {	  if(var!=    null    &&    isFunctionAssign(var))    {    	non-compiled	[CE]  	25	None	replace
290	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getQualifiedName();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  var  =  n.getFirstChild().getQualifiedName();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getFirstChild().getQualifiedName();	      Node    var    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	21	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
292	[BUG]  [BUGGY]  Assign  var  =  fnScope.getVar(n.getFirstChild().getString());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  fnScope.getVar(n.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  fnScope.getVar(n.getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
293	[BUG]  [BUGGY]  Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
294	[BUG]  [BUGGY]  Assign  var  =  module.getVar(n.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Assign  var  =  module.getVar(n.getFirstChild().getString());  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  module.getVar(n.getFirstChild().getString());	      Assign    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	5	None	replace
295	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
296	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
297	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
298	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	      var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	29	None	replace
299	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
300	[BUG]  [BUGGY]  if(var!=  null  &&  continuations.contains(var))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  continuations.contains(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
301	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.contains(var))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.contains(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	13	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	      Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
303	[BUG]  [BUGGY]  Node  n  =  type.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Node  n  =  type.getFirstChild();  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  type.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	6	None	replace
304	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isRemovableVar(var))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isRemovableVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign  &&  isRemovableVar(var))  {	  if    (var    ==    null    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	16	None	replace
305	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinableVar(var))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isDefinableVar(var))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinableVar(var))  {	  if    (var    ==    null    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	16	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  >=  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  >=  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  >=  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null,  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  Preconditions.checkState(var!=  null,  var.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null,  var.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
309	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
310	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  type))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  type))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var,  type))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
311	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.scope))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.scope))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.scope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
312	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.name))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }    [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.name))  {  [BUGGY]    continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.name))  {	  if(var!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	28	None	replace
