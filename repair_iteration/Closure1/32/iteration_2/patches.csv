bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  var  =  scope.getLastChild().getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getLastChild().getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getLastChild().getNext();	  Node    var    =    n.getLastChild().getNext();    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  Node  var  =  parent.getLastChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  parent.getLastChild().getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getLastChild().getNext();	  Node    var    =    n.getLastChild().getNext();    	non-compiled	[CE]  	13	None	replace
3	[BUG]  [BUGGY]  Node  var  =  node.getLastChild().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  node.getLastChild().getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  node.getLastChild().getNext();	  Node    var    =    n.getLastChild().getNext();    	non-compiled	[CE]  	13	None	replace
4	[BUG]  [BUGGY]  Node  var  =  n.getLastChild().getFirstChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  n.getLastChild().getFirstChild().getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getLastChild().getFirstChild().getNext();	  Node    var    =    n.getLastChild().getNext();    	non-compiled	[CE]  	13	None	replace
5	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var)||  continuations.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    continuations.contains(var))    {    	non-compiled	[CE]  	182	None	replace
6	[BUG]  [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  isFunctionExpressionVar(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  isFunctionExpressionVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations.contains(var)||  isFunctionExpressionVar(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    continuations.contains(var))    {    	non-compiled	[CE]  	182	None	replace
7	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.get(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.get(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)||  continuations.get(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    continuations.contains(var))    {    	non-compiled	[CE]  	182	None	replace
8	[BUG]  [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  isPropertyAssign)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations.contains(var)||  isPropertyAssign)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    continuations.contains(var))    {    	non-compiled	[CE]  	182	None	replace
9	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  continuations.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    continuations.contains(var))    {    	non-compiled	[CE]  	182	None	replace
10	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var)||  continuations.contains(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpressionVar(var)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    continuations.contains(var))    {    	non-compiled	[CE]  	182	None	replace
11	[BUG]  [BUGGY]  if(var!=  null  &&  hasFunctionExpressionVar(var)||  continuations.contains(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  hasFunctionExpressionVar(var)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  hasFunctionExpressionVar(var)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    continuations.contains(var))    {    	non-compiled	[CE]  	182	None	replace
12	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild());	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    return;    }    	non-compiled	[CE]  	23	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    return;    }    	non-compiled	[CE]  	23	None	replace
14	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    return;    }    	non-compiled	[CE]  	23	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    return;    }    	non-compiled	[CE]  	23	None	replace
16	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.checkState(n.getType()  ==  Token.VAR);	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    return;    }    	non-compiled	[CE]  	23	None	replace
17	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  node.getLastChild();	  Node    n    =    node.getFirstChild();    	non-compiled	[CE]  	84	None	replace
18	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  parent.getLastChild();	  Node    n    =    node.getFirstChild();    	non-compiled	[CE]  	84	None	replace
19	[BUG]  [BUGGY]  Node  n  =  scope.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  scope.getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  scope.getNext();	  Node    n    =    node.getFirstChild();    	non-compiled	[CE]  	84	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	302	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	302	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkArgument(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	302	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	302	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(n!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	302	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkArgument(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	302	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkArgument(n  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	302	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkArgument(var  >=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var  >=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var  >=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkArgument(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	302	None	replace
28	[BUG]  [BUGGY]  if(var!=  null  &&  modifiedVar.equals(n))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  modifiedVar.equals(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  modifiedVar.equals(n))  {	  if(var!=    null    &&    modifiedVar.equals(var))    {    	non-compiled	[CE]  	245	None	replace
29	[BUG]  [BUGGY]  if(referencedVar!=  null  &&  modifiedVar.equals(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(referencedVar!=  null  &&  modifiedVar.equals(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(referencedVar!=  null  &&  modifiedVar.equals(var))  {	  if(var!=    null    &&    modifiedVar.equals(var))    {    	non-compiled	[CE]  	245	None	replace
30	[BUG]  [BUGGY]  if(var!=  null  &&  modifiedVar.equals(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  modifiedVar.equals(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  modifiedVar.equals(var.getType()))  {	  if(var!=    null    &&    modifiedVar.equals(var))    {    	non-compiled	[CE]  	245	None	replace
31	[BUG]  [BUGGY]  if(var!=  null  ||  modifiedVar.equals(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  modifiedVar.equals(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  modifiedVar.equals(var))  {	  if(var!=    null    &&    modifiedVar.equals(var))    {    	non-compiled	[CE]  	245	None	replace
32	[BUG]  [BUGGY]  if(var!=  null  &&  var.equals(modifiedVar))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  var.equals(modifiedVar))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  var.equals(modifiedVar))  {	  if(var!=    null    &&    modifiedVar.equals(var))    {    	non-compiled	[CE]  	245	None	replace
33	[BUG]  [BUGGY]  if(var!=  null  &&  modifiedVar.equals(scope.getVar(var)))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  modifiedVar.equals(scope.getVar(var)))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  modifiedVar.equals(scope.getVar(var)))  {	  if(var!=    null    &&    modifiedVar.equals(var))    {    	non-compiled	[CE]  	245	None	replace
34	[BUG]  [BUGGY]  if(var!=  null  &&  modifiedVar.equals(scope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  modifiedVar.equals(scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  modifiedVar.equals(scope))  {	  if(var!=    null    &&    modifiedVar.equals(var))    {    	non-compiled	[CE]  	245	None	replace
35	[BUG]  [BUGGY]  if(modifiedVar!=  null  &&  modifiedVar.equals(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(modifiedVar!=  null  &&  modifiedVar.equals(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(modifiedVar!=  null  &&  modifiedVar.equals(var))  {	  if(var!=    null    &&    modifiedVar.equals(var))    {    	non-compiled	[CE]  	245	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(n!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(n.getLastChild().getString());	  Assign    var    =    scope.getVar(parent.getLastChild().getString());    	non-compiled	[CE]  	273	None	replace
43	[BUG]  [BUGGY]  assign  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  assign  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	assign  =  scope.getVar(n.getLastChild().getString());	  Assign    var    =    scope.getVar(parent.getLastChild().getString());    	non-compiled	[CE]  	273	None	replace
44	[BUG]  [BUGGY]  var  =  scope.getVar(n.getFirstChild(),  n.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getFirstChild(),  n.getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getFirstChild(),  n.getString());	  var    =    scope.getVar(n.getLastChild(),    n.getString());    	non-compiled	[CE]  	21	None	replace
45	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getFirstChild().getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n.getFirstChild().getString());	  var    =    scope.getVar(n.getLastChild(),    n.getString());    	non-compiled	[CE]  	21	None	replace
46	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getSimpleName());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getSimpleName());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n.getSimpleName());	  var    =    scope.getVar(n.getLastChild(),    n.getString());    	non-compiled	[CE]  	21	None	replace
47	[BUG]  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString()  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getFirstChild().getString()  +  1);	  var    =    scope.getVar(n.getLastChild().getString()    +    1);    	non-compiled	[CE]  	96	None	replace
48	[BUG]  [BUGGY]  var  =  scope.getVar(N.getLastChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(N.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(N.getLastChild().getString());	  var    =    scope.getVar(n.getLastChild().getString()    +    1);    	non-compiled	[CE]  	96	None	replace
49	[BUG]  [BUGGY]  if(var!=  null  &&  continuations.containsKey(var.getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	274	None	replace
50	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	274	None	replace
51	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	274	None	replace
52	[BUG]  [BUGGY]  if(var!=  null  &&  continuations.containsKey(var.getString())||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  continuations.containsKey(var.getString())||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations.containsKey(var.getString())||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	274	None	replace
53	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(n)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(n)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(n)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	274	None	replace
54	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getClass()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getClass()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)&&  continuations.containsKey(var.getClass()))  {	  if(var!=    null    &&    isFunctionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	274	None	replace
55	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)&&  continuations.get(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var)&&  continuations.get(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)&&  continuations.get(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	274	None	replace
56	[BUG]  [BUGGY]  if(var  ==  null  ||  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var    ==    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	216	None	replace
57	[BUG]  [BUGGY]  if(var  ==  null  &&  isRemovableVar(var)||  var.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isRemovableVar(var)||  var.getType()!=  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isRemovableVar(var)||  var.getType()!=  Token.FUNCTION)  {	  if(var    ==    null    &&    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	216	None	replace
58	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild());	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	295	None	replace
59	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getFirstChild());  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getFirstChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getFirstChild());  }	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	295	None	replace
60	[BUG]  [BUGGY]  n  =  scope.getVar(n.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getVar(n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getVar(n.getLastChild());	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	295	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getLastChild());	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	295	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	295	None	replace
63	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getNext());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getNext());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getNext());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getNext());    	non-compiled	[CE]  	116	None	replace
64	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getNext());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getNext());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getNext());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getNext());    	non-compiled	[CE]  	116	None	replace
65	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getParent());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getParent());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getParent());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getNext());    	non-compiled	[CE]  	116	None	replace
66	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLastChild().getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLastChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getNext());    	non-compiled	[CE]  	116	None	replace
67	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLineno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLineno());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLineno());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getNext());    	non-compiled	[CE]  	116	None	replace
68	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getSimpleName());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getSimpleName());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getSimpleName());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getNext());    	non-compiled	[CE]  	116	None	replace
69	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionPrototypeVar(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionPrototypeVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionPrototypeVar(var))  {	  if(var    ==    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	49	None	replace
70	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var.getType()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionPrototypeVar(var.getType()))  {	  if(var    ==    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	49	None	replace
71	[BUG]  [BUGGY]  Node  c  =  parent.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  parent.removeFirstChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  parent.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  	254	None	replace
72	[BUG]  [BUGGY]  Node  c  =  n.removeLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  n.removeLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  n.removeLastChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  	254	None	replace
73	[BUG]  [BUGGY]  Node  c  =  scope.removeFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  scope.removeFirstChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  	254	None	replace
74	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	135	None	replace
75	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(n)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	135	None	replace
76	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	135	None	replace
77	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	135	None	replace
78	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	135	None	replace
79	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionDeclaration(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	135	None	replace
80	[BUG]  [BUGGY]  if(var!=  null  &&  isConstructorDeclaration(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isConstructorDeclaration(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isConstructorDeclaration(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	135	None	replace
81	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	246	None	replace
82	[BUG]  [BUGGY]  if(var!=  null  ||  modifiedVar.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  modifiedVar.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  modifiedVar.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	246	None	replace
83	[BUG]  [BUGGY]  if(modifiedVar!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(modifiedVar!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(modifiedVar!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	246	None	replace
84	[BUG]  [BUGGY]  if(referencedVar!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(referencedVar!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(referencedVar!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	246	None	replace
85	[BUG]  [BUGGY]  if(variables!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(variables!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(variables!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	246	None	replace
86	[BUG]  [BUGGY]  if(vectors!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(vectors!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(vectors!=  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	246	None	replace
87	[BUG]  [BUGGY]  if(var  ==  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  modifiedVar.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	246	None	replace
88	[BUG]  [BUGGY]  if(var!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	246	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	174	None	replace
90	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	174	None	replace
91	[BUG]  [BUGGY]  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	174	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	174	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	174	None	replace
95	[BUG]  [BUGGY]  n  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getVar(n.getFirstChild().getString());	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	174	None	replace
96	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n.getType()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getType()))    {    	non-compiled	[CE]  	5	None	replace
97	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var.getType()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getType()))    {    	non-compiled	[CE]  	5	None	replace
98	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild().getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild().getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild().getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getType()))    {    	non-compiled	[CE]  	5	None	replace
99	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var.getType()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionExpressionVar(var.getType()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getType()))    {    	non-compiled	[CE]  	5	None	replace
100	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var.getType()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpressionVar(var.getType()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getType()))    {    	non-compiled	[CE]  	5	None	replace
101	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getType())||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getType())||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.getType())||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getType()))    {    	non-compiled	[CE]  	5	None	replace
102	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild().getType()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild().getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.getFirstChild().getType()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getType()))    {    	non-compiled	[CE]  	5	None	replace
103	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(n.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isRemovableVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(n.getFirstChild()))  {	  if(var!=    null    &&    isRemovableVar(var.getFirstChild()))    {    	non-compiled	[CE]  	283	None	replace
104	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isRemovableVar(var.getLastChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var.getLastChild()))  {	  if(var!=    null    &&    isRemovableVar(var.getFirstChild()))    {    	non-compiled	[CE]  	283	None	replace
105	[BUG]  [BUGGY]  if(var!=  null  ||  isRemovableVar(var.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isRemovableVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isRemovableVar(var.getFirstChild()))  {	  if(var!=    null    &&    isRemovableVar(var.getFirstChild()))    {    	non-compiled	[CE]  	283	None	replace
106	[BUG]  [BUGGY]  if(n!=  null  &&  isRemovableVar(var.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isRemovableVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isRemovableVar(var.getFirstChild()))  {	  if(var!=    null    &&    isRemovableVar(var.getFirstChild()))    {    	non-compiled	[CE]  	283	None	replace
107	[BUG]  [BUGGY]  if(var  ==  null  &&  isRemovableVar(n.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isRemovableVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isRemovableVar(n.getFirstChild()))  {	  if(var!=    null    &&    isRemovableVar(var.getFirstChild()))    {    	non-compiled	[CE]  	283	None	replace
108	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var.getFirstChild()))  {	  if(var!=    null    &&    isRemovableVar(var.getFirstChild()))    {    	non-compiled	[CE]  	283	None	replace
109	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  parent);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
110	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  continuations);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  continuations);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
111	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  scope,  continuations);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  scope,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  scope,  continuations);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
112	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  type);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  type);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
113	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  continues);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  continues);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  continues);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
114	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  subclassRelationship);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  subclassRelationship);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  subclassRelationship);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
115	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  extension);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  extension);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  extension);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
116	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  subclassDefiningCalls);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  subclassDefiningCalls);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  subclassDefiningCalls);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
117	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  subclassRelationships);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  TraverseScope.traverse(compiler,  n,  subclassRelationships);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	TraverseScope.traverse(compiler,  n,  subclassRelationships);	  TraverseScope.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	285	None	replace
118	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	48	None	replace
119	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	48	None	replace
120	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	48	None	replace
121	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  type  >=  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  type  >=  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var)||  type  >=  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	48	None	replace
122	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionPrototypeVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	48	None	replace
123	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n.getType()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n.getType()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getType()))    {    	non-compiled	[CE]  	43	None	replace
124	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var.getType()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getType()))    {    	non-compiled	[CE]  	43	None	replace
125	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild().getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild().getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild().getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getType()))    {    	non-compiled	[CE]  	43	None	replace
126	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var.getType()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionPrototypeVar(var.getType()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getType()))    {    	non-compiled	[CE]  	43	None	replace
127	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild().getType()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild().getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getFirstChild().getType()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getType()))    {    	non-compiled	[CE]  	43	None	replace
128	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getType())||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getType())||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getType())||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getType()))    {    	non-compiled	[CE]  	43	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	169	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkArgument(n!=  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n!=  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n!=  null  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	169	None	replace
131	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(n))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionDeclaration(n))  {	  if(var    ==    null    ||    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	226	None	replace
132	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(n))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(n))  {	  if(var    ==    null    ||    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	226	None	replace
133	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(var,  scope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionDeclaration(var,  scope))  {	  if(var    ==    null    ||    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	226	None	replace
134	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var,  scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(var,  scope))  {	  if(var    ==    null    ||    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	226	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkArgument(var  ==  null  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var  ==  null  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var  ==  null  ||  var.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(var!=    null    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	168	None	replace
136	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  type);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  type);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n);    	non-compiled	[CE]  	163	None	replace
137	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  parent);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n);    	non-compiled	[CE]  	163	None	replace
138	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n,  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n,  parent);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n);    	non-compiled	[CE]  	163	None	replace
139	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n,  type);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n,  type);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n);    	non-compiled	[CE]  	163	None	replace
140	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n  +  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n  +  1);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n);    	non-compiled	[CE]  	163	None	replace
141	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  nameNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  nameNode);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  nameNode);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n);    	non-compiled	[CE]  	163	None	replace
142	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n,  scope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n,  scope))  {	  if(var!=    null    &&    isFunctionExpressionVar(n))    {    	non-compiled	[CE]  	7	None	replace
143	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(n))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(n))  {	  if(var!=    null    &&    isFunctionExpressionVar(n))    {    	non-compiled	[CE]  	7	None	replace
144	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n.getFirstChild()))  {	  if(var!=    null    &&    isFunctionExpressionVar(n))    {    	non-compiled	[CE]  	7	None	replace
145	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(n))    {    	non-compiled	[CE]  	7	None	replace
146	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(n))    {    	non-compiled	[CE]  	7	None	replace
147	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(n))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionExpressionVar(n))  {	  if(var!=    null    &&    isFunctionExpressionVar(n))    {    	non-compiled	[CE]  	7	None	replace
148	[BUG]  [BUGGY]  Node  c  =  parent.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  parent.getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  parent.getParent();	  Node    c    =    n.getParent();    	non-compiled	[CE]  	122	None	replace
149	[BUG]  [BUGGY]  Node  c  =  scope.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  scope.getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getParent();	  Node    c    =    n.getParent();    	non-compiled	[CE]  	122	None	replace
150	[BUG]  [BUGGY]  Node  c  =  n.getPreviousChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  n.getPreviousChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  n.getPreviousChild();	  Node    c    =    n.getParent();    	non-compiled	[CE]  	122	None	replace
151	[BUG]  [BUGGY]  Node  c  =  parent.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  parent.getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  parent.getNext();	  Node    c    =    n.getParent();    	non-compiled	[CE]  	122	None	replace
152	[BUG]  [BUGGY]  Node  c  =  scope.getOwnerChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  scope.getOwnerChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getOwnerChild();	  Node    c    =    n.getOwnerChild();    	non-compiled	[CE]  	255	None	replace
153	[BUG]  [BUGGY]  Node  c  =  parent.getOwnerChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  parent.getOwnerChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  parent.getOwnerChild();	  Node    c    =    n.getOwnerChild();    	non-compiled	[CE]  	255	None	replace
154	[BUG]  [BUGGY]  Node  c  =  scope.getOwnerChild(n.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  scope.getOwnerChild(n.getFirstChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getOwnerChild(n.getFirstChild());	  Node    c    =    n.getOwnerChild();    	non-compiled	[CE]  	255	None	replace
155	[BUG]  [BUGGY]  Node  c  =  scope.getOwnerChild(n.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  scope.getOwnerChild(n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getOwnerChild(n.getLastChild());	  Node    c    =    n.getOwnerChild();    	non-compiled	[CE]  	255	None	replace
156	[BUG]  [BUGGY]  if(var  ==  null  ||  isVar(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isVar(var))  {	  if(var    ==    null    &&    isVar(var))    {    	non-compiled	[CE]  	228	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  modifiedVar,  referencedVars);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  modifiedVar,  referencedVars);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  modifiedVar,  referencedVars);	  NodeTraversal.traverse(compiler,    n,    referencedVars);    	non-compiled	[CE]  	223	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  referencedVars,  scope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  referencedVars,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  referencedVars,  scope);	  NodeTraversal.traverse(compiler,    n,    referencedVars);    	non-compiled	[CE]  	223	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  referencedVars);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  referencedVars);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent,  referencedVars);	  NodeTraversal.traverse(compiler,    n,    referencedVars);    	non-compiled	[CE]  	223	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  modifiedVar,  scope);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  modifiedVar,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  modifiedVar,  scope);	  NodeTraversal.traverse(compiler,    n,    referencedVars);    	non-compiled	[CE]  	223	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referencedVars,  n);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  referencedVars,  n);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  referencedVars,  n);	  NodeTraversal.traverse(compiler,    n,    referencedVars);    	non-compiled	[CE]  	223	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.referencedVars);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.referencedVars);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  this.referencedVars);	  NodeTraversal.traverse(compiler,    n,    referencedVars);    	non-compiled	[CE]  	223	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  parent,  scope));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  parent,  scope));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  parent,  scope));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    parent));    	non-compiled	[CE]  	221	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  new  Continuation(n,  parent));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  new  Continuation(n,  parent));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  continuations,  new  Continuation(n,  parent));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    parent));    	non-compiled	[CE]  	221	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls,  new  Continuation(n,  parent));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls,  new  Continuation(n,  parent));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls,  new  Continuation(n,  parent));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    parent));    	non-compiled	[CE]  	221	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  Continuation(n,  parent));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  Continuation(n,  parent));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  null,  new  Continuation(n,  parent));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    parent));    	non-compiled	[CE]  	221	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  new  Continuation(n,  parent));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  new  Continuation(n,  parent));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  scope,  new  Continuation(n,  parent));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    parent));    	non-compiled	[CE]  	221	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  Continuation(n,  scope));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  Continuation(n,  scope));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  Continuation(n,  scope));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    parent));    	non-compiled	[CE]  	221	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  type));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  type));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  new  Continuation(n,  type));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    parent));    	non-compiled	[CE]  	221	None	replace
170	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getFirstChild()))    {    	non-compiled	[CE]  	9	None	replace
171	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getFirstChild()))    {    	non-compiled	[CE]  	9	None	replace
172	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getLastChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.getLastChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.getLastChild()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getFirstChild()))    {    	non-compiled	[CE]  	9	None	replace
173	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(n.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpressionVar(n.getFirstChild()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getFirstChild()))    {    	non-compiled	[CE]  	9	None	replace
174	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionExpressionVar(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.getFirstChild()))    {    	non-compiled	[CE]  	9	None	replace
175	[BUG]  [BUGGY]  Node  c  =  scope.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  scope.getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getNext();	  Node    c    =    n.getNext();    	non-compiled	[CE]  	121	None	replace
176	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  n.getFirstChild().getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.getFirstChild().getNext();	  n    =    n.getNext();    	non-compiled	[CE]  	60	None	replace
177	[BUG]  [BUGGY]  n  =  scope.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getNext();	  n    =    n.getNext();    	non-compiled	[CE]  	60	None	replace
178	[BUG]  [BUGGY]  n  =  parent.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  parent.getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  parent.getNext();	  n    =    n.getNext();    	non-compiled	[CE]  	60	None	replace
179	[BUG]  [BUGGY]  n  =  n.getPrevious();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  n.getPrevious();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.getPrevious();	  n    =    n.getNext();    	non-compiled	[CE]  	60	None	replace
180	[BUG]  [BUGGY]  n  =  scope.getNextScope();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getNextScope();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getNextScope();	  n    =    n.getNext();    	non-compiled	[CE]  	60	None	replace
181	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var.getType()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var.getType()))  {	  if(var!=    null    &&    isPropertyAssign(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
182	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n.getType()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n.getType()))  {	  if(var!=    null    &&    isPropertyAssign(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
183	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getFirstChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getFirstChild().getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.getFirstChild().getString()))  {	  if(var!=    null    &&    isPropertyAssign(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
184	[BUG]  [BUGGY]  if(n!=  null  &&  isPropertyAssign(var.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isPropertyAssign(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isPropertyAssign(var.getType()))  {	  if(var!=    null    &&    isPropertyAssign(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
185	[BUG]  [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isPropertyAssign(var.getType()))  {	  if(var!=    null    &&    isPropertyAssign(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
186	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getClass()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getClass()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.getClass()))  {	  if(var!=    null    &&    isPropertyAssign(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
187	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getName()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.getName()))  {	  if(var!=    null    &&    isPropertyAssign(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  type  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  type  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    type    ==    Token.VAR);    	non-compiled	[CE]  	30	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  type  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  type  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    type    ==    Token.VAR);    	non-compiled	[CE]  	30	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type!=  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type!=  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    type    ==    Token.VAR);    	non-compiled	[CE]  	30	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR,  scope);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR,  scope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    type    ==    Token.VAR);    	non-compiled	[CE]  	30	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    type    ==    Token.VAR);    	non-compiled	[CE]  	30	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    type    ==    Token.VAR);    	non-compiled	[CE]  	30	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  type  ==  Token.FUNCTION);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  type  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  type  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    type    ==    Token.VAR);    	non-compiled	[CE]  	30	None	replace
195	[BUG]  [BUGGY]  if(var!=  null  ||  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	52	None	replace
196	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	52	None	replace
197	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	52	None	replace
198	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	52	None	replace
199	[BUG]  [BUGGY]  if(var  ==  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	52	None	replace
200	[BUG]  [BUGGY]  if(n!=  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	52	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
206	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType(),  type);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType(),  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType(),  type);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n.getType());    	non-compiled	[CE]  	161	None	replace
207	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType(),  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType(),  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType(),  parent);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n.getType());    	non-compiled	[CE]  	161	None	replace
208	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getParent());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getParent());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getParent());	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n.getType());    	non-compiled	[CE]  	161	None	replace
209	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getLastChild());	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n.getType());    	non-compiled	[CE]  	161	None	replace
210	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getPrefix());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getPrefix());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getPrefix());	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n.getType());    	non-compiled	[CE]  	161	None	replace
211	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType()  -  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType()  -  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType()  -  1);	  Assign    var    =    scope.getVar(n.getFirstChild().getString(),    n.getType());    	non-compiled	[CE]  	161	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  continue;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  continue;	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    continue;    }    	non-compiled	[CE]  	25	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	260	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	260	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	260	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	260	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	260	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	260	None	replace
219	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  n.getFirstChild().getFirstChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getFirstChild().getFirstChild();	  Node    var    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	17	None	replace
220	[BUG]  [BUGGY]  Node  var  =  scope.getFirstChild().getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getFirstChild().getLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getFirstChild().getLastChild();	  Node    var    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	17	None	replace
221	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getFirstChild().getLastChild());	  Node    var    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	17	None	replace
222	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild().getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  parent.getFirstChild().getLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getFirstChild().getLastChild();	  Node    var    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	17	None	replace
223	[BUG]  [BUGGY]  Constructor  <?>  c  =  n.getConstructor();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Constructor  <?>  c  =  n.getConstructor();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Constructor  <?>  c  =  n.getConstructor();	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	296	None	replace
224	[BUG]  [BUGGY]  parent.replaceChild(n,  var);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  parent.replaceChild(n,  var);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	parent.replaceChild(n,  var);	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	296	None	replace
225	[BUG]  [BUGGY]  Assign  var  =  node.getVar(n.getFirstChild().getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  node.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  node.getVar(n.getFirstChild().getString());	  Assign    var    =    parent.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	164	None	replace
226	[BUG]  [BUGGY]  Assign  var  =  nameNode.getVar(n.getFirstChild().getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  nameNode.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  nameNode.getVar(n.getFirstChild().getString());	  Assign    var    =    parent.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	164	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    return;    }    	non-compiled	[CE]  	151	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    return;    }    	non-compiled	[CE]  	151	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    return;    }    	non-compiled	[CE]  	151	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    return;    }    	non-compiled	[CE]  	151	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  return;  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    return;    }    	non-compiled	[CE]  	151	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    return;    }    	non-compiled	[CE]  	151	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||!NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||!NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||!NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    return;    }    	non-compiled	[CE]  	151	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type!=    Token.VAR    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	214	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type!=    Token.VAR    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	214	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type!=    Token.VAR    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	214	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type!=    Token.VAR    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	214	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type!=    Token.VAR    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	214	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type!=    Token.VAR    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	214	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent,  scope);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	86	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  type);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent,  type);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	86	None	replace
242	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  parent);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	86	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  subclassRelationship);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  subclassRelationship);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent,  subclassRelationship);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	86	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  continuations);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent,  continuations);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	86	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	86	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  parent,  node);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	86	None	replace
247	[BUG]  [BUGGY]  var  =  scope.getVar(n.getString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getString());	  var    =    scope.getVar(n.getFirstChild());    	non-compiled	[CE]  	19	None	replace
248	[BUG]  [BUGGY]  var  =  scope.getVar(n.getType());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getType());	  var    =    scope.getVar(n.getFirstChild());    	non-compiled	[CE]  	19	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION);    	non-compiled	[CE]  	106	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);	  Preconditions.checkState(type    ==    Token.FUNCTION);    	non-compiled	[CE]  	106	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);	  Preconditions.checkState(type    ==    Token.FUNCTION);    	non-compiled	[CE]  	106	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.NAME);	  Preconditions.checkState(type    ==    Token.FUNCTION);    	non-compiled	[CE]  	106	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION);    	non-compiled	[CE]  	106	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.CALL);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.CALL);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  type  ==  Token.CALL);	  Preconditions.checkState(type    ==    Token.FUNCTION);    	non-compiled	[CE]  	106	None	replace
255	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getString());	  Node    var    =    scope.getVar(n.getFirstChild());    	non-compiled	[CE]  	165	None	replace
256	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild(),  n.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild(),  n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getFirstChild(),  n.getLastChild());	  Node    var    =    scope.getVar(n.getFirstChild());    	non-compiled	[CE]  	165	None	replace
257	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild(),  n.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild(),  n.getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getFirstChild(),  n.getString());	  Node    var    =    scope.getVar(n.getFirstChild());    	non-compiled	[CE]  	165	None	replace
258	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getNext());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getNext());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getNext());	  Node    var    =    scope.getVar(n.getFirstChild());    	non-compiled	[CE]  	165	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	213	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	213	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	213	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(type  >=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  >=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  >=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	213	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	213	None	replace
264	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionExpressionVar(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionExpressionVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionExpressionVar(var))  {	  if(var    ==    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	11	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	3	None	replace
266	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	3	None	replace
267	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	3	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	3	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	3	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	3	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	3	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	3	None	replace
273	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n.getType()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(n.getType()))  {	  if(var!=    null    &&    isFunctionDeclaration(var.getType()))    {    	non-compiled	[CE]  	133	None	replace
274	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var.getType()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(var.getType()))  {	  if(var!=    null    &&    isFunctionDeclaration(var.getType()))    {    	non-compiled	[CE]  	133	None	replace
275	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var.getType()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionDeclaration(var.getType()))  {	  if(var!=    null    &&    isFunctionDeclaration(var.getType()))    {    	non-compiled	[CE]  	133	None	replace
276	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var.getFirstChild().getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var.getFirstChild().getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var.getFirstChild().getString()))  {	  if(var!=    null    &&    isFunctionDeclaration(var.getType()))    {    	non-compiled	[CE]  	133	None	replace
277	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(n.getType()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionDeclaration(n.getType()))  {	  if(var!=    null    &&    isFunctionDeclaration(var.getType()))    {    	non-compiled	[CE]  	133	None	replace
278	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionDeclaration(var.getType()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionDeclaration(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionDeclaration(var.getType()))  {	  if(var!=    null    &&    isFunctionDeclaration(var.getType()))    {    	non-compiled	[CE]  	133	None	replace
279	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var.getString()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var.getString()))  {	  if(var!=    null    &&    isFunctionDeclaration(var.getType()))    {    	non-compiled	[CE]  	133	None	replace
280	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(var.getType()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionDeclaration(var.getType()))  {	  if(var!=    null    &&    isFunctionDeclaration(var.getType()))    {    	non-compiled	[CE]  	133	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var    ==    null    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	68	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.getType()!=  Token.FUNCTION);	  Preconditions.checkState(var    ==    null    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	68	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var    ==    null    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	68	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var    ==    null    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	68	None	replace
285	[BUG]  [BUGGY]  if(v!=  null  &&  isFunctionPrototypeVar(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(v!=  null  &&  isFunctionPrototypeVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  isFunctionPrototypeVar(var))  {	  if(n!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	50	None	replace
286	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionPrototypeVar(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionPrototypeVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionPrototypeVar(var))  {	  if(n!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	50	None	replace
287	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(n))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionPrototypeVar(n))  {	  if(n!=    null    &&    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	50	None	replace
288	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  scope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  scope);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
289	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  scope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  parent,  scope);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
290	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  type);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  parent,  type);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
291	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  type);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  type);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
292	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  continuations);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  parent,  continuations);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
293	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  subclassRelationship);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  subclassRelationship);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  parent,  subclassRelationship);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
294	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  replication);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  replication);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  parent,  replication);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
295	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  defFinder);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  defFinder);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  parent,  defFinder);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
296	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  null);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Traversal.traverse(compiler,  n,  parent,  null);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	91	None	replace
297	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  parent))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var,  parent))  {	  if(var!=    null    &&    isPropertyAssign(var,    scope))    {    	non-compiled	[CE]  	37	None	replace
298	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var,  scope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var,  scope))  {	  if(var!=    null    &&    isPropertyAssign(var,    scope))    {    	non-compiled	[CE]  	37	None	replace
299	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  nameNode))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  nameNode))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var,  nameNode))  {	  if(var!=    null    &&    isPropertyAssign(var,    scope))    {    	non-compiled	[CE]  	37	None	replace
300	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n,  scope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n,  scope))  {	  if(var!=    null    &&    isPropertyAssign(var,    scope))    {    	non-compiled	[CE]  	37	None	replace
301	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  true))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var,  true))  {	  if(var!=    null    &&    isPropertyAssign(var,    scope))    {    	non-compiled	[CE]  	37	None	replace
302	[BUG]  [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var,  scope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isPropertyAssign(var,  scope))  {	  if(var!=    null    &&    isPropertyAssign(var,    scope))    {    	non-compiled	[CE]  	37	None	replace
303	[BUG]  [BUGGY]  if(n!=  null  &&  isPropertyAssign(var,  scope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isPropertyAssign(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isPropertyAssign(var,  scope))  {	  if(var!=    null    &&    isPropertyAssign(var,    scope))    {    	non-compiled	[CE]  	37	None	replace
304	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  parent))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var,  parent))  {	  if(var!=    null    &&    isFunctionAssign(var,    scope))    {    	non-compiled	[CE]  	76	None	replace
305	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var,  scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var,  scope))  {	  if(var!=    null    &&    isFunctionAssign(var,    scope))    {    	non-compiled	[CE]  	76	None	replace
306	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n,  scope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n,  scope))  {	  if(var!=    null    &&    isFunctionAssign(var,    scope))    {    	non-compiled	[CE]  	76	None	replace
307	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  nameNode))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  nameNode))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var,  nameNode))  {	  if(var!=    null    &&    isFunctionAssign(var,    scope))    {    	non-compiled	[CE]  	76	None	replace
308	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var,  scope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(var,  scope))  {	  if(var!=    null    &&    isFunctionAssign(var,    scope))    {    	non-compiled	[CE]  	76	None	replace
309	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var,  parent))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(var,  parent))  {	  if(var!=    null    &&    isFunctionAssign(var,    scope))    {    	non-compiled	[CE]  	76	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(variables!=  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(variables!=  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(variables!=  null  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(variables!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	235	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(variables  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(variables  ==  null  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(variables  ==  null  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(variables!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	235	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(variables  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(variables  ==  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(variables  ==  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(variables!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	235	None	replace
313	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var.getString()))  {	  if(var!=    null    &&    isDefinedVar(var.getString()))    {    	non-compiled	[CE]  	190	None	replace
314	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(n.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(n.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(n.getString()))  {	  if(var!=    null    &&    isDefinedVar(var.getString()))    {    	non-compiled	[CE]  	190	None	replace
315	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getString())||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getString())||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getString())||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var.getString()))    {    	non-compiled	[CE]  	190	None	replace
316	[BUG]  [BUGGY]  if(n!=  null  &&  isDefinedVar(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isDefinedVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isDefinedVar(var.getString()))  {	  if(var!=    null    &&    isDefinedVar(var.getString()))    {    	non-compiled	[CE]  	190	None	replace
317	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getString())||  isPropertyAssign(var.getType()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getString())||  isPropertyAssign(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getString())||  isPropertyAssign(var.getType()))  {	  if(var!=    null    &&    isDefinedVar(var.getString()))    {    	non-compiled	[CE]  	190	None	replace
318	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getString()  +  1))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getString()  +  1))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getString()  +  1))  {	  if(var!=    null    &&    isDefinedVar(var.getString()))    {    	non-compiled	[CE]  	190	None	replace
319	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild().getVar(n.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  parent.getFirstChild().getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getFirstChild().getVar(n.getFirstChild().getString());	  Node    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	14	None	replace
320	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getString()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getString()  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getFirstChild().getString()  +  1);	  Node    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	14	None	replace
321	[BUG]  [BUGGY]  Node  var  =  scope.getVar(parent.getFirstChild().getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(parent.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(parent.getFirstChild().getString());	  Node    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	14	None	replace
322	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getFirstChild().getString(),  n.getType());	  Node    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	14	None	replace
323	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getString(),  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getFirstChild().getString(),  n);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getFirstChild().getString(),  n);	  Node    var    =    scope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	14	None	replace
324	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n,  parent))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(n,  parent))  {	  if(var!=    null    &&    isFunctionDeclaration(n,    scope))    {    	non-compiled	[CE]  	131	None	replace
325	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(n,  scope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(n,  scope))  {	  if(var!=    null    &&    isFunctionDeclaration(n,    scope))    {    	non-compiled	[CE]  	131	None	replace
326	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(n,  parent))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(n,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionDeclaration(n,  parent))  {	  if(var!=    null    &&    isFunctionDeclaration(n,    scope))    {    	non-compiled	[CE]  	131	None	replace
327	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(n,  scope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionDeclaration(n,  scope))  {	  if(var!=    null    &&    isFunctionDeclaration(n,    scope))    {    	non-compiled	[CE]  	131	None	replace
328	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionDeclaration(n,  scope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionDeclaration(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionDeclaration(n,  scope))  {	  if(var!=    null    &&    isFunctionDeclaration(n,    scope))    {    	non-compiled	[CE]  	131	None	replace
329	[BUG]  [BUGGY]  if(v!=  null  &&  isFunctionDeclaration(n,  parent))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(v!=  null  &&  isFunctionDeclaration(n,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  isFunctionDeclaration(n,  parent))  {	  if(var!=    null    &&    isFunctionDeclaration(n,    scope))    {    	non-compiled	[CE]  	131	None	replace
330	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(n,  scope))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionDeclaration(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionDeclaration(n,  scope))  {	  if(var!=    null    &&    isFunctionDeclaration(n,    scope))    {    	non-compiled	[CE]  	131	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	298	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  ';'  expected	298	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType()  ==  Token.	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	298	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkState(var.getType	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  ';'  expected	298	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkS  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkS  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  Preconditions.checkS	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	298	None	replace
336	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n.getFirstChild()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getFirstChild()))    {    	non-compiled	[CE]  	47	None	replace
337	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getFirstChild()))    {    	non-compiled	[CE]  	47	None	replace
338	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getFirstChild()))    {    	non-compiled	[CE]  	47	None	replace
339	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(n.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionPrototypeVar(n.getFirstChild()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getFirstChild()))    {    	non-compiled	[CE]  	47	None	replace
340	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getLastChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getLastChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getLastChild()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getFirstChild()))    {    	non-compiled	[CE]  	47	None	replace
341	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionPrototypeVar(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getFirstChild()))    {    	non-compiled	[CE]  	47	None	replace
342	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getFirstChild().getString());	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	250	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getFirstChild().getString());	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	250	None	replace
344	[BUG]  [BUGGY]  n  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getVar(n.getLastChild().getString());	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	250	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	28	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	28	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	28	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	28	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	28	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	28	None	replace
351	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	240	None	replace
352	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	240	None	replace
353	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	240	None	replace
354	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	240	None	replace
355	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getType()))  {	  if(var!=    null    &&    isFunctionAssign(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	240	None	replace
356	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  continuations.get(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  continuations.get(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)||  continuations.get(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	240	None	replace
357	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	240	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isFunctionDeclaration());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isFunctionDeclaration());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.isFunctionDeclaration());	  Preconditions.checkState(var!=    null    &&    var.isFunctionDeclaration());    	non-compiled	[CE]  	193	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.isFunctionDeclaration());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  var.isFunctionDeclaration());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.isFunctionDeclaration());	  Preconditions.checkState(var!=    null    &&    var.isFunctionDeclaration());    	non-compiled	[CE]  	193	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.isFunctionDeclaration());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.isFunctionDeclaration());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  n.isFunctionDeclaration());	  Preconditions.checkState(var!=    null    &&    var.isFunctionDeclaration());    	non-compiled	[CE]  	193	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isConstructor());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isConstructor());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.isConstructor());	  Preconditions.checkState(var!=    null    &&    var.isFunctionDeclaration());    	non-compiled	[CE]  	193	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  var.isFunctionDeclaration());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null  &&  var.isFunctionDeclaration());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null  &&  var.isFunctionDeclaration());	  Preconditions.checkState(var!=    null    &&    var.isFunctionDeclaration());    	non-compiled	[CE]  	193	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.isFunctionDeclaration());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.isFunctionDeclaration());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.isFunctionDeclaration());	  Preconditions.checkState(var!=    null    &&    var.isFunctionDeclaration());    	non-compiled	[CE]  	193	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.isFunctionDeclaration());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.isFunctionDeclaration());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  var.isFunctionDeclaration());	  Preconditions.checkState(var!=    null    &&    var.isFunctionDeclaration());    	non-compiled	[CE]  	193	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.isFunctionDeclaration());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.isFunctionDeclaration());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.isFunctionDeclaration());	  Preconditions.checkState(var!=    null    &&    var.isFunctionDeclaration());    	non-compiled	[CE]  	193	None	replace
366	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n,  type))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n,  type))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    type))    {    	non-compiled	[CE]  	310	None	replace
367	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var,  type))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var,  type))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    type))    {    	non-compiled	[CE]  	310	None	replace
368	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  nameNode))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  nameNode))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var,  nameNode))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    type))    {    	non-compiled	[CE]  	310	None	replace
369	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  parent))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var,  parent))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    type))    {    	non-compiled	[CE]  	310	None	replace
370	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var,  type))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionExpressionVar(var,  type))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    type))    {    	non-compiled	[CE]  	310	None	replace
371	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(var,  type))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionExpressionVar(var,  type))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    type))    {    	non-compiled	[CE]  	310	None	replace
372	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  className))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  className))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var,  className))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    type))    {    	non-compiled	[CE]  	310	None	replace
373	[BUG]  [BUGGY]  n  =  scope.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getParent();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  	59	None	replace
374	[BUG]  [BUGGY]  n  =  scope.getNumberOfChildren();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getNumberOfChildren();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getNumberOfChildren();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  	59	None	replace
375	[BUG]  [BUGGY]  n  =  scope.getLocalPart();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getLocalPart();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getLocalPart();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  	59	None	replace
376	[BUG]  [BUGGY]  n  =  scope.getNumberOfFunctions();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getNumberOfFunctions();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getNumberOfFunctions();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  	59	None	replace
377	[BUG]  [BUGGY]  n  =  scope.getNumberOfScopes();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getNumberOfScopes();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getNumberOfScopes();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  	59	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	153	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	153	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	153	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
382	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  scope);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	153	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	153	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	153	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	153	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	153	None	replace
387	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	195	None	replace
388	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	195	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	195	None	replace
390	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	195	None	replace
391	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var.name))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var.name))  {	  if(var!=    null    &&    isPropertyAssign(var.name))    {    	non-compiled	[CE]  	270	None	replace
392	[BUG]  [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var.name))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isPropertyAssign(var.name))  {	  if(var!=    null    &&    isPropertyAssign(var.name))    {    	non-compiled	[CE]  	270	None	replace
393	[BUG]  [BUGGY]  if(n!=  null  &&  isPropertyAssign(var.name))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isPropertyAssign(var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isPropertyAssign(var.name))  {	  if(var!=    null    &&    isPropertyAssign(var.name))    {    	non-compiled	[CE]  	270	None	replace
394	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n.name))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n.name))  {	  if(var!=    null    &&    isPropertyAssign(var.name))    {    	non-compiled	[CE]  	270	None	replace
395	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.name,  type))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.name,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.name,  type))  {	  if(var!=    null    &&    isPropertyAssign(var.name))    {    	non-compiled	[CE]  	270	None	replace
396	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n,  var.name))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n,  var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n,  var.name))  {	  if(var!=    null    &&    isPropertyAssign(var.name))    {    	non-compiled	[CE]  	270	None	replace
397	[BUG]  [BUGGY]  if(v!=  null  &&  isPropertyAssign(var.name))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(v!=  null  &&  isPropertyAssign(var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  isPropertyAssign(var.name))  {	  if(var!=    null    &&    isPropertyAssign(var.name))    {    	non-compiled	[CE]  	270	None	replace
398	[BUG]  [BUGGY]  Assign  var  =  nameNode.getVar(n.getLastChild().getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  nameNode.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  nameNode.getVar(n.getLastChild().getString());	  Assign    var    =    type.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	238	None	replace
399	[BUG]  [BUGGY]  Assign  var  =  module.getVar(n.getLastChild().getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  module.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  module.getVar(n.getLastChild().getString());	  Assign    var    =    type.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	238	None	replace
400	[BUG]  [BUGGY]  n  =  parent.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  parent.getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  parent.getParent();	  n    =    n.getParent();    	non-compiled	[CE]  	63	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	95	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	95	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	95	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	95	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	95	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  continue;  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	95	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	95	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	95	None	replace
409	[BUG]  [BUGGY]  n  =  NodeUtil.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  NodeUtil.getLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  NodeUtil.getLastChild();	  n    =    parent.getLastChild();    	non-compiled	[CE]  	71	None	replace
410	[BUG]  [BUGGY]  n  =  NodeUtil.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  NodeUtil.getFirstChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  NodeUtil.getFirstChild();	  n    =    parent.getLastChild();    	non-compiled	[CE]  	71	None	replace
411	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	140	None	replace
412	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	140	None	replace
413	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getType())||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getType())||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getType())||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	140	None	replace
414	[BUG]  [BUGGY]  if(var  ==  null  ||  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	140	None	replace
415	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  type  >=  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  type  >=  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  type  >=  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	140	None	replace
416	[BUG]  [BUGGY]  if(n!=  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isDefinedVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	140	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  new  Continuation(n,  scope));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  new  Continuation(n,  scope));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  continuations,  new  Continuation(n,  scope));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    scope));    	non-compiled	[CE]  	219	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls,  new  Continuation(n,  scope));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls,  new  Continuation(n,  scope));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls,  new  Continuation(n,  scope));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    scope));    	non-compiled	[CE]  	219	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  Continuation(n,  scope));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  Continuation(n,  scope));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  null,  new  Continuation(n,  scope));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    scope));    	non-compiled	[CE]  	219	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  true,  new  Continuation(n,  scope));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  true,  new  Continuation(n,  scope));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  true,  new  Continuation(n,  scope));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    scope));    	non-compiled	[CE]  	219	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  scope));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  scope));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  continuations,  scope));	  NodeTraversal.traverse(compiler,    n,    new    Continuation(n,    scope));    	non-compiled	[CE]  	219	None	replace
422	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	230	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	230	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	230	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	230	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  replications,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  replications,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  replications,  scope);	  NodeTraversal.traverse(compiler,    n,    replications);    	non-compiled	[CE]  	220	None	replace
427	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  subclassDefiningCalls);	  NodeTraversal.traverse(compiler,    n,    replications);    	non-compiled	[CE]  	220	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassRelationships);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassRelationships);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  subclassRelationships);	  NodeTraversal.traverse(compiler,    n,    replications);    	non-compiled	[CE]  	220	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  replications);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  replications);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  null,  replications);	  NodeTraversal.traverse(compiler,    n,    replications);    	non-compiled	[CE]  	220	None	replace
430	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  replications);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  replications);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  replications);	  NodeTraversal.traverse(compiler,    n,    replications);    	non-compiled	[CE]  	220	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	152	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  continue;  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	152	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	152	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||!NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||!NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||!NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    continue;    }    	non-compiled	[CE]  	152	None	replace
435	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpression(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionExpression(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpression(var))  {	  if(var!=    null    ||    isFunctionExpression(var))    {    	non-compiled	[CE]  	227	None	replace
436	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpression(n))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpression(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpression(n))  {	  if(var!=    null    ||    isFunctionExpression(var))    {    	non-compiled	[CE]  	227	None	replace
437	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpression(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpression(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpression(var.getType()))  {	  if(var!=    null    ||    isFunctionExpression(var))    {    	non-compiled	[CE]  	227	None	replace
438	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionExpression(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionExpression(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionExpression(var))  {	  if(var!=    null    ||    isFunctionExpression(var))    {    	non-compiled	[CE]  	227	None	replace
439	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpression(var,  scope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpression(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpression(var,  scope))  {	  if(var!=    null    ||    isFunctionExpression(var))    {    	non-compiled	[CE]  	227	None	replace
440	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpression(var)&&  continuations.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpression(var)&&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpression(var)&&  continuations.contains(var))  {	  if(var!=    null    ||    isFunctionExpression(var))    {    	non-compiled	[CE]  	227	None	replace
441	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  nameNode))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  nameNode))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  nameNode))  {	  if(var!=    null    &&    isDefinedVar(var,    type))    {    	non-compiled	[CE]  	142	None	replace
442	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  className))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  className))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  className))  {	  if(var!=    null    &&    isDefinedVar(var,    type))    {    	non-compiled	[CE]  	142	None	replace
443	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  parent))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  parent))  {	  if(var!=    null    &&    isDefinedVar(var,    type))    {    	non-compiled	[CE]  	142	None	replace
444	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var,  type))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var,  type))  {	  if(var!=    null    &&    isDefinedVar(var,    type))    {    	non-compiled	[CE]  	142	None	replace
445	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  n))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  n))  {	  if(var!=    null    &&    isDefinedVar(var,    type))    {    	non-compiled	[CE]  	142	None	replace
446	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  type,  scope))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  type,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  type,  scope))  {	  if(var!=    null    &&    isDefinedVar(var,    type))    {    	non-compiled	[CE]  	142	None	replace
447	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(n,  type))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(n,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(n,  type))  {	  if(var!=    null    &&    isDefinedVar(var,    type))    {    	non-compiled	[CE]  	142	None	replace
448	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  nameNode.getString()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  nameNode.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  nameNode.getString()))  {	  if(var!=    null    &&    isDefinedVar(var,    type))    {    	non-compiled	[CE]  	142	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  ||  var.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(var    ==    null    &&    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	210	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(var    ==    null    &&    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	210	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  var.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(var    ==    null    &&    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	210	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(var    ==    null    &&    var.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	210	None	replace
453	[BUG]  [BUGGY]  Node  n  =  scope.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  scope.getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  scope.getParent();	  Node    n    =    scope.getLastChild();    	non-compiled	[CE]  	83	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	251	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	251	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	251	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  ';'  expected	251	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	251	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	251	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  else  {  traverseFunction(n,  parent	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getFirstChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  ';'  expected	251	None	replace
461	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	258	None	replace
462	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	258	None	replace
463	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	258	None	replace
464	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	258	None	replace
465	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	258	None	replace
466	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionPrototypeVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	258	None	replace
467	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
468	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
469	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionExpressionVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
470	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  type  >=  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  type  >=  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)||  type  >=  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
471	[BUG]  [BUGGY]  if(var!=  null  &&  isExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isExpressionVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isExpressionVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	10	None	replace
472	[BUG]  [BUGGY]  Assign  var  =  node.getVar(n.getLastChild().getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  node.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  node.getVar(n.getLastChild().getString());	  Assign    var    =    parent.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	239	None	replace
473	[BUG]  [BUGGY]  if(var!=  null  ||  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isImmutableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
474	[BUG]  [BUGGY]  if(var!=  null  &&  isImmutableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isImmutableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isImmutableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isImmutableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
475	[BUG]  [BUGGY]  if(var!=  null  &&  isImmutableVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isImmutableVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isImmutableVar(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isImmutableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
476	[BUG]  [BUGGY]  if(var  ==  null  &&  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isImmutableVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isImmutableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
477	[BUG]  [BUGGY]  if(var!=  null  &&  isImmutableVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isImmutableVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isImmutableVar(n)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isImmutableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
478	[BUG]  [BUGGY]  var  =  scope.getVar(n.getFirstChild(),  n.getNext());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getFirstChild(),  n.getNext());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getFirstChild(),  n.getNext());	  var    =    scope.getVar(n.getLastChild(),    n.getNext());    	non-compiled	[CE]  	24	None	replace
479	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getParent());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getParent());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n.getParent());	  var    =    scope.getVar(n.getLastChild(),    n.getNext());    	non-compiled	[CE]  	24	None	replace
480	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getNext()  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n.getNext()  -  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n.getNext()  -  1);	  var    =    scope.getVar(n.getLastChild(),    n.getNext());    	non-compiled	[CE]  	24	None	replace
481	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getFirstChild(),  n.getNext());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getFirstChild(),  n.getNext());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getFirstChild(),  n.getNext());	  var    =    scope.getVar(n.getLastChild(),    n.getNext());    	non-compiled	[CE]  	24	None	replace
482	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(n))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionDeclaration(n))  {	  if(var    ==    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	224	None	replace
483	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  scope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  continuations,  scope);	  NodeTraversal.traverse(compiler,    n,    scope,    continuations);    	non-compiled	[CE]  	90	None	replace
484	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  type);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  continuations,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  continuations,  type);	  NodeTraversal.traverse(compiler,    n,    scope,    continuations);    	non-compiled	[CE]  	90	None	replace
485	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  type,  continuations);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  type,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  type,  continuations);	  NodeTraversal.traverse(compiler,    n,    scope,    continuations);    	non-compiled	[CE]  	90	None	replace
486	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  subclassRelationships);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  subclassRelationships);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  scope,  subclassRelationships);	  NodeTraversal.traverse(compiler,    n,    scope,    continuations);    	non-compiled	[CE]  	90	None	replace
487	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  modifiedVars);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  modifiedVars);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  scope,  modifiedVars);	  NodeTraversal.traverse(compiler,    n,    scope,    continuations);    	non-compiled	[CE]  	90	None	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  provider,  continuations);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  provider,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  provider,  continuations);	  NodeTraversal.traverse(compiler,    n,    scope,    continuations);    	non-compiled	[CE]  	90	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  continuations,  type);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  continuations,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  scope,  continuations,  type);	  NodeTraversal.traverse(compiler,    n,    scope,    continuations);    	non-compiled	[CE]  	90	None	replace
490	[BUG]  [BUGGY]  if(var!=  null  ||  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    scope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	54	None	replace
491	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    scope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	54	None	replace
492	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    scope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	54	None	replace
493	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    scope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	54	None	replace
494	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    scope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	54	None	replace
495	[BUG]  [BUGGY]  if(var  ==  null  &&  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isRemovableVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isRemovableVar(var)||    scope.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	54	None	replace
496	[BUG]  [BUGGY]  Node  c  =  node.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  node.getLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  node.getLastChild();	  Node    c    =    node.getFirstChild();    	non-compiled	[CE]  	123	None	replace
497	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n.getType()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n.getType()))  {	  if(var!=    null    &&    isFunctionAssign(var.getType()))    {    	non-compiled	[CE]  	74	None	replace
498	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var.getType()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var.getType()))  {	  if(var!=    null    &&    isFunctionAssign(var.getType()))    {    	non-compiled	[CE]  	74	None	replace
499	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionAssign(var.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionAssign(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionAssign(var.getType()))  {	  if(var!=    null    &&    isFunctionAssign(var.getType()))    {    	non-compiled	[CE]  	74	None	replace
500	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.getFirstChild().getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.getFirstChild().getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var.getFirstChild().getString()))  {	  if(var!=    null    &&    isFunctionAssign(var.getType()))    {    	non-compiled	[CE]  	74	None	replace
501	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var.getType()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(var.getType()))  {	  if(var!=    null    &&    isFunctionAssign(var.getType()))    {    	non-compiled	[CE]  	74	None	replace
502	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var.getType()))    {    	non-compiled	[CE]  	74	None	replace
503	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.getFirstChild().getType()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var.getFirstChild().getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var.getFirstChild().getType()))  {	  if(var!=    null    &&    isFunctionAssign(var.getType()))    {    	non-compiled	[CE]  	74	None	replace
504	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLastChild());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild());    	non-compiled	[CE]  	115	None	replace
505	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent.getFirstChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent.getFirstChild());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild());    	non-compiled	[CE]  	115	None	replace
506	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLocalPart());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLocalPart());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLocalPart());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild());    	non-compiled	[CE]  	115	None	replace
507	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(scope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(scope))  {	  if(var!=    null    &&    isVar(var.scope))    {    	non-compiled	[CE]  	263	None	replace
508	[BUG]  [BUGGY]  if(var!=  null  ||  isVar(var.scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isVar(var.scope))  {	  if(var!=    null    &&    isVar(var.scope))    {    	non-compiled	[CE]  	263	None	replace
509	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n.scope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(n.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n.scope))  {	  if(var!=    null    &&    isVar(var.scope))    {    	non-compiled	[CE]  	263	None	replace
510	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(fnScope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(fnScope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(fnScope))  {	  if(var!=    null    &&    isVar(var.scope))    {    	non-compiled	[CE]  	263	None	replace
511	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n.getFirstChild()))  {	  if(var!=    null    &&    isVar(var.scope))    {    	non-compiled	[CE]  	263	None	replace
512	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n,  scope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n,  scope))  {	  if(var!=    null    &&    isVar(var.scope))    {    	non-compiled	[CE]  	263	None	replace
513	[BUG]  [BUGGY]  if(scope!=  null  &&  isVar(var.scope))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isVar(var.scope))  {	  if(var!=    null    &&    isVar(var.scope))    {    	non-compiled	[CE]  	263	None	replace
514	[BUG]  [BUGGY]  Node  c  =  scope.getCurrentNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  scope.getCurrentNode();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getCurrentNode();	  Node    c    =    scope.getFirstChild();    	non-compiled	[CE]  	120	None	replace
515	[BUG]  [BUGGY]  Node  c  =  scope.getCurrentScope();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  scope.getCurrentScope();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  scope.getCurrentScope();	  Node    c    =    scope.getFirstChild();    	non-compiled	[CE]  	120	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	252	None	replace
517	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  var  =  scope.getVar(n.getLastChild().getString());	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	252	None	replace
518	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  parent);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n);    	non-compiled	[CE]  	113	None	replace
519	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  type);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  type);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n);    	non-compiled	[CE]  	113	None	replace
520	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n);    	non-compiled	[CE]  	113	None	replace
521	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  type);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  type);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n);    	non-compiled	[CE]  	113	None	replace
522	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n  +  1);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n);    	non-compiled	[CE]  	113	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	297	None	replace
524	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	297	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	297	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }  else  {  traverseFunction(n,  scope);  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	297	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	297	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild());	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	297	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }  else  {  traverseFunction(n,  scope);  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	297	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	229	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  ';'  expected	229	None	replace
532	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	229	None	replace
533	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  ';'  expected	229	None	replace
534	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	175	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  var  =  scope.getVar(n.getFirstChild().getString());	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	175	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild().getString());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getFirstChild().getString());    }    	non-compiled	[CE]  	175	None	replace
537	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isExpressionNode(n));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isExpressionNode(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isExpressionNode(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  	178	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  	178	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(n));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  	178	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  	178	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionExpression(n));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionExpression(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionExpression(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  	178	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	110	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	110	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.NAME  ||  var!=  null  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.NAME  ||  var!=  null  &&  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.NAME  ||  var!=  null  &&  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	110	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	110	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	110	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	110	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	110	None	replace
549	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.NAME  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.NAME  &&  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.NAME  &&  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.NAME);    	non-compiled	[CE]  	110	None	replace
550	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var,  type))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var,  type))  {	  if(var!=    null    &&    isPropertyAssign(var,    type))    {    	non-compiled	[CE]  	41	None	replace
551	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n,  type))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n,  type))  {	  if(var!=    null    &&    isPropertyAssign(var,    type))    {    	non-compiled	[CE]  	41	None	replace
552	[BUG]  [BUGGY]  if(n!=  null  &&  isPropertyAssign(var,  type))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isPropertyAssign(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isPropertyAssign(var,  type))  {	  if(var!=    null    &&    isPropertyAssign(var,    type))    {    	non-compiled	[CE]  	41	None	replace
553	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  className))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var,  className))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var,  className))  {	  if(var!=    null    &&    isPropertyAssign(var,    type))    {    	non-compiled	[CE]  	41	None	replace
554	[BUG]  [BUGGY]  if(scope!=  null  &&  isPropertyAssign(var,  type))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isPropertyAssign(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isPropertyAssign(var,  type))  {	  if(var!=    null    &&    isPropertyAssign(var,    type))    {    	non-compiled	[CE]  	41	None	replace
555	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var)&&  continuations.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var)&&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(var)&&  continuations.contains(var))  {	  if(var!=    null    ||    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	130	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  null  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var    ==    null    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	103	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()!=  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()!=  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.getType()!=  Token.VAR);	  Preconditions.checkState(var    ==    null    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	103	None	replace
558	[BUG]  [BUGGY]  Preconditions.checkState(variable  ==  null  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(variable  ==  null  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(variable  ==  null  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var    ==    null    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	103	None	replace
559	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var    ==    null    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	103	None	replace
560	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild().getVar(n.getLastChild().getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  parent.getFirstChild().getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getFirstChild().getVar(n.getLastChild().getString());	  Node    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	166	None	replace
561	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getString()  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getString()  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild().getString()  +  1);	  Node    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	166	None	replace
562	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getString(),  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getString(),  n);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild().getString(),  n);	  Node    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	166	None	replace
563	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());	  Node    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	166	None	replace
564	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());	  Node    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	166	None	replace
565	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	259	None	replace
566	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	259	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	259	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	259	None	replace
569	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	259	None	replace
570	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	259	None	replace
571	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	259	None	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.type  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.type  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.type  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    &&    var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	259	None	replace
573	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var.getString()))    {    	non-compiled	[CE]  	187	None	replace
574	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var.getString()))    {    	non-compiled	[CE]  	187	None	replace
575	[BUG]  [BUGGY]  if(n!=  null  &&  isPropertyAssign(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isPropertyAssign(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isPropertyAssign(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var.getString()))    {    	non-compiled	[CE]  	187	None	replace
576	[BUG]  [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isPropertyAssign(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isPropertyAssign(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var.getString()))    {    	non-compiled	[CE]  	187	None	replace
577	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getString())||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getString())||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.getString())||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isPropertyAssign(var.getString()))    {    	non-compiled	[CE]  	187	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.VAR    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	278	None	replace
579	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  }	  if(n.getType()    ==    Token.VAR    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	278	None	replace
580	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.VAR    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	278	None	replace
581	[BUG]  [BUGGY]  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.VAR    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	278	None	replace
582	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.VAR    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	278	None	replace
583	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.VAR    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	278	None	replace
584	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.VAR  &&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.VAR    ||    n.getFirstChild().getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	278	None	replace
585	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	185	None	replace
586	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	185	None	replace
587	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getType()))  {	  if(var!=    null    &&    isFunctionVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	185	None	replace
588	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(n)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(n)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(n)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	185	None	replace
589	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  continuations.get(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  continuations.get(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)||  continuations.get(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	185	None	replace
590	[BUG]  [BUGGY]  if(var!=  null  ||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	185	None	replace
591	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getClass()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getClass()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)||  continuations.containsKey(var.getClass()))  {	  if(var!=    null    &&    isFunctionVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	185	None	replace
592	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  scope,  continuations);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  scope,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  scope,  continuations);	  Context.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	88	None	replace
593	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  type);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  type);	  Context.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	88	None	replace
594	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  continuations);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  continuations);	  Context.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	88	None	replace
595	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  scope,  subclassRelationship);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  scope,  subclassRelationship);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  scope,  subclassRelationship);	  Context.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	88	None	replace
596	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  currentScope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  currentScope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  currentScope);	  Context.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	88	None	replace
597	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  this);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  this);	  Context.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	88	None	replace
598	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  extension);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  extension);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  extension);	  Context.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	88	None	replace
599	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  continues);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.traverse(compiler,  n,  continues);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.traverse(compiler,  n,  continues);	  Context.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	88	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	65	None	replace
601	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	65	None	replace
602	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n!=    null    &&    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	65	None	replace
603	[BUG]  [BUGGY]  Node  var  =  scope.getFirstChild().getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getFirstChild().getString();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getFirstChild().getString();	  Node    var    =    scope.getFirstChild().getNext();    	non-compiled	[CE]  	15	None	replace
604	[BUG]  [BUGGY]  Node  var  =  node.getFirstChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  node.getFirstChild().getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  node.getFirstChild().getNext();	  Node    var    =    scope.getFirstChild().getNext();    	non-compiled	[CE]  	15	None	replace
605	[BUG]  [BUGGY]  Node  var  =  scope.getFirstChild().getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getFirstChild().getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getFirstChild().getParent();	  Node    var    =    scope.getFirstChild().getNext();    	non-compiled	[CE]  	15	None	replace
606	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var)&&  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(var)&&  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var)&&  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)&&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	264	None	replace
607	[BUG]  [BUGGY]  if(var!=  null  ||  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)&&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	264	None	replace
608	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n)&&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(n)&&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n)&&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)&&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	264	None	replace
609	[BUG]  [BUGGY]  if(n!=  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)&&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	264	None	replace
610	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)&&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)&&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	264	None	replace
611	[BUG]  [BUGGY]  if(var  ==  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isVar(var)&&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)&&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	264	None	replace
612	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var)&&  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(var)&&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var)&&  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)&&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	264	None	replace
613	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  parent))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var,  parent))  {	  if(var!=    null    &&    isFunctionVar(var,    scope))    {    	non-compiled	[CE]  	275	None	replace
614	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var,  scope))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var,  scope))  {	  if(var!=    null    &&    isFunctionVar(var,    scope))    {    	non-compiled	[CE]  	275	None	replace
615	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(n,  scope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(n,  scope))  {	  if(var!=    null    &&    isFunctionVar(var,    scope))    {    	non-compiled	[CE]  	275	None	replace
616	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  fnScope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  fnScope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var,  fnScope))  {	  if(var!=    null    &&    isFunctionVar(var,    scope))    {    	non-compiled	[CE]  	275	None	replace
617	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  type))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var,  type))  {	  if(var!=    null    &&    isFunctionVar(var,    scope))    {    	non-compiled	[CE]  	275	None	replace
618	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  nameNode))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  nameNode))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var,  nameNode))  {	  if(var!=    null    &&    isFunctionVar(var,    scope))    {    	non-compiled	[CE]  	275	None	replace
619	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  scope)||  continuations.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var,  scope)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var,  scope)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionVar(var,    scope))    {    	non-compiled	[CE]  	275	None	replace
620	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionVar(var,  scope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionVar(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionVar(var,  scope))  {	  if(var!=    null    &&    isFunctionVar(var,    scope))    {    	non-compiled	[CE]  	275	None	replace
621	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(n!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	99	None	replace
622	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	99	None	replace
623	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(n!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	99	None	replace
624	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(parent!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(parent!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(n!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	99	None	replace
625	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(n))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(n))  {	  if(var!=    null    ||    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	45	None	replace
626	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var)&&  continuations.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var)&&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var)&&  continuations.contains(var))  {	  if(var!=    null    ||    isFunctionPrototypeVar(var))    {    	non-compiled	[CE]  	45	None	replace
627	[BUG]  [BUGGY]  Node  n  =  nameNode.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  nameNode.getLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  nameNode.getLastChild();	  Node    n    =    nameNode.getFirstChild();    	non-compiled	[CE]  	236	None	replace
628	[BUG]  [BUGGY]  if(var!=  null  ||  isRemovableVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isRemovableVar(var)&&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isRemovableVar(var)&&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    ||    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	51	None	replace
629	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    ||    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	51	None	replace
630	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    ||    isRemovableVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	51	None	replace
631	[BUG]  [BUGGY]  if(n!=  null  &&  continuations.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  continuations.contains(var))  {	  if(var!=    null    &&    continuations.contains(var))    {    	non-compiled	[CE]  	300	None	replace
632	[BUG]  [BUGGY]  if(var!=  null  ||  continuations.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  continuations.contains(var))  {	  if(var!=    null    &&    continuations.contains(var))    {    	non-compiled	[CE]  	300	None	replace
633	[BUG]  [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  continuations.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations.contains(var)||  continuations.contains(var))  {	  if(var!=    null    &&    continuations.contains(var))    {    	non-compiled	[CE]  	300	None	replace
634	[BUG]  [BUGGY]  if(v!=  null  &&  continuations.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(v!=  null  &&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  continuations.contains(var))  {	  if(var!=    null    &&    continuations.contains(var))    {    	non-compiled	[CE]  	300	None	replace
635	[BUG]  [BUGGY]  if(continuations!=  null  &&  continuations.contains(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(continuations!=  null  &&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(continuations!=  null  &&  continuations.contains(var))  {	  if(var!=    null    &&    continuations.contains(var))    {    	non-compiled	[CE]  	300	None	replace
636	[BUG]  [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations.contains(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    continuations.contains(var))    {    	non-compiled	[CE]  	300	None	replace
637	[BUG]  [BUGGY]  if(var  ==  null  &&  continuations.contains(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  continuations.contains(var))  {	  if(var!=    null    &&    continuations.contains(var))    {    	non-compiled	[CE]  	300	None	replace
638	[BUG]  [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  continuations.put(var,  new  Continuation(n,  scope));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  continuations.contains(var)||  continuations.put(var,  new  Continuation(n,  scope));  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations.contains(var)||  continuations.put(var,  new  Continuation(n,  scope));	  if(var!=    null    &&    continuations.contains(var))    {    	non-compiled	[CE]  	300	None	replace
639	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isFunctionDeclaration(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isFunctionDeclaration(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign  &&  isFunctionDeclaration(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	304	None	replace
640	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isRemovableVar(var.getType()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isRemovableVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign  &&  isRemovableVar(var.getType()))  {	  if(var!=    null    &&    isPropertyAssign    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	304	None	replace
641	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isFunctionVar(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isFunctionVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign  &&  isFunctionVar(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	304	None	replace
642	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign  &&  isRemovableVar(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign  &&  isRemovableVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign  &&  isRemovableVar(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	304	None	replace
643	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isFunctionExpressionVar(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isFunctionExpressionVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign  &&  isFunctionExpressionVar(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	304	None	replace
644	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isVar(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign  &&  isVar(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	304	None	replace
645	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isImmutableVar(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isImmutableVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign  &&  isImmutableVar(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	304	None	replace
646	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isConstructorVar(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  isConstructorVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign  &&  isConstructorVar(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    isRemovableVar(var))    {    	non-compiled	[CE]  	304	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.VAR    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	261	None	replace
648	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  parent))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var,  parent))  {	  if(var!=    null    &&    isFunctionDeclaration(var,    scope))    {    	non-compiled	[CE]  	132	None	replace
649	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  type))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var,  type))  {	  if(var!=    null    &&    isFunctionDeclaration(var,    scope))    {    	non-compiled	[CE]  	132	None	replace
650	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  nameNode))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  nameNode))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var,  nameNode))  {	  if(var!=    null    &&    isFunctionDeclaration(var,    scope))    {    	non-compiled	[CE]  	132	None	replace
651	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  scope)||  continuations.contains(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  scope)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var,  scope)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionDeclaration(var,    scope))    {    	non-compiled	[CE]  	132	None	replace
652	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var,  scope))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionDeclaration(var,  scope))  {	  if(var!=    null    &&    isFunctionDeclaration(var,    scope))    {    	non-compiled	[CE]  	132	None	replace
653	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  scope),  continuations)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var,  scope),  continuations)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var,  scope),  continuations)  {	  if(var!=    null    &&    isFunctionDeclaration(var,    scope))    {    	non-compiled	[CE]  	132	None	replace
654	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	183	None	replace
655	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	183	None	replace
656	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	183	None	replace
657	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	183	None	replace
658	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	183	None	replace
659	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	183	None	replace
660	[BUG]  [BUGGY]  if(var!=  null  &&  isExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isExpressionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	183	None	replace
661	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	291	None	replace
662	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	291	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	291	None	replace
664	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.ASSIGN);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	291	None	replace
665	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	291	None	replace
666	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.NAME);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  type  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	291	None	replace
667	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	291	None	replace
668	[BUG]  [BUGGY]  if(continuations!=  null  &&  isFunctionDeclaration(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(continuations!=  null  &&  isFunctionDeclaration(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(continuations!=  null  &&  isFunctionDeclaration(var))  {	  if(scope!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	136	None	replace
669	[BUG]  [BUGGY]  if(fnScope!=  null  &&  isFunctionDeclaration(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(fnScope!=  null  &&  isFunctionDeclaration(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(fnScope!=  null  &&  isFunctionDeclaration(var))  {	  if(scope!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	136	None	replace
670	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionDeclaration(n))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionDeclaration(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionDeclaration(n))  {	  if(scope!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	136	None	replace
671	[BUG]  [BUGGY]  if(v!=  null  &&  isFunctionDeclaration(var))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(v!=  null  &&  isFunctionDeclaration(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  isFunctionDeclaration(var))  {	  if(scope!=    null    &&    isFunctionDeclaration(var))    {    	non-compiled	[CE]  	136	None	replace
672	[BUG]  [BUGGY]  n  =  scope.getInitializingChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getInitializingChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getInitializingChild();	  n    =    scope.getLastChild();    	non-compiled	[CE]  	62	None	replace
673	[BUG]  [BUGGY]  n  =  scope.getNumberOfSeconds();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getNumberOfSeconds();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getNumberOfSeconds();	  n    =    scope.getLastChild();    	non-compiled	[CE]  	62	None	replace
674	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var.scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var.scope))  {	  if(var!=    null    &&    isDefinedVar(var.scope))    {    	non-compiled	[CE]  	191	None	replace
675	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(var.scope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinedVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(var.scope))  {	  if(var!=    null    &&    isDefinedVar(var.scope))    {    	non-compiled	[CE]  	191	None	replace
676	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(scope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(scope))  {	  if(var!=    null    &&    isDefinedVar(var.scope))    {    	non-compiled	[CE]  	191	None	replace
677	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(n.scope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(n.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(n.scope))  {	  if(var!=    null    &&    isDefinedVar(var.scope))    {    	non-compiled	[CE]  	191	None	replace
678	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(n,  scope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(n,  scope))  {	  if(var!=    null    &&    isDefinedVar(var.scope))    {    	non-compiled	[CE]  	191	None	replace
679	[BUG]  [BUGGY]  if(scope!=  null  &&  isDefinedVar(var.scope))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isDefinedVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isDefinedVar(var.scope))  {	  if(var!=    null    &&    isDefinedVar(var.scope))    {    	non-compiled	[CE]  	191	None	replace
680	[BUG]  [BUGGY]  if(n!=  null  &&  isDefinedVar(var.scope))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isDefinedVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isDefinedVar(var.scope))  {	  if(var!=    null    &&    isDefinedVar(var.scope))    {    	non-compiled	[CE]  	191	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	176	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	176	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	176	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	176	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  type);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  type);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	176	None	replace
686	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  parent.getNext();	  Node    n    =    n.getNext();    	non-compiled	[CE]  	85	None	replace
687	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  parent.getParent();	  Node    n    =    n.getNext();    	non-compiled	[CE]  	85	None	replace
688	[BUG]  [BUGGY]  Node  n  =  scope.getNextScope();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  scope.getNextScope();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  scope.getNextScope();	  Node    n    =    n.getNext();    	non-compiled	[CE]  	85	None	replace
689	[BUG]  [BUGGY]  Node  n  =  n.getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  n.getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  n.getParent();	  Node    n    =    n.getNext();    	non-compiled	[CE]  	85	None	replace
690	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(fnScope!=  null);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(fnScope!=  null);	  Preconditions.checkState(scope!=    null);    	non-compiled	[CE]  	109	None	replace
691	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(scope!=    null);    	non-compiled	[CE]  	109	None	replace
692	[BUG]  [BUGGY]  Preconditions.checkState(scope  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope  ==  null);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope  ==  null);	  Preconditions.checkState(scope!=    null);    	non-compiled	[CE]  	109	None	replace
693	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  null);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null);	  Preconditions.checkState(scope!=    null);    	non-compiled	[CE]  	109	None	replace
694	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  scope.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null  &&  scope.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null  &&  scope.getType()  ==  Token.VAR);	  Preconditions.checkState(scope!=    null);    	non-compiled	[CE]  	109	None	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  scope.isFunctionDeclaration());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null  &&  scope.isFunctionDeclaration());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null  &&  scope.isFunctionDeclaration());	  Preconditions.checkState(scope!=    null);    	non-compiled	[CE]  	109	None	replace
696	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	306	None	replace
697	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  var.getType()!=  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	306	None	replace
698	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	306	None	replace
699	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	306	None	replace
700	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.VAR);    	non-compiled	[CE]  	32	None	replace
701	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.VAR);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.VAR);    	non-compiled	[CE]  	32	None	replace
702	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.VAR);    	non-compiled	[CE]  	32	None	replace
703	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.VAR);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.VAR);    	non-compiled	[CE]  	32	None	replace
704	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.VAR);    	non-compiled	[CE]  	32	None	replace
705	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.VAR);    	non-compiled	[CE]  	32	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.VAR);    	non-compiled	[CE]  	32	None	replace
707	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.VAR);    	non-compiled	[CE]  	32	None	replace
708	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	205	None	replace
709	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	205	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	205	None	replace
711	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	205	None	replace
712	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  ';'  expected	205	None	replace
713	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(n,  scope);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	205	None	replace
714	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  else  {  traverseFunction(	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	205	None	replace
715	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  false))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  false))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  false))  {	  if(var!=    null    &&    isDefinedVar(var,    true))    {    	non-compiled	[CE]  	144	None	replace
716	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var,  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var,  true))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var,  true))  {	  if(var!=    null    &&    isDefinedVar(var,    true))    {    	non-compiled	[CE]  	144	None	replace
717	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(var,  false))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinedVar(var,  false))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(var,  false))  {	  if(var!=    null    &&    isDefinedVar(var,    true))    {    	non-compiled	[CE]  	144	None	replace
718	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  false)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  false)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  false)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var,    true))    {    	non-compiled	[CE]  	144	None	replace
719	[BUG]  [BUGGY]  if(v!=  null  &&  isDefinedVar(var,  false))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(v!=  null  &&  isDefinedVar(var,  false))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  isDefinedVar(var,  false))  {	  if(var!=    null    &&    isDefinedVar(var,    true))    {    	non-compiled	[CE]  	144	None	replace
720	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(n,  true))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(n,  true))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(n,  true))  {	  if(var!=    null    &&    isDefinedVar(var,    true))    {    	non-compiled	[CE]  	144	None	replace
721	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  true)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  true)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  true)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var,    true))    {    	non-compiled	[CE]  	144	None	replace
722	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null,  var.type  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null,  var.type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null,  var.type  ==  Token.VAR);	  Preconditions.checkState(var!=    null,    var.type    ==    Token.VAR);    	non-compiled	[CE]  	248	None	replace
723	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null,  type  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null,  type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null,  type  ==  Token.VAR);	  Preconditions.checkState(var!=    null,    var.type    ==    Token.VAR);    	non-compiled	[CE]  	248	None	replace
724	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null,  var.type  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null,  var.type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null,  var.type  ==  Token.VAR);	  Preconditions.checkState(var!=    null,    var.type    ==    Token.VAR);    	non-compiled	[CE]  	248	None	replace
725	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.type  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.type  ==  Token.VAR);	  Preconditions.checkState(var!=    null,    var.type    ==    Token.VAR);    	non-compiled	[CE]  	248	None	replace
726	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null,  var.type  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null,  var.type  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null,  var.type  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null,    var.type    ==    Token.VAR);    	non-compiled	[CE]  	248	None	replace
727	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null,  var.type  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null,  var.type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null,  var.type  ==  Token.VAR);	  Preconditions.checkState(var!=    null,    var.type    ==    Token.VAR);    	non-compiled	[CE]  	248	None	replace
728	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null,  var.type  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  null,  var.type  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null,  var.type  ==  Token.VAR);	  Preconditions.checkState(var!=    null,    var.type    ==    Token.VAR);    	non-compiled	[CE]  	248	None	replace
729	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null,  var.type  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null,  var.type  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null,  var.type  ==  Token.NAME);	  Preconditions.checkState(var!=    null,    var.type    ==    Token.VAR);    	non-compiled	[CE]  	248	None	replace
730	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpression(n))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpression(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpression(n))  {	  if(var!=    null    &&    isFunctionExpression(var))    {    	non-compiled	[CE]  	159	None	replace
731	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpression(var.getType()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpression(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpression(var.getType()))  {	  if(var!=    null    &&    isFunctionExpression(var))    {    	non-compiled	[CE]  	159	None	replace
732	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpression(n,  scope))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpression(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpression(n,  scope))  {	  if(var!=    null    &&    isFunctionExpression(var))    {    	non-compiled	[CE]  	159	None	replace
733	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpression(var,  scope))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpression(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpression(var,  scope))  {	  if(var!=    null    &&    isFunctionExpression(var))    {    	non-compiled	[CE]  	159	None	replace
734	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionExpression(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionExpression(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionExpression(var))  {	  if(var!=    null    &&    isFunctionExpression(var))    {    	non-compiled	[CE]  	159	None	replace
735	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpression(var.getFirstChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpression(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpression(var.getFirstChild()))  {	  if(var!=    null    &&    isFunctionExpression(var))    {    	non-compiled	[CE]  	159	None	replace
736	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  fnScope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  fnScope);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    fnScope);    	non-compiled	[CE]  	237	None	replace
737	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope,  type);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope,  type);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    fnScope);    	non-compiled	[CE]  	237	None	replace
738	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope,  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  fnScope,  parent);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    fnScope);    	non-compiled	[CE]  	237	None	replace
739	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  fnScope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n,  fnScope);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    fnScope);    	non-compiled	[CE]  	237	None	replace
740	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  c);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  c);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  c);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    fnScope);    	non-compiled	[CE]  	237	None	replace
741	[BUG]  [BUGGY]  Node  c  =  parent.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  c  =  parent.getLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  c  =  parent.getLastChild();	  Node    c    =    scope.getLastChild();    	non-compiled	[CE]  	124	None	replace
742	[BUG]  [BUGGY]  Assign  var  =  this.module.getVar(n.getFirstChild().getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  this.module.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  this.module.getVar(n.getFirstChild().getString());	  Assign    var    =    module.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	294	None	replace
743	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	212	None	replace
744	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	212	None	replace
745	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION  ||  n!=  null  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	212	None	replace
746	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	212	None	replace
747	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	212	None	replace
748	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  &&  var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	212	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  n!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	212	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkState(n!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  Token.FUNCTION  ||  var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.FUNCTION    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	212	None	replace
751	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n.getFirstChild()))  {	  if(var!=    null    &&    isPropertyAssign(var.getFirstChild()))    {    	non-compiled	[CE]  	42	None	replace
752	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.getLastChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.getLastChild()))  {	  if(var!=    null    &&    isPropertyAssign(var.getFirstChild()))    {    	non-compiled	[CE]  	42	None	replace
753	[BUG]  [BUGGY]  if(n!=  null  &&  isPropertyAssign(var.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isPropertyAssign(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isPropertyAssign(var.getFirstChild()))  {	  if(var!=    null    &&    isPropertyAssign(var.getFirstChild()))    {    	non-compiled	[CE]  	42	None	replace
754	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var.getFirstChild()))  {	  if(var!=    null    &&    isPropertyAssign(var.getFirstChild()))    {    	non-compiled	[CE]  	42	None	replace
755	[BUG]  [BUGGY]  if(var  ==  null  &&  isPropertyAssign(n.getFirstChild()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isPropertyAssign(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isPropertyAssign(n.getFirstChild()))  {	  if(var!=    null    &&    isPropertyAssign(var.getFirstChild()))    {    	non-compiled	[CE]  	42	None	replace
756	[BUG]  [BUGGY]  if(n  ==  null  &&  isPropertyAssign(var.getFirstChild()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n  ==  null  &&  isPropertyAssign(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n  ==  null  &&  isPropertyAssign(var.getFirstChild()))  {	  if(var!=    null    &&    isPropertyAssign(var.getFirstChild()))    {    	non-compiled	[CE]  	42	None	replace
757	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	286	None	replace
758	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	286	None	replace
759	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	286	None	replace
760	[BUG]  [BUGGY]  if(var!=  null  &&  continuations  ==  null  &&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  continuations  ==  null  &&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  continuations  ==  null  &&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	286	None	replace
761	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var,  scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var,  scope))  {	  if(var!=    null    ||    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	6	None	replace
762	[BUG]  [BUGGY]  if(v!=  null  &&  isFunctionExpressionVar(var))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(v!=  null  &&  isFunctionExpressionVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  isFunctionExpressionVar(var))  {	  if(n!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	12	None	replace
763	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionExpressionVar(var))  {	  if(n!=    null    &&    isFunctionExpressionVar(var))    {    	non-compiled	[CE]  	12	None	replace
764	[BUG]  [BUGGY]  if(var  ==  null  ||  isDefinedVar(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isDefinedVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isDefinedVar(var))  {	  if(var    ==    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	143	None	replace
765	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(var.getType()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinedVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(var.getType()))  {	  if(var    ==    null    &&    isDefinedVar(var))    {    	non-compiled	[CE]  	143	None	replace
766	[BUG]  [BUGGY]  Assign  var  =  this.fnScope.getVar(n.getLastChild().getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  this.fnScope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  this.fnScope.getVar(n.getLastChild().getString());	  Assign    var    =    this.fnScope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	293	None	replace
767	[BUG]  [BUGGY]  Assign  var  =  getFunctionScope().getVar(n.getFirstChild().getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  getFunctionScope().getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  getFunctionScope().getVar(n.getFirstChild().getString());	  Assign    var    =    this.fnScope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	293	None	replace
768	[BUG]  [BUGGY]  Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString(),  type);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString(),  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString(),  type);	  Assign    var    =    this.fnScope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	293	None	replace
769	[BUG]  [BUGGY]  Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString()  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString()  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  this.fnScope.getVar(n.getFirstChild().getString()  +  1);	  Assign    var    =    this.fnScope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	293	None	replace
770	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinableVar(var.getType()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinableVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinableVar(var.getType()))  {	  if(var!=    null    &&    isDefinableVar(var))    {    	non-compiled	[CE]  	305	None	replace
771	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinableVar(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinableVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinableVar(var))  {	  if(var!=    null    &&    isDefinableVar(var))    {    	non-compiled	[CE]  	305	None	replace
772	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinableVar(var,  scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinableVar(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinableVar(var,  scope))  {	  if(var!=    null    &&    isDefinableVar(var))    {    	non-compiled	[CE]  	305	None	replace
773	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinableVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinableVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinableVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinableVar(var))    {    	non-compiled	[CE]  	305	None	replace
774	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinableVar(n))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinableVar(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinableVar(n))  {	  if(var!=    null    &&    isDefinableVar(var))    {    	non-compiled	[CE]  	305	None	replace
775	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinableVar(var.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinableVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinableVar(var.getFirstChild()))  {	  if(var!=    null    &&    isDefinableVar(var))    {    	non-compiled	[CE]  	305	None	replace
776	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinableVar(var,  type))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinableVar(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinableVar(var,  type))  {	  if(var!=    null    &&    isDefinableVar(var))    {    	non-compiled	[CE]  	305	None	replace
777	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinableVar(var))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinableVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinableVar(var))  {	  if(var!=    null    &&    isDefinableVar(var))    {    	non-compiled	[CE]  	305	None	replace
778	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n,  type))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n,  type))  {	  if(var!=    null    &&    isFunctionAssign(var,    type))    {    	non-compiled	[CE]  	287	None	replace
779	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var,  type))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var,  type))  {	  if(var!=    null    &&    isFunctionAssign(var,    type))    {    	non-compiled	[CE]  	287	None	replace
780	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionAssign(var,  type))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionAssign(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionAssign(var,  type))  {	  if(var!=    null    &&    isFunctionAssign(var,    type))    {    	non-compiled	[CE]  	287	None	replace
781	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  type,  scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var,  type,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var,  type,  scope))  {	  if(var!=    null    &&    isFunctionAssign(var,    type))    {    	non-compiled	[CE]  	287	None	replace
782	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionAssign(var,  type))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionAssign(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionAssign(var,  type))  {	  if(var!=    null    &&    isFunctionAssign(var,    type))    {    	non-compiled	[CE]  	287	None	replace
783	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	257	None	replace
784	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  scope.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  scope.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)||  scope.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	257	None	replace
785	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	257	None	replace
786	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	257	None	replace
787	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	257	None	replace
788	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionAssign(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	257	None	replace
789	[BUG]  [BUGGY]  Node  var  =  scope.getParent();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getParent();	  Node    var    =    scope.getFirstChild();    	non-compiled	[CE]  	145	None	replace
790	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.NAME)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	277	None	replace
791	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.NAME)  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }	  if(n.getType()    ==    Token.NAME)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	277	None	replace
792	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());	  if(n.getType()    ==    Token.NAME)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	277	None	replace
793	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Context.checkState(n.getType()  ==  Token.NAME);  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.NAME)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	277	None	replace
794	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionAssign(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionAssign(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionAssign(var))  {	  if(var!=    null    ||    isFunctionAssign(var))    {    	non-compiled	[CE]  	73	None	replace
795	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(n))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(n))  {	  if(var!=    null    ||    isFunctionAssign(var))    {    	non-compiled	[CE]  	73	None	replace
796	[BUG]  [BUGGY]  n  =  n.removeLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  n.removeLastChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.removeLastChild();	  n    =    n.removeFirstChild();    	non-compiled	[CE]  	241	None	replace
797	[BUG]  [BUGGY]  n  =  parent.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  parent.removeFirstChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  parent.removeFirstChild();	  n    =    n.removeFirstChild();    	non-compiled	[CE]  	241	None	replace
798	[BUG]  [BUGGY]  n  =  scope.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.removeFirstChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.removeFirstChild();	  n    =    n.removeFirstChild();    	non-compiled	[CE]  	241	None	replace
799	[BUG]  [BUGGY]  if(var!=  null  ||  isRemovableVar(var.getType()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isRemovableVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isRemovableVar(var.getType()))  {	  if(var!=    null    &&    isRemovableVar(var.getType()))    {    	non-compiled	[CE]  	279	None	replace
800	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(n.getType()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isRemovableVar(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(n.getType()))  {	  if(var!=    null    &&    isRemovableVar(var.getType()))    {    	non-compiled	[CE]  	279	None	replace
801	[BUG]  [BUGGY]  if(n!=  null  &&  isRemovableVar(var.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isRemovableVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isRemovableVar(var.getType()))  {	  if(var!=    null    &&    isRemovableVar(var.getType()))    {    	non-compiled	[CE]  	279	None	replace
802	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	29	None	replace
803	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	29	None	replace
804	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	29	None	replace
805	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	29	None	replace
806	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(N.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(N.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(N.getFirstChild().getString());	  Assign    var    =    scope.getVar(n.getFirstChild().getString()    +    1);    	non-compiled	[CE]  	160	None	replace
807	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  continue;  }	  var    =    scope.getVar(n.getFirstChild().getString());    continue;    	non-compiled	[CE]  	2	None	replace
808	[BUG]  [BUGGY]  if(var!=  null  ||  isVar(n))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isVar(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isVar(n))  {	  if(var!=    null    &&    isVar(n))    {    	non-compiled	[CE]  	158	None	replace
809	[BUG]  [BUGGY]  if(n!=  null  &&  isVar(var))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isVar(var))  {	  if(var!=    null    &&    isVar(n))    {    	non-compiled	[CE]  	158	None	replace
810	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n.getNext()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(n.getNext()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n.getNext()))  {	  if(var!=    null    &&    isVar(n))    {    	non-compiled	[CE]  	158	None	replace
811	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(n)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(n))    {    	non-compiled	[CE]  	158	None	replace
812	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n.getName()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n.getName()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n.getName()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getName()))    {    	non-compiled	[CE]  	267	None	replace
813	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var.getName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var.getName()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var.getName()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getName()))    {    	non-compiled	[CE]  	267	None	replace
814	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getQualifiedName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getQualifiedName()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getQualifiedName()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getName()))    {    	non-compiled	[CE]  	267	None	replace
815	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getClass()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getClass()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getClass()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getName()))    {    	non-compiled	[CE]  	267	None	replace
816	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getLocalName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getLocalName()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getLocalName()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getName()))    {    	non-compiled	[CE]  	267	None	replace
817	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	265	None	replace
818	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	265	None	replace
819	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	265	None	replace
820	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.get(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.get(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var)&&  continuations.get(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	265	None	replace
821	[BUG]  [BUGGY]  if(var!=  null  ||  isRemovableVar(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isRemovableVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isRemovableVar(var.getString()))  {	  if(var!=    null    &&    isRemovableVar(var.getString()))    {    	non-compiled	[CE]  	282	None	replace
822	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(n.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isRemovableVar(n.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(n.getString()))  {	  if(var!=    null    &&    isRemovableVar(var.getString()))    {    	non-compiled	[CE]  	282	None	replace
823	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var.getString()))  {	  if(var!=    null    &&    isRemovableVar(var.getString()))    {    	non-compiled	[CE]  	282	None	replace
824	[BUG]  [BUGGY]  if(n!=  null  &&  isRemovableVar(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isRemovableVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isRemovableVar(var.getString()))  {	  if(var!=    null    &&    isRemovableVar(var.getString()))    {    	non-compiled	[CE]  	282	None	replace
825	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var.getString()))  {	  if(var!=    null    &&    isRemovableVar(var.getString()))    {    	non-compiled	[CE]  	282	None	replace
826	[BUG]  [BUGGY]  n  =  n.getLastChild().getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  n.getLastChild().getString();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.getLastChild().getString();	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	1	None	replace
827	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var.scope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var.scope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.scope))    {    	non-compiled	[CE]  	311	None	replace
828	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.scope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n.scope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.scope))    {    	non-compiled	[CE]  	311	None	replace
829	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(scope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(scope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.scope))    {    	non-compiled	[CE]  	311	None	replace
830	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(fnScope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(fnScope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(fnScope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.scope))    {    	non-compiled	[CE]  	311	None	replace
831	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(var.scope))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionExpressionVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionExpressionVar(var.scope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.scope))    {    	non-compiled	[CE]  	311	None	replace
832	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var.scope))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpressionVar(var.scope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.scope))    {    	non-compiled	[CE]  	311	None	replace
833	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.name))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n.name))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.name))    {    	non-compiled	[CE]  	312	None	replace
834	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var.name))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var.name))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.name))    {    	non-compiled	[CE]  	312	None	replace
835	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var.name))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionExpressionVar(var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionExpressionVar(var.name))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.name))    {    	non-compiled	[CE]  	312	None	replace
836	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.name,  type))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.name,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.name,  type))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.name))    {    	non-compiled	[CE]  	312	None	replace
837	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n,  var.name))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n,  var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n,  var.name))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.name))    {    	non-compiled	[CE]  	312	None	replace
838	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var.name))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var.name))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionExpressionVar(var.name))  {	  if(var!=    null    &&    isFunctionExpressionVar(var.name))    {    	non-compiled	[CE]  	312	None	replace
839	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.name)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var.name)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var.name)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionExpressionVar(var.name))    {    	non-compiled	[CE]  	312	None	replace
840	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isFunction());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.isFunction());	  Preconditions.checkState(var!=    null    &&    var.isFunction());    	non-compiled	[CE]  	247	None	replace
841	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  var.isFunction());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.isFunction());	  Preconditions.checkState(var!=    null    &&    var.isFunction());    	non-compiled	[CE]  	247	None	replace
842	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.isFunction());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.isFunction());	  Preconditions.checkState(var!=    null    &&    var.isFunction());    	non-compiled	[CE]  	247	None	replace
843	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.isFunction());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  var.isFunction());	  Preconditions.checkState(var!=    null    &&    var.isFunction());    	non-compiled	[CE]  	247	None	replace
844	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.isFunction());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.isFunction());	  Preconditions.checkState(var!=    null    &&    var.isFunction());    	non-compiled	[CE]  	247	None	replace
845	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var.getType()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var.getType()))  {	  if(var!=    null    ||    isFunctionVar(var))    {    	non-compiled	[CE]  	126	None	replace
846	[BUG]  [BUGGY]  if(var  ==  null  ||  isFunctionVar(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isFunctionVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isFunctionVar(var))  {	  if(var!=    null    ||    isFunctionVar(var))    {    	non-compiled	[CE]  	126	None	replace
847	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(n))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(n))  {	  if(var!=    null    ||    isFunctionVar(var))    {    	non-compiled	[CE]  	126	None	replace
848	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var)&&  continuations.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(var)&&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var)&&  continuations.contains(var))  {	  if(var!=    null    ||    isFunctionVar(var))    {    	non-compiled	[CE]  	126	None	replace
849	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    ||    isFunctionVar(var))    {    	non-compiled	[CE]  	126	None	replace
850	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(n.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(n.getFirstChild()))  {	  if(var!=    null    &&    isDefinedVar(var.getFirstChild()))    {    	non-compiled	[CE]  	141	None	replace
851	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getLastChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getLastChild()))  {	  if(var!=    null    &&    isDefinedVar(var.getFirstChild()))    {    	non-compiled	[CE]  	141	None	replace
852	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var.getFirstChild()))  {	  if(var!=    null    &&    isDefinedVar(var.getFirstChild()))    {    	non-compiled	[CE]  	141	None	replace
853	[BUG]  [BUGGY]  if(n!=  null  &&  isDefinedVar(var.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isDefinedVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isDefinedVar(var.getFirstChild()))  {	  if(var!=    null    &&    isDefinedVar(var.getFirstChild()))    {    	non-compiled	[CE]  	141	None	replace
854	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(n.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinedVar(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(n.getFirstChild()))  {	  if(var!=    null    &&    isDefinedVar(var.getFirstChild()))    {    	non-compiled	[CE]  	141	None	replace
855	[BUG]  [BUGGY]  if(scope!=  null  &&  isDefinedVar(var.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isDefinedVar(var.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isDefinedVar(var.getFirstChild()))  {	  if(var!=    null    &&    isDefinedVar(var.getFirstChild()))    {    	non-compiled	[CE]  	141	None	replace
856	[BUG]  [BUGGY]  if(var!=  null  ||  isVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	157	None	replace
857	[BUG]  [BUGGY]  if(var  ==  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	157	None	replace
858	[BUG]  [BUGGY]  if(var  ==  null  ||  isVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	157	None	replace
859	[BUG]  [BUGGY]  if(n!=  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isVar(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	157	None	replace
860	[BUG]  [BUGGY]  if(var  ==  null  ||  isPropertyAssign(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  ||  isPropertyAssign(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  ||  isPropertyAssign(var))  {	  if(var    ==    null    &&    isPropertyAssign(var))    {    	non-compiled	[CE]  	39	None	replace
861	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(n.getFirstChild().getString());	  Assign    var    =    scope.getVar(parent.getFirstChild().getString());    	non-compiled	[CE]  	162	None	replace
862	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(parent.getFirstChild().getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(parent.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Assign  var  =  scope.getVar(parent.getFirstChild().getString());	  Assign    var    =    scope.getVar(parent.getFirstChild().getString());    	non-compiled	[CE]  	162	None	replace
863	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  fnScope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  fnScope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var,  fnScope))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    scope))    {    	non-compiled	[CE]  	8	None	replace
864	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  true))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var,  true))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    scope))    {    	non-compiled	[CE]  	8	None	replace
865	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  scope)||  continuations.contains(var))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var,  scope)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var,  scope)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionExpressionVar(var,    scope))    {    	non-compiled	[CE]  	8	None	replace
866	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(n,  scope))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionAssign(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(n,  scope))  {	  if(var!=    null    &&    isFunctionAssign(n))    {    	non-compiled	[CE]  	75	None	replace
867	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n,  parent))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n,  parent))  {	  if(var!=    null    &&    isFunctionAssign(n))    {    	non-compiled	[CE]  	75	None	replace
868	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n.getFirstChild()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n.getFirstChild()))  {	  if(var!=    null    &&    isFunctionAssign(n))    {    	non-compiled	[CE]  	75	None	replace
869	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var.getType()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var.getType()))  {	  if(var!=    null    &&    isDefinedVar(var.getType()))    {    	non-compiled	[CE]  	137	None	replace
870	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(n.getType()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(n.getType()))  {	  if(var!=    null    &&    isDefinedVar(var.getType()))    {    	non-compiled	[CE]  	137	None	replace
871	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getFirstChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getFirstChild().getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getFirstChild().getString()))  {	  if(var!=    null    &&    isDefinedVar(var.getType()))    {    	non-compiled	[CE]  	137	None	replace
872	[BUG]  [BUGGY]  if(n!=  null  &&  isDefinedVar(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isDefinedVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isDefinedVar(var.getType()))  {	  if(var!=    null    &&    isDefinedVar(var.getType()))    {    	non-compiled	[CE]  	137	None	replace
873	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getFirstChild().getType()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var.getFirstChild().getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var.getFirstChild().getType()))  {	  if(var!=    null    &&    isDefinedVar(var.getType()))    {    	non-compiled	[CE]  	137	None	replace
874	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString(),  n.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString(),  n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getNext().getString(),  n.getLastChild());	  Assign    var    =    scope.getVar(n.getNext().getString());    	non-compiled	[CE]  	198	None	replace
875	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getPreviousChild().getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getPreviousChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getPreviousChild().getString());	  Assign    var    =    scope.getVar(n.getNext().getString());    	non-compiled	[CE]  	198	None	replace
876	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getNextChild().getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getNextChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getNextChild().getString());	  Assign    var    =    scope.getVar(n.getNext().getString());    	non-compiled	[CE]  	198	None	replace
877	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString(),  n.getFirstChild().getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString(),  n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getNext().getString(),  n.getFirstChild().getString());	  Assign    var    =    scope.getVar(n.getNext().getString());    	non-compiled	[CE]  	198	None	replace
878	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString(),  n.getType());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString(),  n.getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getNext().getString(),  n.getType());	  Assign    var    =    scope.getVar(n.getNext().getString());    	non-compiled	[CE]  	198	None	replace
879	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString(),  n.getChildCount());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getString(),  n.getChildCount());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getNext().getString(),  n.getChildCount());	  Assign    var    =    scope.getVar(n.getNext().getString());    	non-compiled	[CE]  	198	None	replace
880	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	204	None	replace
881	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	204	None	replace
882	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVar(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isVar(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isVar(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	204	None	replace
883	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	204	None	replace
884	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	204	None	replace
885	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild());  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	204	None	replace
886	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild());  }	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	204	None	replace
887	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChil  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChil  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChil	  if(NodeUtil.isFunctionDeclaration(n)||    NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  ';'  expected	204	None	replace
888	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var)&&  continuations.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var)&&  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var)&&  continuations.contains(var))  {	  if(var!=    null    ||    isPropertyAssign(var))    {    	non-compiled	[CE]  	36	None	replace
889	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getString()))    {    	non-compiled	[CE]  	232	None	replace
890	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getString()))    {    	non-compiled	[CE]  	232	None	replace
891	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getString())||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var.getString())||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var.getString())||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getString()))    {    	non-compiled	[CE]  	232	None	replace
892	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionPrototypeVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionPrototypeVar(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getString()))    {    	non-compiled	[CE]  	232	None	replace
893	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionPrototypeVar(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getString()))    {    	non-compiled	[CE]  	232	None	replace
894	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionPrototypeVar(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionPrototypeVar(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionPrototypeVar(var.getString()))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var.getString()))    {    	non-compiled	[CE]  	232	None	replace
895	[BUG]  [BUGGY]  Preconditions.checkState(type  >=  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  >=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  >=  Token.FUNCTION);	  Preconditions.checkState(type!=    Token.FUNCTION);    	non-compiled	[CE]  	108	None	replace
896	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.ASSIGN);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.ASSIGN);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.ASSIGN);	  Preconditions.checkState(type!=    Token.FUNCTION);    	non-compiled	[CE]  	108	None	replace
897	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.EXPR_RESULT);	  Preconditions.checkState(type!=    Token.FUNCTION);    	non-compiled	[CE]  	108	None	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  ||  type  ==  Token.NAME);	  Preconditions.checkState(type!=    Token.FUNCTION);    	non-compiled	[CE]  	108	None	replace
899	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getFirstChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild(),  n.getFirstChild());	  Node    var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	147	None	replace
900	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild(),  n.getString());	  Node    var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	147	None	replace
901	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getLastChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild(),  n.getLastChild());	  Node    var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	147	None	replace
902	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild(),  n);	  Node    var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	147	None	replace
903	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getNext());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getNext());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild(),  n.getNext());	  Node    var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	147	None	replace
904	[BUG]  [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getType());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getVar(n.getLastChild(),  n.getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getVar(n.getLastChild(),  n.getType());	  Node    var    =    scope.getVar(n.getLastChild());    	non-compiled	[CE]  	147	None	replace
905	[BUG]  [BUGGY]  Node  n  =  scope.getOwnScope();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  n  =  scope.getOwnScope();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  n  =  scope.getOwnScope();	  Node    n    =    scope.getFirstChild();    	non-compiled	[CE]  	81	None	replace
906	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var,  scope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var,  scope))  {	  if(var!=    null    &&    isDefinedVar(var,    scope))    {    	non-compiled	[CE]  	139	None	replace
907	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  fnScope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var,  fnScope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var,  fnScope))  {	  if(var!=    null    &&    isDefinedVar(var,    scope))    {    	non-compiled	[CE]  	139	None	replace
908	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(var,  parent))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinedVar(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(var,  parent))  {	  if(var!=    null    &&    isDefinedVar(var,    scope))    {    	non-compiled	[CE]  	139	None	replace
909	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var.scope))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var.scope))  {	  if(var!=    null    &&    isFunctionVar(var.scope))    {    	non-compiled	[CE]  	276	None	replace
910	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(n.scope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(n.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(n.scope))  {	  if(var!=    null    &&    isFunctionVar(var.scope))    {    	non-compiled	[CE]  	276	None	replace
911	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(scope))  {	  if(var!=    null    &&    isFunctionVar(var.scope))    {    	non-compiled	[CE]  	276	None	replace
912	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(fnScope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(fnScope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(fnScope))  {	  if(var!=    null    &&    isFunctionVar(var.scope))    {    	non-compiled	[CE]  	276	None	replace
913	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionVar(var.scope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionVar(var.scope))  {	  if(var!=    null    &&    isFunctionVar(var.scope))    {    	non-compiled	[CE]  	276	None	replace
914	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionVar(var.scope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionVar(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionVar(var.scope))  {	  if(var!=    null    &&    isFunctionVar(var.scope))    {    	non-compiled	[CE]  	276	None	replace
915	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	309	None	replace
916	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	309	None	replace
917	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(n)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(n)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	309	None	replace
918	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString())||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString())||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.containsKey(var.getString())||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	309	None	replace
919	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.get(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.get(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var)&&  continuations.get(var.getString()))  {	  if(var!=    null    &&    isFunctionExpressionVar(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	309	None	replace
920	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(n)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	225	None	replace
921	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	225	None	replace
922	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	225	None	replace
923	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.get(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.get(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.get(var.getString()))  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	225	None	replace
924	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getType()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)||  continuations.containsKey(var.getType()))  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	225	None	replace
925	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null    ||    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
926	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentScope,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentScope,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  currentScope,  scope);	  NodeTraversal.traverse(compiler,    n,    currentScope);    	non-compiled	[CE]  	284	None	replace
927	[BUG]  [BUGGY]  Assign.traverse(compiler,  n,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign.traverse(compiler,  n,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign.traverse(compiler,  n,  scope);	  NodeTraversal.traverse(compiler,    n,    currentScope);    	non-compiled	[CE]  	284	None	replace
928	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  type,  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  type,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  type,  scope);	  NodeTraversal.traverse(compiler,    n,    type);    	non-compiled	[CE]  	89	None	replace
929	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  type);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  this,  type);	  NodeTraversal.traverse(compiler,    n,    type);    	non-compiled	[CE]  	89	None	replace
930	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassRelationship);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  subclassRelationship);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  subclassRelationship);	  NodeTraversal.traverse(compiler,    n,    type);    	non-compiled	[CE]  	89	None	replace
931	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  defFinder);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  defFinder);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  defFinder);	  NodeTraversal.traverse(compiler,    n,    type);    	non-compiled	[CE]  	89	None	replace
932	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getType());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getType());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getType());    	non-compiled	[CE]  	114	None	replace
933	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType(),  type);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType(),  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType(),  type);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getType());    	non-compiled	[CE]  	114	None	replace
934	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getPrefix());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getPrefix());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getPrefix());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getType());    	non-compiled	[CE]  	114	None	replace
935	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType(),  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType(),  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getType(),  parent);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getType());    	non-compiled	[CE]  	114	None	replace
936	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLocalName());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLocalName());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getLocalName());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getType());    	non-compiled	[CE]  	114	None	replace
937	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isDefinedVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	189	None	replace
938	[BUG]  [BUGGY]  if(n!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isDefinedVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	189	None	replace
939	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getType()))  {	  if(var!=    null    &&    isDefinedVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	189	None	replace
940	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.get(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.get(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  continuations.get(var.getString()))  {	  if(var!=    null    &&    isDefinedVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	189	None	replace
941	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getClass()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getClass()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getClass()))  {	  if(var!=    null    &&    isDefinedVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	189	None	replace
942	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getName()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getName()))  {	  if(var!=    null    &&    isDefinedVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	189	None	replace
943	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(var)||  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isDefinedVar(var)||    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	189	None	replace
944	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()!=  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	177	None	replace
945	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	177	None	replace
946	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	177	None	replace
947	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	177	None	replace
948	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.NAME);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.NAME);	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	177	None	replace
949	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()!=  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()!=  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()!=  Token.VAR);	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	177	None	replace
950	[BUG]  [BUGGY]  n  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getVar(n.getLastChild().getString());  continue;	  if(n.getType()    ==    Token.VAR)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	196	None	replace
951	[BUG]  [BUGGY]  Node  var  =  parent.removeFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  parent.removeFirstChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.removeFirstChild();	  Node    var    =    n.removeFirstChild();    	non-compiled	[CE]  	243	None	replace
952	[BUG]  [BUGGY]  Node  var  =  scope.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.removeFirstChild();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.removeFirstChild();	  Node    var    =    n.removeFirstChild();    	non-compiled	[CE]  	243	None	replace
953	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetProp(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	93	None	replace
954	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n));  var  =  scope.getVar(n.getLastChild().getString());	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    	non-compiled	[CE]  	93	None	replace
955	[BUG]  [BUGGY]  if(var  >=  null  &&  isDefinedVar(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  >=  null  &&  isDefinedVar(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  >=  null  &&  isDefinedVar(var))  {	  if(var!=    null    ||    isDefinedVar(var))    {    	non-compiled	[CE]  	138	None	replace
956	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    Token.VAR    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	101	None	replace
957	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  n!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  n!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  ||  n!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.VAR    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	101	None	replace
958	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  &&  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  &&  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  &&  var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.VAR    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	101	None	replace
959	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  n!=  null  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  n!=  null  &&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  ||  n!=  null  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.VAR    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	101	None	replace
960	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.VAR    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	101	None	replace
961	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(type    ==    Token.VAR    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	101	None	replace
962	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.NAME);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.VAR  ||  var!=  null  &&  var.getType()  ==  Token.NAME);	  Preconditions.checkState(type    ==    Token.VAR    ||    var!=    null    &&    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	101	None	replace
963	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(n.getType()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(n.getType()))  {	  if(var!=    null    &&    isFunctionVar(var.getType()))    {    	non-compiled	[CE]  	125	None	replace
964	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getFirstChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getFirstChild().getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var.getFirstChild().getString()))  {	  if(var!=    null    &&    isFunctionVar(var.getType()))    {    	non-compiled	[CE]  	125	None	replace
965	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionVar(var.getType()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionVar(var.getType()))  {	  if(var!=    null    &&    isFunctionVar(var.getType()))    {    	non-compiled	[CE]  	125	None	replace
966	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionVar(var.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionVar(var.getType()))  {	  if(var!=    null    &&    isFunctionVar(var.getType()))    {    	non-compiled	[CE]  	125	None	replace
967	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getType())||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getType())||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var.getType())||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionVar(var.getType()))    {    	non-compiled	[CE]  	125	None	replace
968	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getFirstChild().getType()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var.getFirstChild().getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var.getFirstChild().getType()))  {	  if(var!=    null    &&    isFunctionVar(var.getType()))    {    	non-compiled	[CE]  	125	None	replace
969	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  parent))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var,  parent))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var,    scope))    {    	non-compiled	[CE]  	46	None	replace
970	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var,  scope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionPrototypeVar(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionPrototypeVar(var,  scope))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var,    scope))    {    	non-compiled	[CE]  	46	None	replace
971	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n,  scope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(n,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(n,  scope))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var,    scope))    {    	non-compiled	[CE]  	46	None	replace
972	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  type))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  type))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var,  type))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var,    scope))    {    	non-compiled	[CE]  	46	None	replace
973	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  nameNode))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  nameNode))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var,  nameNode))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var,    scope))    {    	non-compiled	[CE]  	46	None	replace
974	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var,  scope))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionPrototypeVar(var,  scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionPrototypeVar(var,  scope))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var,    scope))    {    	non-compiled	[CE]  	46	None	replace
975	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  scope)||  continuations.contains(var))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  scope)||  continuations.contains(var))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var,  scope)||  continuations.contains(var))  {	  if(var!=    null    &&    isFunctionPrototypeVar(var,    scope))    {    	non-compiled	[CE]  	46	None	replace
976	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  scope)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var,  scope)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var,  scope)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionPrototypeVar(var,    scope))    {    	non-compiled	[CE]  	46	None	replace
977	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getLastChild().getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getLastChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getFirstChild().getString());    	non-compiled	[CE]  	117	None	replace
978	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getLastChild().getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getLastChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getFirstChild().getString());    	non-compiled	[CE]  	117	None	replace
979	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getNext().getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getNext().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getNext().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getFirstChild().getString());    	non-compiled	[CE]  	117	None	replace
980	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(parent.getLastChild().getFirstChild().getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(parent.getLastChild().getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(parent.getLastChild().getFirstChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getFirstChild().getString());    	non-compiled	[CE]  	117	None	replace
981	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getLastChild().getNext().getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getLastChild().getNext().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getLastChild().getNext().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getFirstChild().getString());    	non-compiled	[CE]  	117	None	replace
982	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getFirstChild().getString()  +  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getFirstChild().getString()  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getFirstChild().getString()  +  1);	  Assign    var    =    scope.getVar(n.getLastChild().getFirstChild().getString());    	non-compiled	[CE]  	117	None	replace
983	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isFunctionPrototype());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isFunctionPrototype());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.isFunctionPrototype());	  Preconditions.checkState(var!=    null    &&    var.isFunctionPrototype());    	non-compiled	[CE]  	194	None	replace
984	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.isFunctionPrototype());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  var.isFunctionPrototype());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.isFunctionPrototype());	  Preconditions.checkState(var!=    null    &&    var.isFunctionPrototype());    	non-compiled	[CE]  	194	None	replace
985	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.isFunctionPrototype());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.isFunctionPrototype());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.isFunctionPrototype());	  Preconditions.checkState(var!=    null    &&    var.isFunctionPrototype());    	non-compiled	[CE]  	194	None	replace
986	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.isFunctionPrototype());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.isFunctionPrototype());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  n.isFunctionPrototype());	  Preconditions.checkState(var!=    null    &&    var.isFunctionPrototype());    	non-compiled	[CE]  	194	None	replace
987	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.isFunctionPrototype());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  &&  var.isFunctionPrototype());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  &&  var.isFunctionPrototype());	  Preconditions.checkState(var!=    null    &&    var.isFunctionPrototype());    	non-compiled	[CE]  	194	None	replace
988	[BUG]  [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  &&  var.isFunctionPrototype());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type!=  Token.FUNCTION  &&  var.isFunctionPrototype());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type!=  Token.FUNCTION  &&  var.isFunctionPrototype());	  Preconditions.checkState(var!=    null    &&    var.isFunctionPrototype());    	non-compiled	[CE]  	194	None	replace
989	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getLastChild().getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getFirstChild().getString(),  n.getLastChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild().getString());    	non-compiled	[CE]  	111	None	replace
990	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getType(),  n.getLastChild().getString(),  n.getFirstChild().getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getType(),  n.getLastChild().getString(),  n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getType(),  n.getLastChild().getString(),  n.getFirstChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild().getString());    	non-compiled	[CE]  	111	None	replace
991	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent.getFirstChild().getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  parent.getFirstChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild().getString());    	non-compiled	[CE]  	111	None	replace
992	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild().getString());    	non-compiled	[CE]  	111	None	replace
993	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString()  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString()  +  1);	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild().getString());    	non-compiled	[CE]  	111	None	replace
994	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getParent().getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getParent().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getString(),  n.getParent().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild().getString());    	non-compiled	[CE]  	111	None	replace
995	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getfirstChild().getString(),  n.getLastChild().getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getfirstChild().getString(),  n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getfirstChild().getString(),  n.getLastChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getString(),    n.getFirstChild().getString());    	non-compiled	[CE]  	111	None	replace
996	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	97	None	replace
997	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	97	None	replace
998	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	97	None	replace
999	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	97	None	replace
1000	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
1001	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	97	None	replace
1002	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	97	None	replace
1003	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  scope	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
1004	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    scope);    }    	non-compiled	[CE]  	97	None	replace
1005	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(n)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(n)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	55	None	replace
1006	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	55	None	replace
1007	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	55	None	replace
1008	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionDeclaration(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionDeclaration(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	55	None	replace
1009	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getType());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getLastChild().getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getLastChild().getType());	  Assign    var    =    scope.getVar(n.getFirstChild().getType());    	non-compiled	[CE]  	199	None	replace
1010	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(parent.getFirstChild().getType());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(parent.getFirstChild().getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(parent.getFirstChild().getType());	  Assign    var    =    scope.getVar(n.getFirstChild().getType());    	non-compiled	[CE]  	199	None	replace
1011	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getString().getType());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getString().getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getString().getType());	  Assign    var    =    scope.getVar(n.getFirstChild().getType());    	non-compiled	[CE]  	199	None	replace
1012	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getType());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(n.getNext().getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(n.getNext().getType());	  Assign    var    =    scope.getVar(n.getFirstChild().getType());    	non-compiled	[CE]  	199	None	replace
1013	[BUG]  [BUGGY]  assign  =  scope.getVar(n.getLastChild().getType());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  assign  =  scope.getVar(n.getLastChild().getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	assign  =  scope.getVar(n.getLastChild().getType());	  Assign    var    =    scope.getVar(n.getFirstChild().getType());    	non-compiled	[CE]  	199	None	replace
1014	[BUG]  [BUGGY]  if(var!=  null  ||  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	188	None	replace
1015	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	188	None	replace
1016	[BUG]  [BUGGY]  if(var  ==  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	188	None	replace
1017	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(n)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	188	None	replace
1018	[BUG]  [BUGGY]  if(n!=  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isDefinedVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	188	None	replace
1019	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  var.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isDefinedVar(var)||  var.getType()  >=  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var)||  var.getType()  >=  Token.FUNCTION)  {	  if(var!=    null    &&    isDefinedVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	188	None	replace
1020	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	26	None	replace
1021	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(parent));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	26	None	replace
1022	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
1023	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
1024	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
1025	[BUG]  [BUGGY]  if(var!=  null  &&  isConstructorAssign(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isConstructorAssign(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isConstructorAssign(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
1026	[BUG]  [BUGGY]  if(var!=  null  &&  isReferencedVar(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isReferencedVar(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isReferencedVar(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
1027	[BUG]  [BUGGY]  if(var!=  null  &&  isAssign(var)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isAssign(var)||  type  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isAssign(var)||  type  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionAssign(var)||    type    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
1028	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(n.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(n.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(n.getType()))  {	  if(var!=    null    &&    isVar(var.getType()))    {    	non-compiled	[CE]  	155	None	replace
1029	[BUG]  [BUGGY]  if(var!=  null  ||  isVar(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isVar(var.getType()))  {	  if(var!=    null    &&    isVar(var.getType()))    {    	non-compiled	[CE]  	155	None	replace
1030	[BUG]  [BUGGY]  if(n!=  null  &&  isVar(var.getType()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isVar(var.getType()))  {	  if(var!=    null    &&    isVar(var.getType()))    {    	non-compiled	[CE]  	155	None	replace
1031	[BUG]  [BUGGY]  if(var  ==  null  &&  isVar(var.getType()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isVar(var.getType()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isVar(var.getType()))  {	  if(var!=    null    &&    isVar(var.getType()))    {    	non-compiled	[CE]  	155	None	replace
1032	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var.getFirstChild().getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isVar(var.getFirstChild().getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var.getFirstChild().getString()))  {	  if(var!=    null    &&    isVar(var.getType()))    {    	non-compiled	[CE]  	155	None	replace
1033	[BUG]  [BUGGY]  Node  var  =  parent.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  parent.getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getNext();	  Node    var    =    n.getNext();    	non-compiled	[CE]  	217	None	replace
1034	[BUG]  [BUGGY]  Node  var  =  scope.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getNext();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getNext();	  Node    var    =    n.getNext();    	non-compiled	[CE]  	217	None	replace
1035	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	253	None	replace
1036	[BUG]  [BUGGY]  parent  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  parent  =  scope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	parent  =  scope.getVar(n.getLastChild().getString());	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	253	None	replace
1037	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  ';'  expected	253	None	replace
1038	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	253	None	replace
1039	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getLastChild().getString());  }  else  {  traverseFunction(n,  parent);  }	  if(NodeUtil.isFunctionDeclaration(n))    {    var    =    scope.getVar(n.getLastChild().getString());    }    else    {    traverseFunction(n,    parent);    }    	non-compiled	[CE]  	253	None	replace
1040	[BUG]  [BUGGY]  var  =  scope.getVar(n.getFirstChild(),  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getFirstChild(),  n);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getFirstChild(),  n);	  var    =    scope.getVar(n.getLastChild(),    n);    	non-compiled	[CE]  	208	None	replace
1041	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getLastChild(),  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  parent);	  var    =    scope.getVar(n.getLastChild(),    n);    	non-compiled	[CE]  	208	None	replace
1042	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n,  parent);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n,  parent);	  var    =    scope.getVar(n.getLastChild(),    n);    	non-compiled	[CE]  	208	None	replace
1043	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getLastChild(),  n  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  n  +  1);	  var    =    scope.getVar(n.getLastChild(),    n);    	non-compiled	[CE]  	208	None	replace
1044	[BUG]  [BUGGY]  var  =  scope.getVar(n.getLastChild(),  type);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  var  =  scope.getVar(n.getLastChild(),  type);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	var  =  scope.getVar(n.getLastChild(),  type);	  var    =    scope.getVar(n.getLastChild(),    n);    	non-compiled	[CE]  	208	None	replace
1045	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getFirstChild());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	206	None	replace
1046	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  var  =  scope.getVar(n.getLastChild());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	206	None	replace
1047	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  var  =  scope.getVar(n.getLastChild());  }	  if(n.getType()    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild());    }    	non-compiled	[CE]  	206	None	replace
1048	[BUG]  [BUGGY]  if(n!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	269	None	replace
1049	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	269	None	replace
1050	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	269	None	replace
1051	[BUG]  [BUGGY]  if(v!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(v!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(v!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	269	None	replace
1052	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)&&  continuations.get(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)&&  continuations.get(var.getString()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var)&&  continuations.get(var.getString()))  {	  if(var!=    null    &&    isPropertyAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	269	None	replace
1053	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getClass()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getClass()))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var)&&  continuations.containsKey(var.getClass()))  {	  if(var!=    null    &&    isPropertyAssign(var)&&    continuations.containsKey(var.getString()))    {    	non-compiled	[CE]  	269	None	replace
1054	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
1055	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
1056	[BUG]  [BUGGY]  Assign  var  =  fnScope.getVar(n.getLastChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  fnScope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  fnScope.getVar(n.getLastChild().getString());	  Assign    var    =    fnScope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	292	None	replace
1057	[BUG]  [BUGGY]  assign  =  fnScope.getVar(n.getLastChild().getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  assign  =  fnScope.getVar(n.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	assign  =  fnScope.getVar(n.getLastChild().getString());	  Assign    var    =    fnScope.getVar(n.getFirstChild().getString());    	non-compiled	[CE]  	292	None	replace
1058	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null,  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null,  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null,  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null,    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	308	None	replace
1059	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null,  scope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null,  scope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null,  scope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null,    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	308	None	replace
1060	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null,  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null,  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null,  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null,    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	308	None	replace
1061	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null,  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n  ==  null,  var.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n  ==  null,  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null,    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	308	None	replace
1062	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null,  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null,  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null,  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var!=    null,    var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	308	None	replace
1063	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign(n))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isPropertyAssign(n))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isPropertyAssign(n))  {	  if(var!=    null    &&    isPropertyAssign(n))    {    	non-compiled	[CE]  	38	None	replace
1064	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(n,  parent))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(n,  parent))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(n,  parent))  {	  if(var!=    null    &&    isPropertyAssign(n))    {    	non-compiled	[CE]  	38	None	replace
1065	[BUG]  [BUGGY]  Node  var  =  n.getLastChild().getQualifiedName();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  n.getLastChild().getQualifiedName();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getLastChild().getQualifiedName();	  Node    var    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  	290	None	replace
1066	[BUG]  [BUGGY]  Node  var  =  scope.getFirstChild().getQualifiedName();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  scope.getFirstChild().getQualifiedName();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  scope.getFirstChild().getQualifiedName();	  Node    var    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  	290	None	replace
1067	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getNext().getQualifiedName();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  n.getFirstChild().getNext().getQualifiedName();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getFirstChild().getNext().getQualifiedName();	  Node    var    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  	290	None	replace
1068	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild().getQualifiedName()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  n.getFirstChild().getQualifiedName()  +  1;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getFirstChild().getQualifiedName()  +  1;	  Node    var    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  	290	None	replace
1069	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild().getQualifiedName();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  parent.getFirstChild().getQualifiedName();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getFirstChild().getQualifiedName();	  Node    var    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  	290	None	replace
1070	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString()  +  1);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getString()  +  1);	  Var    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	154	None	replace
1071	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild().getString());	  Var    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	154	None	replace
1072	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getString(),  n);	  Var    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	154	None	replace
1073	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getFirstChild().getString());	  Var    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	154	None	replace
1074	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getType());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getType());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getType());	  Var    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	154	None	replace
1075	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getFirstChild());	  Var    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	154	None	replace
1076	[BUG]  [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Var  var  =  scope.getVar(n.getLastChild().getString(),  n.getNext());	  Var    var    =    scope.getVar(n.getLastChild().getString());    	non-compiled	[CE]  	154	None	replace
1077	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.scope!=  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.scope!=  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.scope!=  scope);	  Preconditions.checkState(var!=    null    &&    var.scope!=    scope);    	non-compiled	[CE]  	249	None	replace
1078	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  var.scope!=  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null  &&  var.scope!=  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null  &&  var.scope!=  scope);	  Preconditions.checkState(var!=    null    &&    var.scope!=    scope);    	non-compiled	[CE]  	249	None	replace
1079	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.scope  ==  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.scope  ==  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  var.scope  ==  scope);	  Preconditions.checkState(var!=    null    &&    var.scope!=    scope);    	non-compiled	[CE]  	249	None	replace
1080	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.scope!=  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  &&  var.scope!=  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  &&  var.scope!=  scope);	  Preconditions.checkState(var!=    null    &&    var.scope!=    scope);    	non-compiled	[CE]  	249	None	replace
1081	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  scope!=  var.scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  &&  scope!=  var.scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  &&  scope!=  var.scope);	  Preconditions.checkState(var!=    null    &&    var.scope!=    scope);    	non-compiled	[CE]  	249	None	replace
1082	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  var.scope!=  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n!=  null  &&  var.scope!=  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n!=  null  &&  var.scope!=  scope);	  Preconditions.checkState(var!=    null    &&    var.scope!=    scope);    	non-compiled	[CE]  	249	None	replace
1083	[BUG]  [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.scope!=  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var  ==  null  ||  var.scope!=  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var  ==  null  ||  var.scope!=  scope);	  Preconditions.checkState(var!=    null    &&    var.scope!=    scope);    	non-compiled	[CE]  	249	None	replace
1084	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.scope  ==  scope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(var!=  null  ||  var.scope  ==  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(var!=  null  ||  var.scope  ==  scope);	  Preconditions.checkState(var!=    null    &&    var.scope!=    scope);    	non-compiled	[CE]  	249	None	replace
1085	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(type  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(type  ==  Token.FUNCTION);  var  =  scope.getVar(n.getLastChild().getString());  continue;	  if(type    ==    Token.FUNCTION)    {    var    =    scope.getVar(n.getLastChild().getString());    continue;    }    	non-compiled	[CE]  	197	None	replace
1086	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  scope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  scope);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  this,  scope);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	92	None	replace
1087	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  continuations);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  this,  continuations);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	92	None	replace
1088	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	92	None	replace
1089	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  subclassRelationship);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  subclassRelationship);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  this,  subclassRelationship);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	92	None	replace
1090	[BUG]  [BUGGY]  Node  var  =  n.getLastChild().getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  n.getLastChild().getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  n.getLastChild().getParent();	  Node    var    =    n.getFirstChild().getParent();    	non-compiled	[CE]  	209	None	replace
1091	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild().getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Node  var  =  parent.getFirstChild().getParent();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Node  var  =  parent.getFirstChild().getParent();	  Node    var    =    n.getFirstChild().getParent();    	non-compiled	[CE]  	209	None	replace
1092	[BUG]  [BUGGY]  if(var!=  null  &&  var.isDefined())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  var.isDefined())  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  var.isDefined())  {	  if(var!=    null    &&    modifiedVar.isDefined())    {    	non-compiled	[CE]  	244	None	replace
1093	[BUG]  [BUGGY]  if(var!=  null  ||  modifiedVar.isDefined())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  modifiedVar.isDefined())  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  modifiedVar.isDefined())  {	  if(var!=    null    &&    modifiedVar.isDefined())    {    	non-compiled	[CE]  	244	None	replace
1094	[BUG]  [BUGGY]  if(referencedVar!=  null  &&  modifiedVar.isDefined())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(referencedVar!=  null  &&  modifiedVar.isDefined())  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(referencedVar!=  null  &&  modifiedVar.isDefined())  {	  if(var!=    null    &&    modifiedVar.isDefined())    {    	non-compiled	[CE]  	244	None	replace
1095	[BUG]  [BUGGY]  if(modifiedVar!=  null  &&  modifiedVar.isDefined())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(modifiedVar!=  null  &&  modifiedVar.isDefined())  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(modifiedVar!=  null  &&  modifiedVar.isDefined())  {	  if(var!=    null    &&    modifiedVar.isDefined())    {    	non-compiled	[CE]  	244	None	replace
1096	[BUG]  [BUGGY]  if(var!=  null  &&  modifiedVar.isDefined()  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  modifiedVar.isDefined()  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  modifiedVar.isDefined()  ||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    modifiedVar.isDefined())    {    	non-compiled	[CE]  	244	None	replace
1097	[BUG]  [BUGGY]  if(variable!=  null  &&  modifiedVar.isDefined())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(variable!=  null  &&  modifiedVar.isDefined())  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(variable!=  null  &&  modifiedVar.isDefined())  {	  if(var!=    null    &&    modifiedVar.isDefined())    {    	non-compiled	[CE]  	244	None	replace
1098	[BUG]  [BUGGY]  if(var  ==  null  &&  var.isDefined())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  var.isDefined())  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  var.isDefined())  {	  if(var!=    null    &&    modifiedVar.isDefined())    {    	non-compiled	[CE]  	244	None	replace
1099	[BUG]  [BUGGY]  if(var!=  null  &&  scope.isDefined())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  scope.isDefined())  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  scope.isDefined())  {	  if(var!=    null    &&    modifiedVar.isDefined())    {    	non-compiled	[CE]  	244	None	replace
1100	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	56	None	replace
1101	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(var)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(var)||  n.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	56	None	replace
1102	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionVar(n)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionVar(n)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	56	None	replace
1103	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	56	None	replace
1104	[BUG]  [BUGGY]  if(n!=  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(n!=  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(n!=  null  &&  isFunctionVar(var)||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    isFunctionVar(var)||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	56	None	replace
1105	[BUG]  [BUGGY]  n  =  scope.getPreviousSibling();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getPreviousSibling();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getPreviousSibling();	  n    =    n.getPreviousSibling();    	non-compiled	[CE]  	262	None	replace
1106	[BUG]  [BUGGY]  n  =  parent.getPreviousSibling();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  parent.getPreviousSibling();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  parent.getPreviousSibling();	  n    =    n.getPreviousSibling();    	non-compiled	[CE]  	262	None	replace
1107	[BUG]  [BUGGY]  n  =  n.getNextSibling();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  n.getNextSibling();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  n.getNextSibling();	  n    =    n.getPreviousSibling();    	non-compiled	[CE]  	262	None	replace
1108	[BUG]  [BUGGY]  n  =  scope.getNextSibling();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  n  =  scope.getNextSibling();  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	n  =  scope.getNextSibling();	  n    =    n.getPreviousSibling();    	non-compiled	[CE]  	262	None	replace
1109	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
1110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
1111	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
1112	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
1113	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
1114	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
1115	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
1116	[BUG]  [BUGGY]  if(var!=  null  ||  isFunctionAssign(var.scope))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  ||  isFunctionAssign(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isFunctionAssign(var.scope))  {	  if(var!=    null    &&    isFunctionAssign(var.scope))    {    	non-compiled	[CE]  	289	None	replace
1117	[BUG]  [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var.scope))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var  ==  null  &&  isFunctionAssign(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var  ==  null  &&  isFunctionAssign(var.scope))  {	  if(var!=    null    &&    isFunctionAssign(var.scope))    {    	non-compiled	[CE]  	289	None	replace
1118	[BUG]  [BUGGY]  if(scope!=  null  &&  isFunctionAssign(var.scope))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(scope!=  null  &&  isFunctionAssign(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(scope!=  null  &&  isFunctionAssign(var.scope))  {	  if(var!=    null    &&    isFunctionAssign(var.scope))    {    	non-compiled	[CE]  	289	None	replace
1119	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.scope))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isPropertyAssign(var.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var.scope))  {	  if(var!=    null    &&    isFunctionAssign(var.scope))    {    	non-compiled	[CE]  	289	None	replace
1120	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(n.scope))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(n.scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(n.scope))  {	  if(var!=    null    &&    isFunctionAssign(var.scope))    {    	non-compiled	[CE]  	289	None	replace
1121	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(scope))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  if(var!=  null  &&  isFunctionAssign(scope))  {  [BUGGY]      continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(scope))  {	  if(var!=    null    &&    isFunctionAssign(var.scope))    {    	non-compiled	[CE]  	289	None	replace
1122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  continuations);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  continuations);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	NodeTraversal.traverse(compiler,  n,  null,  continuations);	  NodeTraversal.traverse(compiler,    n,    continuations);    	non-compiled	[CE]  	87	None	replace
1123	[BUG]  [BUGGY]  Preconditions.checkState(variable!=  null  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(variable!=  null  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(variable!=  null  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var!=    null    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
1124	[BUG]  [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkArgument(var!=  null  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var!=    null    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
1125	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Preconditions.checkState(scope!=  null  ||  var.getType()  ==  Token.VAR);  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Preconditions.checkState(scope!=  null  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var!=    null    ||    var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
1126	[BUG]  [BUGGY]  Assign  var  =  scope.getVar(N.getLastChild().getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }      [BUGGY]  Assign  var  =  scope.getVar(N.getLastChild().getString());  [BUGGY]      if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	Assign  var  =  scope.getVar(N.getLastChild().getString());	  Assign    var    =    scope.getVar(n.getLastChild().getString()    +    1);    	non-compiled	[CE]  	112	None	replace
