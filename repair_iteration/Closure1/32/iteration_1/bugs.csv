bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    var  =  scope.getVar(n.getLastChild().getString());		non-compiled	[CE]  	64	None	add
2	[BUG]  [BUGGY]    Assign  var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Assign  var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Assign  var  =  scope.getVar(n.getLastChild().getString());		non-compiled	[CE]  	64	None	add
3	[BUG]  [BUGGY]    Node  c  =  n.getFirstChild();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Node  c  =  n.getFirstChild();  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Node  c  =  n.getFirstChild();		non-compiled	[CE]  	64	None	add
4	[BUG]  [BUGGY]    var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]          AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    var  =  scope.getVar(n.getFirstChild().getString());		non-compiled	[CE]  	64	None	add
5	[BUG]  [BUGGY]    Assign  var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]            AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Assign  var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Assign  var  =  scope.getVar(n.getFirstChild().getString());		non-compiled	[CE]  	64	None	add
6	[BUG]  [BUGGY]    Node  n  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Node  n  =  n.getFirstChild();  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Node  n  =  n.getFirstChild();		non-compiled	[CE]  	64	None	add
7	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  scope);  [CE]  [FE]                AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    NodeTraversal.traverse(compiler,  n,  scope);  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    NodeTraversal.traverse(compiler,  n,  scope);		non-compiled	[CE]  	64	None	add
8	[BUG]  [BUGGY]    Node  var  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Node  var  =  n.getFirstChild();  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Node  var  =  n.getFirstChild();		non-compiled	[CE]  	64	None	add
9	[BUG]  [BUGGY]    var  =  scope.getVar(n.getLastChild().getString());  continue;  [CE]  [FE]                    AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    var  =  scope.getVar(n.getLastChild().getString());  continue;  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    var  =  scope.getVar(n.getLastChild().getString());  continue;		non-compiled	[CE]  	64	None	add
10	[BUG]  [BUGGY]    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);		non-compiled	[CE]  	64	None	add
11	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  &&  isPropertyAssign(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isPropertyAssign(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
12	[BUG]  [BUGGY]  if(var!=  null  ||  isRemovableVar(var))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  ||  isRemovableVar(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  ||  isRemovableVar(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
13	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var))  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  &&  isFunctionDeclaration(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionDeclaration(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
14	[BUG]  [BUGGY]  if(var!=  null  &&  isVar(var))  {  [CE]  [FE]          AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  &&  isVar(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isVar(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
15	[BUG]  [BUGGY]  if  (var!=  null  &&  isFunctionVar(var))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if  (var!=  null  &&  isFunctionVar(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if  (var!=  null  &&  isFunctionVar(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
16	[BUG]  [BUGGY]  if  (var  ==  null  &&  isRemovableVar(var))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if  (var  ==  null  &&  isRemovableVar(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if  (var  ==  null  &&  isRemovableVar(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
17	[BUG]  [BUGGY]  if(var!=  null  &&  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  &&  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isRemovableVar(var)||  var.getType()  ==  Token.FUNCTION)  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
18	[BUG]  [BUGGY]    Node  var  =  n.getLastChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Node  var  =  n.getLastChild();  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Node  var  =  n.getLastChild();		non-compiled	[CE]  	64	None	add
19	[BUG]  [BUGGY]    Preconditions.checkState(var!=  null);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Preconditions.checkState(var!=  null);  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Preconditions.checkState(var!=  null);		non-compiled	[CE]  	64	None	add
20	[BUG]  [BUGGY]    Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);		non-compiled	[CE]  	64	None	add
21	[BUG]  [BUGGY]    Node  var  =  n.getFirstChild().getNext();  [CE]  [FE]          AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Node  var  =  n.getFirstChild().getNext();  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Node  var  =  n.getFirstChild().getNext();		non-compiled	[CE]  	64	None	add
22	[BUG]  [BUGGY]    Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);		non-compiled	[CE]  	64	None	add
23	[BUG]  [BUGGY]    n  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    n  =  n.getFirstChild();  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    n  =  n.getFirstChild();		non-compiled	[CE]  	64	None	add
24	[BUG]  [BUGGY]    Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    Preconditions.checkArgument(var!=  null  &&  var.getType()  ==  Token.FUNCTION);		non-compiled	[CE]  	64	None	add
25	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  &&  isFunctionAssign(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionAssign(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
26	[BUG]  [BUGGY]  if(var!=  null  &&  isDefinedVar(var))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  &&  isDefinedVar(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isDefinedVar(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
27	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var))  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  &&  isFunctionPrototypeVar(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionPrototypeVar(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
28	[BUG]  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var))  {  [CE]  [FE]          AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]  if(var!=  null  &&  isFunctionExpressionVar(var))  {  [BUGGY]  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	if(var!=  null  &&  isFunctionExpressionVar(var))  {	if  (var  !=  null  &&  isRemovableVar(var))  {  	non-compiled	[CE]  	63	None	replace
29	[BUG]  [BUGGY]    var  =  scope.getVar(n.getLastChild());  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    var  =  scope.getVar(n.getLastChild());  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    var  =  scope.getVar(n.getLastChild());		non-compiled	[CE]  	64	None	add
30	[BUG]  [BUGGY]    n  =  n.getLastChild();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  [BUGGY]    n  =  n.getLastChild();  [BUGGY]  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  case  Token.ASSIGN:  Assign  maybeAssign  =  Assign.maybeCreateAssign(n);  if  (maybeAssign  !=  null)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	    n  =  n.getLastChild();		non-compiled	[CE]  	64	None	add
