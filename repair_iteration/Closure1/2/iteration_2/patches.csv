bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeUtil.removeChild(lastArg,  var);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(lastArg,  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(lastArg,  var);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
2	[BUG]  [BUGGY]  NodeUtil.removeChild(var,  referenced);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(var,  referenced);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
3	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(parent,  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(parent,  var);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
4	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  referenced);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(parent,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(parent,  referenced);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
5	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  lastArg);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(parent,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(parent,  lastArg);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
6	[BUG]  [BUGGY]  NodeUtil.removeChild(argList,  referenced);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(argList,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(argList,  referenced);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
7	[BUG]  [BUGGY]  NodeUtil.removeChild(nameNode,  lastArg);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(nameNode,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(nameNode,  lastArg);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
8	[BUG]  [BUGGY]  Node  lastArg  =  var.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  var.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  var.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	16	None	replace
9	[BUG]  [BUGGY]  Node  lastArg  =  varList.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  varList.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  varList.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	16	None	replace
10	[BUG]  [BUGGY]  Node  lastArg  =  varList.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  varList.getLastChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  varList.getLastChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  fnScope.getLastChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  fnScope.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  lastArg  =  argList.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  argList.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  argList.getFirstChild();	  lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	46	None	replace
14	[BUG]  [BUGGY]  lastArg  =  varList.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  varList.getLastChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  varList.getLastChild();	  lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	46	None	replace
15	[BUG]  [BUGGY]  lastArg  =  var.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  var.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  var.getFirstChild();	  lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	46	None	replace
16	[BUG]  [BUGGY]  lastArg  =  varList.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  varList.getFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  varList.getFirstChild();	  lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	46	None	replace
17	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  fnScope.getLastChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  fnScope.getLastChild();	  lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	46	None	replace
18	[BUG]  [BUGGY]  NodeUtil.removeChild(var);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(var);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	34	None	replace
19	[BUG]  [BUGGY]  NodeUtil.removeChild(argList.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(argList.getFirstChild());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(argList.getFirstChild());	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	34	None	replace
20	[BUG]  [BUGGY]  NodeUtil.removeChild(argList,  lastArg);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(argList,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(argList,  lastArg);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	34	None	replace
21	[BUG]  [BUGGY]  argList.removeLastChild(var,  referenced);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeLastChild(var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeLastChild(var,  referenced);	  argList.removeLastChild(var);    	non-compiled	[CE]  	25	None	replace
22	[BUG]  [BUGGY]  argList.removeChild(lastArg,  var  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  var  +  1);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  var  +  1);	  argList.removeChild(var,    lastArg    +    1);    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  argList.removeChild(lastArg,  lastArg  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  lastArg  +  1);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  lastArg  +  1);	  argList.removeChild(var,    lastArg    +    1);    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  argList.addChildToFront(var,  lastArg  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToFront(var,  lastArg  +  1);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToFront(var,  lastArg  +  1);	  argList.removeChild(var,    lastArg    +    1);    	non-compiled	[CE]  	4	None	replace
25	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  var  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  var  +  1);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  var  +  1);	  argList.removeChild(var,    lastArg    +    1);    	non-compiled	[CE]  	4	None	replace
26	[BUG]  [BUGGY]  argList.addChildToBack(var,  lastArg  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToBack(var,  lastArg  +  1);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToBack(var,  lastArg  +  1);	  argList.removeChild(var,    lastArg    +    1);    	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  argList.removeChild(var.getString(),  referenced);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var.getString(),  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var.getString(),  referenced);	  argList.removeChild(var.getString());    	non-compiled	[CE]  	23	None	replace
28	[BUG]  [BUGGY]  argList.removeChild(lastArg.getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg.getString());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg.getString());	  argList.removeChild(var.getString());    	non-compiled	[CE]  	23	None	replace
29	[BUG]  [BUGGY]  argList.removeChild(var.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var.getFirstChild());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var.getFirstChild());	  argList.removeChild(var.getString());    	non-compiled	[CE]  	23	None	replace
30	[BUG]  [BUGGY]  argList.addChildToFront(var.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToFront(var.getString());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToFront(var.getString());	  argList.removeChild(var.getString());    	non-compiled	[CE]  	23	None	replace
31	[BUG]  [BUGGY]  argList.removeChild(var.getString()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var.getString()  +  1);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var.getString()  +  1);	  argList.removeChild(var.getString());    	non-compiled	[CE]  	23	None	replace
32	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  var));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  var));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
33	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  referenced));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  referenced));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  referenced));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
34	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  var);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  var);	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
35	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  nameNode));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  nameNode));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  nameNode));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
36	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  referenced);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  referenced);	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
37	[BUG]  [BUGGY]  argList.removeChild(var,  new  Node(Token.EMPTY));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var,  new  Node(Token.EMPTY));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var,  new  Node(Token.EMPTY));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
38	[BUG]  [BUGGY]  argList.addChildToBack(var,  lastArg);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToBack(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToBack(var,  lastArg);	  argList.addChildToBack(var,    referenced);    	non-compiled	[CE]  	20	None	replace
39	[BUG]  [BUGGY]  argList.addChildToBack(lastArg,  referenced);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToBack(lastArg,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToBack(lastArg,  referenced);	  argList.addChildToBack(var,    referenced);    	non-compiled	[CE]  	20	None	replace
40	[BUG]  [BUGGY]  argList.addChildToBack(var,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToBack(var,  parentScope);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToBack(var,  parentScope);	  argList.addChildToBack(var,    referenced);    	non-compiled	[CE]  	20	None	replace
41	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var,  referenced));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var,  referenced));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var,  referenced));	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
42	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var),  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var),  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var),  referenced);	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
43	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(scope,  var));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(scope,  var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(scope,  var));	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
44	[BUG]  [BUGGY]  argList.removeChild(lastArg,  new  Node(var,  referenced));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  new  Node(var,  referenced));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  new  Node(var,  referenced));	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
45	[BUG]  [BUGGY]  argList.removeChild(lastArg,  new  Node(var),  referenced);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  new  Node(var),  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  new  Node(var),  referenced);	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
46	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.FUNCTION,  var));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.FUNCTION,  var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.FUNCTION,  var));	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
47	[BUG]  [BUGGY]  Node  lastArg  =  var.getLastChild()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  var.getLastChild()  +  1;  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  var.getLastChild()  +  1;	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	12	None	replace
48	[BUG]  [BUGGY]  Node  lastArg  =  var.getLastChild().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  var.getLastChild().getNext();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  var.getLastChild().getNext();	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	12	None	replace
49	[BUG]  [BUGGY]  argList.remove(var);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.remove(var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.remove(var);	  argList.removeLastChild();    	non-compiled	[CE]  	38	None	replace
50	[BUG]  [BUGGY]  argList.removeChild(lastArg,  lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  lastArg);	  argList.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	10	None	replace
51	[BUG]  [BUGGY]  fnScope.replaceChild(var,  lastArg);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.replaceChild(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.replaceChild(var,  lastArg);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	18	None	replace
52	[BUG]  [BUGGY]  fnScope.replaceChild(lastArg,  referenced);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.replaceChild(lastArg,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.replaceChild(lastArg,  referenced);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	18	None	replace
53	[BUG]  [BUGGY]  fnScope.removeChild(argList.getFirstChild());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.removeChild(argList.getFirstChild());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.removeChild(argList.getFirstChild());	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	18	None	replace
54	[BUG]  [BUGGY]  fnScope.removeChild(var,  lastArg);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.removeChild(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.removeChild(var,  lastArg);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	18	None	replace
55	[BUG]  [BUGGY]  fnScope.removeChild(lastArg,  referenced);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.removeChild(lastArg,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.removeChild(lastArg,  referenced);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	18	None	replace
56	[BUG]  [BUGGY]  argList.removeChildrenToFront(var,  referenced);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildrenToFront(var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildrenToFront(var,  referenced);	  argList.removeChildrenToFront(var);    	non-compiled	[CE]  	40	None	replace
57	[BUG]  [BUGGY]  argList.removeChild(lastArg.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg.getLastChild());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg.getLastChild());	  argList.removeChild(var.getLastChild());    	non-compiled	[CE]  	24	None	replace
58	[BUG]  [BUGGY]  argList.removeChild(lastArg.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg.getFirstChild());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg.getFirstChild());	  argList.removeChild(var.getLastChild());    	non-compiled	[CE]  	24	None	replace
59	[BUG]  [BUGGY]  argList.addChildToFront(var.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToFront(var.getLastChild());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToFront(var.getLastChild());	  argList.removeChild(var.getLastChild());    	non-compiled	[CE]  	24	None	replace
60	[BUG]  [BUGGY]  argList.removeChild(var.getLastChild(),  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var.getLastChild(),  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var.getLastChild(),  referenced);	  argList.removeChild(var.getLastChild());    	non-compiled	[CE]  	24	None	replace
61	[BUG]  [BUGGY]  argList.addChildToFront(lastArg,  var);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToFront(lastArg,  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToFront(lastArg,  var);	  argList.addChildToFront(var,    lastArg);    	non-compiled	[CE]  	3	None	replace
62	[BUG]  [BUGGY]  argList.addChildToFront(var,  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToFront(var,  nameNode);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToFront(var,  nameNode);	  argList.addChildToFront(var,    lastArg);    	non-compiled	[CE]  	3	None	replace
63	[BUG]  [BUGGY]  argList.removeChild(firstArg,  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(firstArg,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(firstArg,  referenced);	  argList.removeChild(var,    referenced);    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString()),  referenced);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString()),  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.getString()),  referenced);	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
65	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString()  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString()  +  1));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.getString()  +  1));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
66	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString(),  referenced));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString(),  referenced));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.getString(),  referenced));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
67	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getLineno()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getLineno()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.getLineno()));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
68	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getType()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getType()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.getType()));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
69	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getName()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getName()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.getName()));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
70	[BUG]  [BUGGY]  argList.add(var);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.add(var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.add(var);	  argList.addChildToBack(referenced);    	non-compiled	[CE]  	22	None	replace
71	[BUG]  [BUGGY]  argList.addChildToFront(var,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildToFront(var,  parentScope);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildToFront(var,  parentScope);	  argList.addChildToFront(var,    referenced);    	non-compiled	[CE]  	5	None	replace
72	[BUG]  [BUGGY]  argList.removeChild(var,  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var,  null);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var,  null);	  argList.replaceChild(lastArg,    null);    	non-compiled	[CE]  	42	None	replace
73	[BUG]  [BUGGY]  argList.replaceChild(var,  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(var,  null);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(var,  null);	  argList.replaceChild(lastArg,    null);    	non-compiled	[CE]  	42	None	replace
74	[BUG]  [BUGGY]  argList.removeLastChild(var,  lastArg);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeLastChild(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeLastChild(var,  lastArg);	  argList.addLastChild(var,    referenced);    	non-compiled	[CE]  	29	None	replace
75	[BUG]  [BUGGY]  argList.addLastChild(lastArg,  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addLastChild(lastArg,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addLastChild(lastArg,  referenced);	  argList.addLastChild(var,    referenced);    	non-compiled	[CE]  	29	None	replace
76	[BUG]  [BUGGY]  argList.addLastChild(var,  lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addLastChild(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addLastChild(var,  lastArg);	  argList.addLastChild(var,    referenced);    	non-compiled	[CE]  	29	None	replace
77	[BUG]  [BUGGY]  argList.removeLastChild(lastArg,  referenced);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeLastChild(lastArg,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeLastChild(lastArg,  referenced);	  argList.addLastChild(var,    referenced);    	non-compiled	[CE]  	29	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR,  referenced);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR,  referenced);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.VAR);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(referenced.getType()  ==  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()!=  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||!referenced.contains(var));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||!referenced.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||!referenced.contains(var));	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
84	[BUG]  [BUGGY]  argList.removeFirstChild(var,  referenced);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeFirstChild(var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeFirstChild(var,  referenced);	  argList.removeFirstChild(var);    	non-compiled	[CE]  	28	None	replace
85	[BUG]  [BUGGY]  argList.addChildrenToFront(var,  lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildrenToFront(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildrenToFront(var,  lastArg);	  argList.addChildrenToFront(var,    referenced);    	non-compiled	[CE]  	19	None	replace
86	[BUG]  [BUGGY]  argList.removeChildToBack(lastArg);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildToBack(lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildToBack(lastArg);	  argList.removeChildToBack(var);    	non-compiled	[CE]  	35	None	replace
87	[BUG]  [BUGGY]  argList.clear();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.clear();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.clear();	  argList.removeChildren();    	non-compiled	[CE]  	51	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  referenced.contains(var));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  referenced.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(isPropertyAssign  &&  referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(!referenced.contains(var));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(!referenced.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(!referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(referenced.contains(var)||!referenced.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(referenced.contains(var)||!referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(referenced.contains(var)||  isPropertyAssign);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(referenced.contains(var)||  isPropertyAssign);	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(referenced.contains(var)||  referenced.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(referenced.contains(var)||  referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  referenced.contains(var));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  referenced.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  referenced.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
94	[BUG]  [BUGGY]  lastArg  =  var.getLastChild()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  var.getLastChild()  +  1;  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  var.getLastChild()  +  1;	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	47	None	replace
95	[BUG]  [BUGGY]  argList.removeChildAfter(var,  referenced);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildAfter(var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildAfter(var,  referenced);	  argList.removeChildAfter(var);    	non-compiled	[CE]  	36	None	replace
96	[BUG]  [BUGGY]  argList.removeChildAfter(lastArg);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildAfter(lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildAfter(lastArg);	  argList.removeChildAfter(var);    	non-compiled	[CE]  	36	None	replace
97	[BUG]  [BUGGY]  argList.removeChild(lastArg,  var.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  var.cloneTree());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  var.cloneTree());	  argList.removeChild(lastArg,    var);    	non-compiled	[CE]  	1	None	replace
98	[BUG]  [BUGGY]  argList.removeChild(lastArg,  var.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  var.getString());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  var.getString());	  argList.removeChild(lastArg,    var);    	non-compiled	[CE]  	1	None	replace
99	[BUG]  [BUGGY]  argList.removeChild(lastArg,  var,  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  var,  referenced);	  argList.removeChild(lastArg,    var);    	non-compiled	[CE]  	1	None	replace
100	[BUG]  [BUGGY]  argList.removeChild(var,  ref);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var,  ref);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var,  ref);	  argList.replaceChild(lastArg,    ref);    	non-compiled	[CE]  	30	None	replace
101	[BUG]  [BUGGY]  argList.replaceChild(var,  ref);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(var,  ref);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(var,  ref);	  argList.replaceChild(lastArg,    ref);    	non-compiled	[CE]  	30	None	replace
102	[BUG]  [BUGGY]  argList.removeChild(referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(referenced);	  argList.replaceChild(lastArg,    ref);    	non-compiled	[CE]  	30	None	replace
103	[BUG]  [BUGGY]  argList.clearChildren();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.clearChildren();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.clearChildren();	  argList.addChildToBack(lastArg);    	non-compiled	[CE]  	21	None	replace
104	[BUG]  [BUGGY]  fnScope.removeChild(var,  referenced);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.removeChild(var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.removeChild(var,  referenced);	  fnScope.removeChild(var);    	non-compiled	[CE]  	13	None	replace
105	[BUG]  [BUGGY]  fnScope.replaceChild(lastArg,  var);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.replaceChild(lastArg,  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.replaceChild(lastArg,  var);	  fnScope.removeChild(var);    	non-compiled	[CE]  	13	None	replace
106	[BUG]  [BUGGY]  fnScope.removeChild(var.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.removeChild(var.getString());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.removeChild(var.getString());	  fnScope.removeChild(var);    	non-compiled	[CE]  	13	None	replace
107	[BUG]  [BUGGY]  fnScope.removeChild(argList.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.removeChild(argList.getLastChild());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.removeChild(argList.getLastChild());	  fnScope.removeChild(var);    	non-compiled	[CE]  	13	None	replace
108	[BUG]  [BUGGY]  argList.addChildAfter(var);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildAfter(var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildAfter(var);	  argList.addChildToFront(lastArg);    	non-compiled	[CE]  	7	None	replace
109	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  referenced);	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
110	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  nameNode));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  nameNode));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  nameNode));	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
111	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  referenced));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  referenced));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  referenced));	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
112	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.toString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.toString()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.toString()));	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
113	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.getString()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.getString()));	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
114	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.getType()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.getType()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.getType()));	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var));	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(referenced.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  referenced);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION,  referenced);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()!=  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var));	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
120	[BUG]  [BUGGY]  argList.addFirstChild(var);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addFirstChild(var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addFirstChild(var);	  argList.addLastChild(lastArg);    	non-compiled	[CE]  	27	None	replace
121	[BUG]  [BUGGY]  argList.removeChildAfter(var,  lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildAfter(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildAfter(var,  lastArg);	  argList.addChildToFront(var,    referenced);    	non-compiled	[CE]  	5	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
124	[BUG]  [BUGGY]  argList.removeChildToBack(var,  lastArg);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildToBack(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildToBack(var,  lastArg);	  argList.addChildToBack(var,    referenced);    	non-compiled	[CE]  	20	None	replace
125	[BUG]  [BUGGY]  argList.removeChildrenToFront(var,  lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildrenToFront(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildrenToFront(var,  lastArg);	  argList.addChildrenToFront(var,    referenced);    	non-compiled	[CE]  	19	None	replace
126	[BUG]  [BUGGY]  argList.removeChildBefore(var);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildBefore(var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildBefore(var);	  argList.removeChildAfter(var);    	non-compiled	[CE]  	36	None	replace
127	[BUG]  [BUGGY]  argList.removeChild(lastArg,  nameNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  nameNode);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  nameNode);	  argList.removeChild(lastArg,    var);    	non-compiled	[CE]  	1	None	replace
128	[BUG]  [BUGGY]  argList.removeChild(lastArg,  ref);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  ref);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  ref);	  argList.removeChild(lastArg,    var);    	non-compiled	[CE]  	1	None	replace
129	[BUG]  [BUGGY]  argList.removeChild(firstArg,  var);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(firstArg,  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(firstArg,  var);	  argList.removeChild(lastArg,    var);    	non-compiled	[CE]  	1	None	replace
130	[BUG]  [BUGGY]  argList.removeChildToFront(var,  referenced);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildToFront(var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildToFront(var,  referenced);	  argList.removeChildToFront(var);    	non-compiled	[CE]  	39	None	replace
131	[BUG]  [BUGGY]  argList.removeChildToFront(var,  lastArg);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildToFront(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildToFront(var,  lastArg);	  argList.addChildToFront(var,    lastArg);    	non-compiled	[CE]  	3	None	replace
132	[BUG]  [BUGGY]  argList.remove(0);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.remove(0);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.remove(0);	  argList.removeLastChild();    	non-compiled	[CE]  	38	None	replace
133	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  false);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY),  false);	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
134	[BUG]  [BUGGY]  argList.removeChild(lastArg,  new  Node(Token.EMPTY));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  new  Node(Token.EMPTY));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  new  Node(Token.EMPTY));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
135	[BUG]  [BUGGY]  argList.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(n,  new  Node(Token.EMPTY));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
136	[BUG]  [BUGGY]  fnScope.replaceChild(argList,  lastArg);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.replaceChild(argList,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.replaceChild(argList,  lastArg);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	18	None	replace
137	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var,  referenced.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var,  referenced.getString()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var,  referenced.getString()));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
138	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.toString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.toString()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.toString()));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
139	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var,  nameNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var,  nameNode.getString()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var,  nameNode.getString()));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
140	[BUG]  [BUGGY]  argList.removeChildrenToFront(lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildrenToFront(lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildrenToFront(lastArg);	  argList.removeChildrenToFront(var);    	non-compiled	[CE]  	40	None	replace
141	[BUG]  [BUGGY]  argList.removeChildToBack(var,  referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildToBack(var,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildToBack(var,  referenced);	  argList.removeChildToBack(var);    	non-compiled	[CE]  	35	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(argList.contains(var));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(argList.contains(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(argList.contains(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(referenced.containsKey(var));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(referenced.containsKey(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(referenced.containsKey(var));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(var.equals(referenced));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.equals(referenced));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.equals(referenced));	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
145	[BUG]  [BUGGY]  argList.detachFromParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.detachFromParent();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.detachFromParent();	  argList.removeChildren();    	non-compiled	[CE]  	51	None	replace
146	[BUG]  [BUGGY]  fnScope.removeChild(argList);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.removeChild(argList);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.removeChild(argList);	  fnScope.removeChild(var);    	non-compiled	[CE]  	13	None	replace
147	[BUG]  [BUGGY]  fnScope.replaceChild(lastArg,  lastArg);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  fnScope.replaceChild(lastArg,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	fnScope.replaceChild(lastArg,  lastArg);	  fnScope.removeChild(var);    	non-compiled	[CE]  	13	None	replace
148	[BUG]  [BUGGY]  argList.removeChild(var.getString()  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var.getString()  -  1);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var.getString()  -  1);	  argList.removeChild(var.getString());    	non-compiled	[CE]  	23	None	replace
149	[BUG]  [BUGGY]  lastArg  =  var.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  var.removeFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  var.removeFirstChild();	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	47	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
152	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(toReplaceWithZero));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(toReplaceWithZero));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(toReplaceWithZero));	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
153	[BUG]  [BUGGY]  argList.removeChild(lastArg,  new  Node(var));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  new  Node(var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  new  Node(var));	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
154	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  nameNode);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  nameNode);	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
155	[BUG]  [BUGGY]  argList.removeChild(lastArg,  new  Node(Token.NAME,  var));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  new  Node(Token.NAME,  var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  new  Node(Token.NAME,  var));	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
156	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  false);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  false);	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
157	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  true);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  true);	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
158	[BUG]  [BUGGY]  Node  lastArg  =  var.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  var.removeFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  var.removeFirstChild();	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	12	None	replace
159	[BUG]  [BUGGY]  argList.removeChild(lastArg  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg  +  1);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg  +  1);	  argList.removeChild(var,    lastArg    +    1);    	non-compiled	[CE]  	4	None	replace
160	[BUG]  [BUGGY]  argList.removeChild(var,  lastArg  +  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var,  lastArg  +  2);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var,  lastArg  +  2);	  argList.removeChild(var,    lastArg    +    1);    	non-compiled	[CE]  	4	None	replace
161	[BUG]  [BUGGY]  NodeUtil.removeChild(lastArg,  referenced,  var);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(lastArg,  referenced,  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(lastArg,  referenced,  var);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
162	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var,  nameNode));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var,  nameNode));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var,  nameNode));	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
163	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.VAR,  var));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.VAR,  var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.VAR,  var));	  argList.replaceChild(lastArg,    new    Node(var));    	non-compiled	[CE]  	41	None	replace
164	[BUG]  [BUGGY]  argList.removeChild(lastArg,  var.toString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  var.toString());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  var.toString());	  argList.removeChild(lastArg,    var);    	non-compiled	[CE]  	1	None	replace
165	[BUG]  [BUGGY]  lastArg  =  var.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  var.getNext();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  var.getNext();	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	47	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.BLOCK);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.VAR);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(argList.getType()  ==  Token.VAR);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.CALL);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.CALL);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.CALL);	  Preconditions.checkState(var.getType()    ==    Token.VAR);    	non-compiled	[CE]  	48	None	replace
169	[BUG]  [BUGGY]  Node  lastArg  =  var.lastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Node  lastArg  =  var.lastChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Node  lastArg  =  var.lastChild();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	14	None	replace
170	[BUG]  [BUGGY]  NodeUtil.removeChild(lastArg,  argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(lastArg,  argList);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(lastArg,  argList);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
171	[BUG]  [BUGGY]  NodeUtil.removeChild(memberScope,  lastArg,  referenced);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(memberScope,  lastArg,  referenced);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(memberScope,  lastArg,  referenced);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
172	[BUG]  [BUGGY]  NodeUtil.removeChild(memberScope,  var);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(memberScope,  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(memberScope,  var);	  NodeUtil.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	33	None	replace
173	[BUG]  [BUGGY]  lastArg  =  argList.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  lastArg  =  argList.removeFirstChild();  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	lastArg  =  argList.removeFirstChild();	  lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	46	None	replace
174	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.cloneTree()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.cloneTree()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.cloneTree()));	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
175	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  var);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  var);	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
176	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  ref);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  ref);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var),  ref);	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
177	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.name));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.name));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME,  var.name));	  argList.replaceChild(lastArg,    new    Node(Token.NAME,    var));    	non-compiled	[CE]  	44	None	replace
178	[BUG]  [BUGGY]  argList.removeChildAt(lastArg);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildAt(lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildAt(lastArg);	  argList.removeChildToBack(var);    	non-compiled	[CE]  	35	None	replace
179	[BUG]  [BUGGY]  NodeUtil.removeChild(argList);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  NodeUtil.removeChild(argList);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	NodeUtil.removeChild(argList);	  NodeUtil.removeChild(lastArg);    	non-compiled	[CE]  	34	None	replace
180	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString(),  var.cloneTree()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString(),  var.cloneTree()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.getString(),  var.cloneTree()));	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
181	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString()),  var);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(var.getString()),  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(var.getString()),  var);	  argList.replaceChild(lastArg,    new    Node(var.getString()));    	non-compiled	[CE]  	43	None	replace
182	[BUG]  [BUGGY]  argList.removeChild(var.getName());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var.getName());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var.getName());	  argList.removeChild(var.getString());    	non-compiled	[CE]  	23	None	replace
183	[BUG]  [BUGGY]  argList.removeChildren(var);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChildren(var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChildren(var);	  argList.addChildrenToFront(var,    referenced);    	non-compiled	[CE]  	19	None	replace
184	[BUG]  [BUGGY]  argList.removeChild(lastArg,  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(lastArg,  null);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(lastArg,  null);	  argList.removeChild(lastArg,    referenced);    	non-compiled	[CE]  	10	None	replace
185	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY  |  Token.VAR,  var));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY  |  Token.VAR,  var));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY  |  Token.VAR,  var));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
186	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  var.cloneTree()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  var.cloneTree()));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY,  var.cloneTree()));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
187	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY  |  Token.NAME));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.EMPTY  |  Token.NAME));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.EMPTY  |  Token.NAME));	  argList.replaceChild(lastArg,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	45	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  var);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  var);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(argList.getFirstChild()  ==  var);	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.NAME);	  Preconditions.checkState(referenced.contains(var));    	non-compiled	[CE]  	17	None	replace
190	[BUG]  [BUGGY]  argList.addChildAfter(var,  lastArg);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.addChildAfter(var,  lastArg);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.addChildAfter(var,  lastArg);	  argList.addChildToFront(var,    referenced);    	non-compiled	[CE]  	5	None	replace
191	[BUG]  [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.replaceChild(lastArg,  new  Node(Token.NAME));  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.replaceChild(lastArg,  new  Node(Token.NAME));	  argList.replaceChild(lastArg,    null);    	non-compiled	[CE]  	42	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK);  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK);	  Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	15	None	replace
197	[BUG]  [BUGGY]  argList.removeChild(var.getNameNode());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {      [BUGGY]  argList.removeChild(var.getNameNode());  [BUGGY]      compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	argList.removeChild(var.getNameNode());	  argList.removeChild(var.getLastChild());    	non-compiled	[CE]  	24	None	replace
