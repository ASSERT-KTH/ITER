bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  argList);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  mayHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  mayHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  ||  mayHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Node  lastArg  =  argList.getLastChild();  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList.getLastChild();	      	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  Node  parent  =  argList.getParent();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Node  parent  =  argList.getParent();  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  parent  =  argList.getParent();	      	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  NodeUtil.removeChild(argList);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  NodeUtil.removeChild(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(argList);	      	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  Node  c  =  argList.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Node  c  =  argList.getFirstChild();  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  argList.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  Node  lastArg  =  argList.getFirstChild();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Node  lastArg  =  argList.getFirstChild();  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP);	      	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(function);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	2	None	replace
30	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.hasModifyCallers(argList);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.hasModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.hasModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(function);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	1	None	replace
33	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	1	None	replace
34	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(argList);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()  ==  null);	      	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  Node  body  =  argList.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Node  body  =  argList.getFirstChild();  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  argList.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()!=  null);	      	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  this);	      	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(function);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	2	None	replace
44	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(function);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	2	None	replace
45	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(scope);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(scope);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  boolean  modifyCallers  =  mightHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mightHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mightHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  function);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	6	None	replace
51	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(function);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	1	None	replace
52	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects;  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects;	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	6	None	replace
54	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	1	None	replace
56	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parent.canModifyCallers(function);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parent.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parent.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	1	None	replace
57	[BUG]  [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  arePropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  argList.removeChild(argList);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  argList.removeChild(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	argList.removeChild(argList);	      	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);    [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList);  [BUGGY]    &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	5	None	replace
