bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	13	None	replace
3	[BUG]  [BUGGY]  boolean  modifyCallers  =  mightHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mightHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mightHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mightHaveSecondarySideEffects    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	48	None	replace
4	[BUG]  [BUGGY]  Node  body  =  argList.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  argList.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  argList.getLastChild();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
5	[BUG]  [BUGGY]  Node  body  =  fnScope.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  fnScope.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  fnScope.getLastChild();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
6	[BUG]  [BUGGY]  Node  body  =  argList.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  argList.removeFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  argList.removeFirstChild();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
7	[BUG]  [BUGGY]  Node  body  =  fnScope.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  fnScope.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  fnScope.getFirstChild();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
8	[BUG]  [BUGGY]  Node  body  =  argList.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  argList.getNext();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  argList.getNext();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
9	[BUG]  [BUGGY]  Node  body  =  parentScope.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  parentScope.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  parentScope.getFirstChild();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
10	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  scope.canModifyCallers(function);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  scope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  scope.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	32	None	replace
11	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  parentScope.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  parentScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  ||  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	32	None	replace
12	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  scope.canModifyCallers(argList);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  scope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  scope.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	32	None	replace
13	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	32	None	replace
14	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  fnScope.canModifyCallers(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  fnScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  fnScope.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	32	None	replace
15	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(function);    	non-compiled	[CE]  	44	None	replace
16	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasChildren();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasChildren();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasChildren();	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(function);    	non-compiled	[CE]  	44	None	replace
17	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(function);    	non-compiled	[CE]  	44	None	replace
18	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.removeChild(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.removeChild(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.removeChild(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(function);    	non-compiled	[CE]  	44	None	replace
19	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(referenced);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(referenced);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(referenced);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(function);    	non-compiled	[CE]  	44	None	replace
20	[BUG]  [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    hasPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  parentScope.canModifyCallers(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  parentScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  hasPropertyAssign  &&  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    hasPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
23	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
24	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
25	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
26	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(argList);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScopeOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	51	None	replace
27	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  parentScopeOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  parentScopeOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  ||  parentScopeOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScopeOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	51	None	replace
28	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScopeOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	51	None	replace
29	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScopeOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	51	None	replace
30	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(fnScope);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScopeOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	51	None	replace
31	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(scope);    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers();	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(scope);    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(scope);    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(parentScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(parentScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(scope);    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(argList);    	non-compiled	[CE]  	18	None	replace
36	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(argList);    	non-compiled	[CE]  	18	None	replace
37	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(argList);    	non-compiled	[CE]  	18	None	replace
38	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	12	None	replace
39	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign.canModifyCallers(function);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	12	None	replace
40	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    ||    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	12	None	replace
41	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	12	None	replace
42	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  canHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  canHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  canHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  fnScope.getLastChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
44	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  function.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  function.getLastChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
45	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  function.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  function.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
46	[BUG]  [BUGGY]  Node  lastArg  =  parent.getLastChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  parent.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  parent.getLastChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
47	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign;	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	52	None	replace
48	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  mayHaveSecondarySideEffects;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  mayHaveSecondarySideEffects;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  ||  mayHaveSecondarySideEffects;	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	52	None	replace
49	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign;	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	52	None	replace
50	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign;	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	52	None	replace
51	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  preserveFunctionExpressionNames;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  preserveFunctionExpressionNames;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  preserveFunctionExpressionNames;	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	52	None	replace
52	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects.canModifyCallers(argList);    	non-compiled	[CE]  	16	None	replace
53	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects.canModifyCallers(argList);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects.canModifyCallers(argList);    	non-compiled	[CE]  	16	None	replace
54	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.removeCallers(argList);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.removeCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.removeCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects.canModifyCallers(argList);    	non-compiled	[CE]  	16	None	replace
55	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    ||    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	15	None	replace
56	[BUG]  [BUGGY]  Boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    ||    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	15	None	replace
57	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope,  argList);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    argList);    	non-compiled	[CE]  	1	None	replace
58	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  argList);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    argList);    	non-compiled	[CE]  	1	None	replace
59	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope,  argList);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    argList);    	non-compiled	[CE]  	1	None	replace
60	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(scope,  argList);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    argList);    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    argList);    	non-compiled	[CE]  	1	None	replace
62	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(scope);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	55	None	replace
63	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	55	None	replace
64	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  argList);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	55	None	replace
65	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(fnScope);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	55	None	replace
66	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  Boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  parentScope.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  parentScope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    parentScope.canModifyCallers(argList);    	non-compiled	[CE]  	50	None	replace
69	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  scope.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  scope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  scope.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    parentScope.canModifyCallers(argList);    	non-compiled	[CE]  	50	None	replace
70	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(function);    	non-compiled	[CE]  	29	None	replace
71	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(function);    	non-compiled	[CE]  	29	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()!=  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()!=  Token.GETPROP);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()!=  Token.GETPROP);	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.GETPROP);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.GETPROP);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.GETPROP);	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.isGetOrSetKey(argList.getString()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.isGetOrSetKey(argList.getString()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.isGetOrSetKey(argList.getString()));	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getString()));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getString()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getString()));	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getString());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getString());  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getString());	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.isGetOrSetKey(argList.getFirstChild()));	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
78	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parent.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parent.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parent.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	45	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  argList,  null);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  null);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  function,  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  function,  this);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  function,  this);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  parent,  this);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  isPropertyAssign);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  isPropertyAssign);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  this,  isPropertyAssign);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lastArg,  this);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  lastArg,  this);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  lastArg,  this);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  parentScope);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  parentScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  this,  parentScope);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  this);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  this);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  parentScope,  this);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
86	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(parent);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
87	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  argList);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(parent,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(parent,  argList);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
88	[BUG]  [BUGGY]  NodeUtil.removeChild(lastArg);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(lastArg);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(lastArg);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
89	[BUG]  [BUGGY]  NodeUtil.removeChild(argList,  c);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(argList,  c);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(argList,  c);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
90	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  argList);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(compiler,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(compiler,  argList);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
91	[BUG]  [BUGGY]  NodeUtil.removeChild(scope,  argList);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(scope,  argList);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
92	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	4	None	replace
93	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	4	None	replace
94	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	4	None	replace
95	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	4	None	replace
96	[BUG]  [BUGGY]  Node  c  =  argList.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  c  =  argList.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  argList.getLastChild();	  Node    c    =    argList.getFirstChild();    	non-compiled	[CE]  	24	None	replace
97	[BUG]  [BUGGY]  Node  c  =  parentScope.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  c  =  parentScope.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  parentScope.getFirstChild();	  Node    c    =    argList.getFirstChild();    	non-compiled	[CE]  	24	None	replace
98	[BUG]  [BUGGY]  Node  c  =  argList.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  c  =  argList.getNext();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  argList.getNext();	  Node    c    =    argList.getFirstChild();    	non-compiled	[CE]  	24	None	replace
99	[BUG]  [BUGGY]  Node  c  =  fnScope.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  c  =  fnScope.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  fnScope.getFirstChild();	  Node    c    =    argList.getFirstChild();    	non-compiled	[CE]  	24	None	replace
100	[BUG]  [BUGGY]  Node  c  =  function.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  c  =  function.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  function.getFirstChild();	  Node    c    =    argList.getFirstChild();    	non-compiled	[CE]  	24	None	replace
101	[BUG]  [BUGGY]  Node  c  =  lastArg.getFirstChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  c  =  lastArg.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  lastArg.getFirstChild();	  Node    c    =    argList.getFirstChild();    	non-compiled	[CE]  	24	None	replace
102	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parent.canModifyCallers(argList);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parent.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parent.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(parent);    	non-compiled	[CE]  	54	None	replace
103	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	41	None	replace
104	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(argList);    	non-compiled	[CE]  	19	None	replace
105	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.hasModifyCallers(argList);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.hasModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.hasModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(argList);    	non-compiled	[CE]  	19	None	replace
106	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  parentScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  parentScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList,    fnScope);    	non-compiled	[CE]  	53	None	replace
107	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList,    fnScope);    	non-compiled	[CE]  	53	None	replace
108	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList,    fnScope);    	non-compiled	[CE]  	53	None	replace
109	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(argList,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList,    fnScope);    	non-compiled	[CE]  	53	None	replace
110	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList,  callSiteOptimizer);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList,  callSiteOptimizer);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList,  callSiteOptimizer);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList,    fnScope);    	non-compiled	[CE]  	53	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()!=  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()!=  Token.NAME);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()!=  Token.NAME);	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME,  argList.getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME,  argList.getString());  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME,  argList.getString());	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  &&!NodeUtil.isGetOrSetKey(argList.getString()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  &&!NodeUtil.isGetOrSetKey(argList.getString()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  &&!NodeUtil.isGetOrSetKey(argList.getString()));	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.FUNCTION);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(argList.getString()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(argList.getString()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(argList.getString()));	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.GETPROP);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.GETPROP);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.GETPROP);	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
117	[BUG]  [BUGGY]  argList.removeChild(lastArg);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  argList.removeChild(lastArg);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	argList.removeChild(lastArg);	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
118	[BUG]  [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	if(argList!=  null)  {  argList.removeChild(argList);  }	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
119	[BUG]  [BUGGY]  argList.removeChild(n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  argList.removeChild(n);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	argList.removeChild(n);	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
120	[BUG]  [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  compiler.reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  compiler.reportCodeChange();  }	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
121	[BUG]  [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getFirstChild()));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getFirstChild()));  }  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getFirstChild()));  }	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
122	[BUG]  [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Node  lastArg  =  argList.getLastChild();  compiler.reportCodeChange();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Node  lastArg  =  argList.getLastChild();  compiler.reportCodeChange();  }  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Node  lastArg  =  argList.getLastChild();  compiler.reportCodeChange();  }	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
123	[BUG]  [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getLastChild()));  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getLastChild()));  }  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getLastChild()));  }	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(argList.getLastChild()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getLastChild()!=  null);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getLastChild()!=  null);	  Preconditions.checkState(argList.getFirstChild()!=    null);    	non-compiled	[CE]  	38	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getFirstChild()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getFirstChild()!=  null);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getFirstChild()!=  null);	  Preconditions.checkState(argList.getFirstChild()!=    null);    	non-compiled	[CE]  	38	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(argList.getFirstChild()!=    null);    	non-compiled	[CE]  	38	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getLastChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getLastChild().getType()  ==  Token.FUNCTION);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getLastChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(argList.getFirstChild()!=    null);    	non-compiled	[CE]  	38	None	replace
128	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  argList.getLastChild()  +  1;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList.getLastChild()  +  1;	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	20	None	replace
129	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	7	None	replace
130	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(argList);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	7	None	replace
131	[BUG]  [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  arePropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    arePropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	57	None	replace
132	[BUG]  [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  ||  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  ||  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  arePropertyAssign  ||  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    arePropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	57	None	replace
133	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	59	None	replace
134	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	59	None	replace
135	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	59	None	replace
136	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  parent.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  parent.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  ||  parent.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	56	None	replace
137	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.isEmpty()  &&  parent.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.isEmpty()  &&  parent.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.isEmpty()  &&  parent.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	56	None	replace
138	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.hasChildren();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.hasChildren();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.hasChildren();	  boolean    modifyCallers    =    isPropertyAssign    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	56	None	replace
139	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
140	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope,  function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
141	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope,  function);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
142	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  function);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
143	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  function,  argList);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  function,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  function,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
144	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	27	None	replace
145	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	27	None	replace
146	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	27	None	replace
147	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.canModifyCallers(scope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(scope);    	non-compiled	[CE]  	46	None	replace
148	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(parentScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(parentScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(scope);    	non-compiled	[CE]  	46	None	replace
149	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasModifyCallers(scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(scope);    	non-compiled	[CE]  	46	None	replace
150	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(scope);    	non-compiled	[CE]  	46	None	replace
151	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  scope.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	28	None	replace
152	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	28	None	replace
153	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.hasModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.hasModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.hasModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	28	None	replace
154	[BUG]  [BUGGY]  Node  parent  =  argList.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  parent  =  argList.getNext();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  parent  =  argList.getNext();	  Node    parent    =    argList.getParent();    	non-compiled	[CE]  	21	None	replace
155	[BUG]  [BUGGY]  Node  parent  =  argList.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  parent  =  argList.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  parent  =  argList.getLastChild();	  Node    parent    =    argList.getParent();    	non-compiled	[CE]  	21	None	replace
156	[BUG]  [BUGGY]  Node  parent  =  argList.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  parent  =  argList.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  parent  =  argList.getFirstChild();	  Node    parent    =    argList.getParent();    	non-compiled	[CE]  	21	None	replace
157	[BUG]  [BUGGY]  Node  parent  =  argList.getParentNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  parent  =  argList.getParentNode();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  parent  =  argList.getParentNode();	  Node    parent    =    argList.getParent();    	non-compiled	[CE]  	21	None	replace
158	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  parent  =  fnScope.getParent();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  parent  =  fnScope.getParent();	  Node    parent    =    argList.getParent();    	non-compiled	[CE]  	21	None	replace
159	[BUG]  [BUGGY]  Node  parent  =  argList.getPrevious();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  parent  =  argList.getPrevious();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  parent  =  argList.getPrevious();	  Node    parent    =    argList.getParent();    	non-compiled	[CE]  	21	None	replace
160	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parent.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parent.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  parent.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parent.canModifyCallers(argList);    	non-compiled	[CE]  	35	None	replace
161	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  function.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  function.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  function.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parent.canModifyCallers(argList);    	non-compiled	[CE]  	35	None	replace
162	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(argList,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parent.canModifyCallers(argList);    	non-compiled	[CE]  	35	None	replace
163	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList,  parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(parent);    	non-compiled	[CE]  	42	None	replace
164	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.canModifyCallers();	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(parent);    	non-compiled	[CE]  	42	None	replace
165	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	14	None	replace
166	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	14	None	replace
167	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	14	None	replace
168	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	14	None	replace
169	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  ||  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  ||  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  ||  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
170	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
171	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
172	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
173	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(parentScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(parentScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
174	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope,  preserveFunctionExpressionNames);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope,  preserveFunctionExpressionNames);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(scope,  preserveFunctionExpressionNames);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
175	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    ||    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	10	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()!=  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()!=  Token.FUNCTION);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()!=  Token.FUNCTION);	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.VAR);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.VAR);	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getString()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getString()));	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.GETPROP);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.GETPROP);	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.CALL);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.CALL);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.CALL);	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(argList.getLastChild()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getLastChild()  ==  null);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getLastChild()  ==  null);	  Preconditions.checkState(argList.getFirstChild()    ==    null);    	non-compiled	[CE]  	36	None	replace
183	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    ||    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	2	None	replace
184	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	31	None	replace
185	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	31	None	replace
186	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	6	None	replace
187	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	6	None	replace
188	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	6	None	replace
189	[BUG]  [BUGGY]  boolean  modifyCallers  =  doesHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  doesHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doesHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	6	None	replace
190	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  doHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	6	None	replace
191	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope,  argList);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	47	None	replace
192	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	47	None	replace
193	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	47	None	replace
194	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	47	None	replace
195	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	47	None	replace
196	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	34	None	replace
197	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	17	None	replace
198	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	17	None	replace
199	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  maybeAliased.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  maybeAliased.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  maybeAliased.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	17	None	replace
200	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.hasModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.hasModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.hasModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.hasModifyCallers(argList);    	non-compiled	[CE]  	30	None	replace
201	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.hasModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.hasModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.hasModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.hasModifyCallers(argList);    	non-compiled	[CE]  	30	None	replace
202	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.hasModifyCallers(argList,  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.hasModifyCallers(argList,  isPropertyAssign);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.hasModifyCallers(argList,  isPropertyAssign);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.hasModifyCallers(argList);    	non-compiled	[CE]  	30	None	replace
203	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(function);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScopeOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	51	None	replace
204	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased.canModifyCallers(argList,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  maybeAliased.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList,    fnScope);    	non-compiled	[CE]  	53	None	replace
205	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(argList,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList,    fnScope);    	non-compiled	[CE]  	53	None	replace
206	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScope.canModifyCallers(parent);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	41	None	replace
207	[BUG]  [BUGGY]  Node  lastArg  =  argList.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  argList.removeFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList.removeFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
208	[BUG]  [BUGGY]  Node  lastArg  =  parent.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  parent.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  parent.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
209	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers();	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parent.canModifyCallers(argList);    	non-compiled	[CE]  	35	None	replace
210	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.contains(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.contains(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.contains(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parent.canModifyCallers(argList);    	non-compiled	[CE]  	35	None	replace
211	[BUG]  [BUGGY]  Node  body  =  argList!=  null?  argList.getLastChild()  :  argList.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  argList!=  null?  argList.getLastChild()  :  argList.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  argList!=  null?  argList.getLastChild()  :  argList.getLastChild();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
212	[BUG]  [BUGGY]  Node  body  =  argList!=  null?  argList.getLastChild()  :  argList.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  argList!=  null?  argList.getLastChild()  :  argList.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  argList!=  null?  argList.getLastChild()  :  argList.getFirstChild();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getFirstChild()));	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSecondarySideEffects(argList));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSecondarySideEffects(argList));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSecondarySideEffects(argList));	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getLastChild()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getLastChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetOrSetKey(argList.getLastChild()));	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
216	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.canModifyCallers(argList);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects.canModifyCallers(argList);    	non-compiled	[CE]  	16	None	replace
217	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!mayHaveSecondarySideEffects.canModifyCallers(argList);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!mayHaveSecondarySideEffects.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!mayHaveSecondarySideEffects.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects.canModifyCallers(argList);    	non-compiled	[CE]  	16	None	replace
218	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  hasPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  hasPropertyAssign;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  hasPropertyAssign;	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	52	None	replace
219	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  isPropertyAssign  &&  mayHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	12	None	replace
220	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects.canModifyCallers(scope);	  boolean    modifyCallers    =    isPropertyAssign    ||    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	12	None	replace
221	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(function);    	non-compiled	[CE]  	29	None	replace
222	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  isPropertyAssign  &&  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    parentScope.canModifyCallers(argList);    	non-compiled	[CE]  	50	None	replace
223	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  function.canModifyCallers(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  function.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  function.canModifyCallers(parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	45	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  argList,  this);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  argList,  this);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  parentScope,  argList,  this);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  root,  this);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  removeGlobals);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  argList,  removeGlobals);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  removeGlobals);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
227	[BUG]  [BUGGY]  NodeUtil.removeChild(argList,  fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(argList,  fnScope);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
228	[BUG]  [BUGGY]  NodeUtil.removeChild(parentList);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(parentList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(parentList);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
229	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	4	None	replace
230	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	4	None	replace
231	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.mayHaveSecondarySideEffects(argList);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.mayHaveSecondarySideEffects(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.mayHaveSecondarySideEffects(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
232	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
233	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
234	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope,  function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
235	[BUG]  [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  &&  parentScope.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  &&  parentScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  arePropertyAssign  &&  parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    arePropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	57	None	replace
236	[BUG]  [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  arePropertyAssign  &&  mayHaveSecondarySideEffects;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  arePropertyAssign  &&  mayHaveSecondarySideEffects;	  boolean    modifyCallers    =    arePropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	57	None	replace
237	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	7	None	replace
238	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
239	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&!callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&!callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&!callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(argList.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(argList.getString()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(argList.getString()));	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.isGetOrSetKey(argList.getFirstChild()));	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(argList.getFirstChild()));	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.mayHaveSecondarySideEffects(argList));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.mayHaveSecondarySideEffects(argList));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  ||!NodeUtil.mayHaveSecondarySideEffects(argList));	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
244	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentOptimizer.canModifyCallers(argList);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(parent);    	non-compiled	[CE]  	54	None	replace
245	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	34	None	replace
246	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  canHaveSecondarySideEffects  &&  parentScope.canModifyCallers(argList);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	14	None	replace
247	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	47	None	replace
248	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(parentScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(parentScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	47	None	replace
249	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  maybeAliased  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	31	None	replace
250	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(scope,  function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(scope,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
251	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScopeOptimizer.canModifyCallers(scope,  function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScopeOptimizer.canModifyCallers(scope,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScopeOptimizer.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
252	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  moduleOptimizer.canModifyCallers(scope,  function);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  moduleOptimizer.canModifyCallers(scope,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  moduleOptimizer.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
253	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.hasModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.hasModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.hasModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.hasModifyCallers(argList);    	non-compiled	[CE]  	30	None	replace
254	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.hasModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.hasModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parent.hasModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.hasModifyCallers(argList);    	non-compiled	[CE]  	30	None	replace
255	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentOptimizer.canModifyCallers(argList);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(parent);    	non-compiled	[CE]  	42	None	replace
256	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  ||  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(parent);    	non-compiled	[CE]  	42	None	replace
257	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(parentScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(parentScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(parentScope);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	32	None	replace
258	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    parentScope.canModifyCallers(argList);    	non-compiled	[CE]  	18	None	replace
259	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects.canModifyCallers(scope);	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	33	None	replace
260	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.removeCallers(argList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.removeCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.removeCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(argList);    	non-compiled	[CE]  	19	None	replace
261	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	59	None	replace
262	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	27	None	replace
263	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  preserveFunctionExpressionNames  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	17	None	replace
264	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  checkPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	17	None	replace
265	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.canModifyCallers(parent);	  boolean    modifyCallers    =    isPropertyAssign    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	56	None	replace
266	[BUG]  [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parent.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parent.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  canHaveSecondarySideEffects  &&  parent.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	56	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getFirstChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getFirstChild()));	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(argList));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(argList));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(argList));	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getNext()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getNext()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getNext()));	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getLastChild()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getLastChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(argList.getLastChild()));	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
271	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(scope,  argList);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  parentScopeOptimizer.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    argList);    	non-compiled	[CE]  	1	None	replace
272	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  moduleOptimizer.canModifyCallers(scope,  argList);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  moduleOptimizer.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  moduleOptimizer.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    argList);    	non-compiled	[CE]  	1	None	replace
273	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  compiler.canModifyCallers(scope,  argList);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  compiler.canModifyCallers(scope,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  compiler.canModifyCallers(scope,  argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    argList);    	non-compiled	[CE]  	1	None	replace
274	[BUG]  [BUGGY]  Node  c  =  argList.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  c  =  argList.removeFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  argList.removeFirstChild();	  Node    c    =    argList.getFirstChild();    	non-compiled	[CE]  	24	None	replace
275	[BUG]  [BUGGY]  Node  c  =  fnScope.getCurrentNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  c  =  fnScope.getCurrentNode();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  c  =  fnScope.getCurrentNode();	  Node    c    =    argList.getFirstChild();    	non-compiled	[CE]  	24	None	replace
276	[BUG]  [BUGGY]  boolean  modifyCallers  =  couldHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  couldHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  couldHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mightHaveSecondarySideEffects    ||    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	48	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||!NodeUtil.isGetOrSetKey(argList.getLastChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||!NodeUtil.isGetOrSetKey(argList.getLastChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()  ==  null  ||!NodeUtil.isGetOrSetKey(argList.getLastChild()));	  Preconditions.checkState(argList.getFirstChild()    ==    null);    	non-compiled	[CE]  	36	None	replace
278	[BUG]  [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  hasPropertyAssign  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    hasPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	11	None	replace
279	[BUG]  [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  hasPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    hasPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	11	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&!NodeUtil.isGetOrSetKey(argList.getLastChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&!NodeUtil.isGetOrSetKey(argList.getLastChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()!=  null  &&!NodeUtil.isGetOrSetKey(argList.getLastChild()));	  Preconditions.checkState(argList.getFirstChild()!=    null);    	non-compiled	[CE]  	38	None	replace
281	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	6	None	replace
282	[BUG]  [BUGGY]  argList.removeChild(parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  argList.removeChild(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	argList.removeChild(parent);	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
283	[BUG]  [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getFirstChild()));  compiler.reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getFirstChild()));  compiler.reportCodeChange();  }  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getFirstChild()));  compiler.reportCodeChange();  }	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
284	[BUG]  [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getLastChild()));  compiler.reportCodeChange();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getLastChild()));  compiler.reportCodeChange();  }  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	if(argList!=  null)  {  argList.removeChild(argList);  }  else  {  Preconditions.checkState(NodeUtil.isGetOrSetKey(argList.getLastChild()));  compiler.reportCodeChange();  }	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
285	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(fnScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(scope);    	non-compiled	[CE]  	46	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.VAR);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.VAR);	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.CALL);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.CALL);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME  ||  argList.getType()  ==  Token.CALL);	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME,  argList.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.NAME,  argList.getFirstChild());  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.NAME,  argList.getFirstChild());	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkArgument(argList.getType()  ==  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkArgument(argList.getType()  ==  Token.NAME);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkArgument(argList.getType()  ==  Token.NAME);	  Preconditions.checkState(argList.getType()    ==    Token.NAME);    	non-compiled	[CE]  	40	None	replace
290	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(isPropertyAssign);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(isPropertyAssign);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(argList);    	non-compiled	[CE]  	19	None	replace
291	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty();	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(argList);    	non-compiled	[CE]  	19	None	replace
292	[BUG]  [BUGGY]  Node  parent  =  argList.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  parent  =  argList.removeFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  parent  =  argList.removeFirstChild();	  Node    parent    =    argList.getParent();    	non-compiled	[CE]  	21	None	replace
293	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(argList,    fnScope);    	non-compiled	[CE]  	53	None	replace
294	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(parent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(parent);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	32	None	replace
295	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.contains(parentScope.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.contains(parentScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.contains(parentScope.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScope.canModifyCallers(function);    	non-compiled	[CE]  	32	None	replace
296	[BUG]  [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  hasPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    hasPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	11	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  allFunctionScopes);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  allFunctionScopes);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  this,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  allFunctionScopes);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  argList,  allFunctionScopes);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  codingConvention);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  codingConvention);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  this,  codingConvention);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeTraversal.traverse(compiler,  argList,  this,  null);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeTraversal.traverse(compiler,  argList,  this,  null);	  NodeTraversal.traverse(compiler,    argList,    this);    	non-compiled	[CE]  	39	None	replace
301	[BUG]  [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  doHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    doHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	6	None	replace
302	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.isEmpty()  &&  parentScope.canModifyCallers(parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.isEmpty()    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	5	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(argList.getFirstChild()    ==    null);    	non-compiled	[CE]  	36	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(argList.getFirstChild()    ==    null);    	non-compiled	[CE]  	36	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.BLOCK);	  Preconditions.checkState(argList.getFirstChild()    ==    null);    	non-compiled	[CE]  	36	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(argList.getFirstChild()    ==    null);    	non-compiled	[CE]  	36	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.CALL);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.CALL);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.CALL);	  Preconditions.checkState(argList.getFirstChild()    ==    null);    	non-compiled	[CE]  	36	None	replace
308	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  ||  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(parent);    	non-compiled	[CE]  	54	None	replace
309	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&!callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	43	None	replace
310	[BUG]  [BUGGY]  argList.removeChild(new  Node(Token.NAME,  argList.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  argList.removeChild(new  Node(Token.NAME,  argList.getFirstChild()));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	argList.removeChild(new  Node(Token.NAME,  argList.getFirstChild()));	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
311	[BUG]  [BUGGY]  argList.removeChild(new  Node(Token.NAME));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  argList.removeChild(new  Node(Token.NAME));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	argList.removeChild(new  Node(Token.NAME));	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
312	[BUG]  [BUGGY]  argList.removeChild(argList.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  argList.removeChild(argList.getFirstChild());  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	argList.removeChild(argList.getFirstChild());	  argList.removeChild(argList);    	non-compiled	[CE]  	58	None	replace
313	[BUG]  [BUGGY]  Node  lastArg  =  argList!=  null?  argList.getLastChild()  :  argList.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  argList!=  null?  argList.getLastChild()  :  argList.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList!=  null?  argList.getLastChild()  :  argList.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
314	[BUG]  [BUGGY]  Node  lastArg  =  argList!=  null?  argList.getFirstChild()  :  argList.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  argList!=  null?  argList.getFirstChild()  :  argList.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList!=  null?  argList.getFirstChild()  :  argList.getLastChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
315	[BUG]  [BUGGY]  Node  lastArg  =  argList!=  null?  argList.getLastChild()  :  argList.getLastChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  argList!=  null?  argList.getLastChild()  :  argList.getLastChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList!=  null?  argList.getLastChild()  :  argList.getLastChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
316	[BUG]  [BUGGY]  Node  lastArg  =  argList!=  null?  argList.getFirstChild()  :  argList.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  argList!=  null?  argList.getFirstChild()  :  argList.getFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList!=  null?  argList.getFirstChild()  :  argList.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	25	None	replace
317	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	33	None	replace
318	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	33	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.BLOCK);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.FUNCTION  ||  argList.getType()  ==  Token.BLOCK);	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkArgument(argList.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkArgument(argList.getType()  ==  Token.FUNCTION);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkArgument(argList.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(argList.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	22	None	replace
321	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScope.canModifyCallers(fnScope);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	55	None	replace
322	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  canHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	4	None	replace
323	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	4	None	replace
324	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	34	None	replace
325	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(canHaveSecondarySideEffects);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(canHaveSecondarySideEffects);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.canModifyCallers(canHaveSecondarySideEffects);	  boolean    modifyCallers    =    canHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects.canModifyCallers(argList);    	non-compiled	[CE]  	16	None	replace
326	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.removeFirstChild();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.removeFirstChild();	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    argList.canModifyCallers(function);    	non-compiled	[CE]  	44	None	replace
327	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  parentScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(scope,  parentScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
328	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(scope,  function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(scope,  function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  fnScope.canModifyCallers(scope,  function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(scope,    function);    	non-compiled	[CE]  	49	None	replace
329	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasModifyCallers();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasModifyCallers();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  argList.hasModifyCallers();	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.hasModifyCallers(argList);    	non-compiled	[CE]  	30	None	replace
330	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	52	None	replace
331	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames;	  boolean    modifyCallers    =    isPropertyAssign    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	52	None	replace
332	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign.canModifyCallers(parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign.canModifyCallers(function);    	non-compiled	[CE]  	29	None	replace
333	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(parent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  parentScopeOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    isPropertyAssign    &&    parentScopeOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	51	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(argList.getFirstChild()!=    null);    	non-compiled	[CE]  	38	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " "));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " "));  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " "));	  Preconditions.checkState(argList.getFirstChild()!=    null);    	non-compiled	[CE]  	38	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.BLOCK);	  Preconditions.checkState(argList.getFirstChild()!=    null);    	non-compiled	[CE]  	38	None	replace
337	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	13	None	replace
338	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(varList);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(varList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(varList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(scope);    	non-compiled	[CE]  	47	None	replace
339	[BUG]  [BUGGY]  Node  lastArg  =  argList.removeChild(last);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  lastArg  =  argList.removeChild(last);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  lastArg  =  argList.removeChild(last);	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	20	None	replace
340	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  callSiteOptimizer);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  callSiteOptimizer);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  callSiteOptimizer);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	59	None	replace
341	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.isEmpty()  &&!callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.isEmpty()  &&!callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!referenced.isEmpty()  &&!callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	59	None	replace
342	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  fnScope);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  fnScope);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	59	None	replace
343	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  isPropertyAssign);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&!callSiteOptimizer.canModifyCallers(argList,  isPropertyAssign);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&!callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	59	None	replace
344	[BUG]  [BUGGY]  NodeUtil.removeChild(argList,  argList);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.removeChild(argList,  argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.removeChild(argList,  argList);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
345	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(argList);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	NodeUtil.redeclareVarsInsideBranch(argList);	  NodeUtil.removeChild(argList);    	non-compiled	[CE]  	23	None	replace
346	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.isEmpty();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.isEmpty();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.isEmpty();	  boolean    modifyCallers    =    isPropertyAssign    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	56	None	replace
347	[BUG]  [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.contains(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  isPropertyAssign  &&  argList.contains(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  isPropertyAssign  &&  argList.contains(function);	  boolean    modifyCallers    =    isPropertyAssign    &&    parent.canModifyCallers(function);    	non-compiled	[CE]  	56	None	replace
348	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  &&  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    callSiteOptimizer.canModifyCallers(parent);    	non-compiled	[CE]  	42	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getFirstChild());  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getFirstChild());	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getChildCount());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getChildCount());  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP,  argList.getChildCount());	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.VAR);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.VAR);	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.CALL);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.CALL);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Preconditions.checkState(argList.getType()  ==  Token.GETPROP  ||  argList.getType()  ==  Token.CALL);	  Preconditions.checkState(argList.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	26	None	replace
353	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(argList);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(argList);    	non-compiled	[CE]  	17	None	replace
354	[BUG]  [BUGGY]  Node  body  =  argList!=  null?  argList.getFirstChild()  :  fnScope.getRootNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  argList!=  null?  argList.getFirstChild()  :  fnScope.getRootNode();  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  argList!=  null?  argList.getFirstChild()  :  fnScope.getRootNode();	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
355	[BUG]  [BUGGY]  Node  body  =  argList!=  null?  argList.getFirstChild()  :  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  Node  body  =  argList!=  null?  argList.getFirstChild()  :  null;  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	Node  body  =  argList!=  null?  argList.getFirstChild()  :  null;	  Node    body    =    argList.getFirstChild();    	non-compiled	[CE]  	37	None	replace
356	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(function);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	27	None	replace
357	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  &&  callSiteOptimizer.canModifyCallers(parent);	  boolean    modifyCallers    =    mayHaveSecondarySideEffects    &&    isPropertyAssign    &&    callSiteOptimizer.canModifyCallers(function);    	non-compiled	[CE]  	27	None	replace
358	[BUG]  [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  ||  mayHaveSecondarySideEffects.canModifyCallers(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  function  =  fnScope.getRootNode();  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);      [BUGGY]  boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  ||  mayHaveSecondarySideEffects.canModifyCallers(function);  [BUGGY]      &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	boolean  modifyCallers  =  mayHaveSecondarySideEffects  &&  isPropertyAssign  ||  mayHaveSecondarySideEffects.canModifyCallers(function);	  boolean    modifyCallers    =    isPropertyAssign    ||    mayHaveSecondarySideEffects.canModifyCallers(function);    	non-compiled	[CE]  	12	None	replace
