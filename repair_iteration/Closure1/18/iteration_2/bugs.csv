bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
4	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  For(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
11	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
20	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  removeUnreferencedVars(fnScope.getParent());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getParent());	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
24	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
28	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
30	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
34	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
38	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
39	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  traverseAndRemoveUnusedReferences(fnScope);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope);	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
41	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	4	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
48	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
49	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
56	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  removeUnreferencedVars(fnScope);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope);	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  AllFunctionScopes.remove(fnScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  AllFunctionScopes.remove(fnScope);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(fnScope);	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	15	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
84	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  unclosed  string  literal  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
87	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
95	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
96	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
101	[BUG]  [BUGGY]  NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
102	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getParent());	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
105	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
111	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
112	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  fnScope);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
114	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
115	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
116	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
117	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
118	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(!isPropertyAssign)  {  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  compiler.reportCodeChange();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
120	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
128	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
129	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
131	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
136	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
137	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
138	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
140	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
141	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
148	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
149	[BUG]  [BUGGY]  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")&&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
152	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
153	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
156	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
157	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
161	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
162	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
163	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
164	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
169	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
170	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
171	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
172	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	12	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	12	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  if(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
179	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
180	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
181	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
