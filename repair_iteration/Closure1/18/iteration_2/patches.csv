bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  scope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  scope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  scope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  node,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(f  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(f	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnS  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnS	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
8	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
9	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
10	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
11	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  scope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  scope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  scope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  node,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  nameNode,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  allFunctionScopes,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  allFunctionScopes,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  allFunctionScopes,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
23	[BUG]  [BUGGY]  Assign.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(!removeUnreferencedVariables);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeUnreferencedVariables);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeUnreferencedVariables);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
27	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
32	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	73	None	replace
34	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
36	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
37	[BUG]  [BUGGY]  Assign  <  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
38	[BUG]  [BUGGY]  Constructor  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Constructor  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Constructor  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
39	[BUG]  [BUGGY]  Assign  <  S,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  S,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  S,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
40	[BUG]  [BUGGY]  Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
41	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
42	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope,  scope);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
43	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  fnScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope,  fnScope);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
44	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
45	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  codingConvention);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope,  codingConvention);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope,  codingConvention);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
46	[BUG]  [BUGGY]  removeUnreferencedVars(scope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(scope);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
47	[BUG]  [BUGGY]  traverseAndRemoveUnusedVars(fnScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedVars(fnScope);	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
48	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
49	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
50	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
51	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
52	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
53	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
55	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
57	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
58	[BUG]  [BUGGY]  traverseAndRemoveUnreferencedVars(fnScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferencedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferencedVars(fnScope);	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
59	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
60	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")&&    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	150	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")&&    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	150	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")&&    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	150	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")&&    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	150	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)||  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")&&    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	150	None	replace
66	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")&&    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	150	None	replace
67	[BUG]  [BUGGY]  traverseUnreferencedVars(fnScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseUnreferencedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseUnreferencedVars(fnScope);	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
68	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
69	[BUG]  [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
70	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
71	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
72	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
73	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
74	[BUG]  [BUGGY]  AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
79	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
81	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
82	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
83	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
84	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
85	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
90	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
93	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
96	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
97	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
101	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getParent(),  scope);	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
102	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  root);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getParent(),  root);	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
103	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getLastChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getLastChild());	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
104	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getFirstChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getFirstChild());	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
105	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getNameNode());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getNameNode());	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
106	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getParent(),  fnScope);	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
108	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
111	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
112	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
113	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
114	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getNext());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
116	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getNext());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
117	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getNext());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getNext());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getNext());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
121	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
122	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
125	[BUG]  [BUGGY]  NodeUtil.removeChild(nameNode,  fnScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(nameNode,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(nameNode,  fnScope);	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
126	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  ')'  expected	116	None	replace
127	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  fnScope);  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  ')'  expected	116	None	replace
128	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
130	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
132	[BUG]  [BUGGY]  NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
133	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
134	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
135	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
136	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
137	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
138	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero  +  1);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero  +  1);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero  +  1);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
139	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
140	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
141	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
142	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
143	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
144	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
147	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
148	[BUG]  [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
149	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
151	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
152	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnS  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnS	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeUnreferencedVars)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  removeUnreferencedVars)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  removeUnreferencedVars)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
159	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	100	None	replace
160	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	100	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	100	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	100	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	100	None	replace
164	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
167	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
168	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
169	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
170	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
171	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
172	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
173	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
174	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
175	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
176	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  ';'  expected	1	None	replace
178	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  ')'  expected	1	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
180	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  ';'  expected	1	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
182	[BUG]  [BUGGY]  AssertionFailedError.make(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.make(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.make(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  ';'  expected	1	None	replace
183	[BUG]  [BUGGY]  AssertionFailedError.make(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope()  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.make(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.make(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope()	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  ';'  expected	1	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	174	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	174	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	174	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	174	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	174	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	174	None	replace
190	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
192	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
193	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
197	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  resolveGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  resolveGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  resolveGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
199	[BUG]  [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
200	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
201	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
202	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
203	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
204	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
205	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
206	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
207	[BUG]  [BUGGY]  if(isPropertyAssign)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  compiler.reportCodeChange();  }	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
208	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  compiler.reportCodeChange();  }	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	118	None	replace
209	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
210	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.reportCodeChange();	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
211	[BUG]  [BUGGY]  Compiler  compiler  =  fnScope.getCompiler();  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Compiler  compiler  =  fnScope.getCompiler();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Compiler  compiler  =  fnScope.getCompiler();	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
212	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  compiler.reportCodeChange();	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
213	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  compiler.reportCodeChange();  }	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	118	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
216	[BUG]  [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(!removeUnreferencedVars.isEmpty());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeUnreferencedVars.isEmpty());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeUnreferencedVars.isEmpty());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(!removeUnreferencedVars.contains(fnScope));  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeUnreferencedVars.contains(fnScope));  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeUnreferencedVars.contains(fnScope));  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
226	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
227	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
229	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
230	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
231	[BUG]  [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
232	[BUG]  [BUGGY]  AllFunctionScopes.remove(fnScope.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AllFunctionScopes.remove(fnScope.scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(fnScope.scope);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
233	[BUG]  [BUGGY]  AllFunctionScopes.remove(fnScope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AllFunctionScopes.remove(fnScope.cloneTree());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(fnScope.cloneTree());	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
234	[BUG]  [BUGGY]  AllFunctionScopes.remove(scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AllFunctionScopes.remove(scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(scope);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
235	[BUG]  [BUGGY]  AllFunctionScopes.remove(fnScope.getParent());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AllFunctionScopes.remove(fnScope.getParent());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(fnScope.getParent());	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
236	[BUG]  [BUGGY]  AllFunctionScopes.remove(fnScope.nameNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AllFunctionScopes.remove(fnScope.nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(fnScope.nameNode);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
237	[BUG]  [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
242	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
244	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  this);	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
247	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  this);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  this);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  this);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
248	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  ')'  expected	114	None	replace
249	[BUG]  [BUGGY]  for(Scope  scope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  scope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  scope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
250	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  null);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  null);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  null);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
251	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
252	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
253	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
254	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
255	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  assignsByNode);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  assignsByNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  assignsByNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
256	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  nameNode,  assignsByNode);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  nameNode,  assignsByNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  nameNode,  assignsByNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
257	[BUG]  [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
259	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	128	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals  &&!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
269	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
273	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
278	[BUG]  [BUGGY]  NodeUtil.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
280	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
281	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
282	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
283	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
284	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
285	[BUG]  [BUGGY]  NodeUtil.removeChild(root,  fnScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(root,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(root,  fnScope);	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(root,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
286	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(parent,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(parent,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(parent,  fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(root,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
287	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(scope,  root);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(scope,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(scope,  root);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(root,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
288	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(fnScope,  root);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(fnScope,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(fnScope,  root);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(root,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
290	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
291	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
292	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
293	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	158	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	158	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnS  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnS	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	158	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	158	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	158	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(f  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(f	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	158	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)||  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	175	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ')'  expected	175	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	175	None	replace
305	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
307	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    treceAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  trecAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  trecAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  trecAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    treceAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
309	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    treceAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
310	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
311	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign,  scope);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign,  scope);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign,  scope);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
312	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
313	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
314	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign,  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplace  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign,  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplace  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign,  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplace	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	140	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
317	[BUG]  [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  +  1);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  +  1);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  +  1);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
320	[BUG]  [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeUnreferencedVars);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals  ||!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
326	[BUG]  [BUGGY]  Assign.For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
327	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
328	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
329	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
330	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  nameNode);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  nameNode);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
332	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
336	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign  &&  removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
343	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
344	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
346	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
347	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
349	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
352	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	50	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	50	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	50	None	replace
356	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVariables(fnScope);    }    	non-compiled	[CE]  ';'  expected	168	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVariables(fnScope);    }    	non-compiled	[CE]  ';'  expected	168	None	replace
358	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVariables(fnScope);    }    	non-compiled	[CE]  ';'  expected	168	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVariables(fnScope);    }    	non-compiled	[CE]  ';'  expected	168	None	replace
360	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVariables(fnScope);    }    	non-compiled	[CE]  ';'  expected	168	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVariables(fnScope);    }    	non-compiled	[CE]  ';'  expected	168	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
364	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVariables(fnScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVariables(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVariables(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope,  scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope,  scope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedReferenceArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedReferenceArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedReferenceArgs(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
368	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign()  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign()  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign()  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
370	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign(),  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign(),  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign(),  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
372	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign()  &&  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign()  &&  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign()  &&  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
377	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnS  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnS	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(f  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(f	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
382	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
384	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
390	[BUG]  [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
391	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
392	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
393	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
397	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
398	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
399	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    treceAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    treceAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
406	[BUG]  [BUGGY]  NodeUtil.removeChild(nameNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(nameNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(nameNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
407	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(parent,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(parent,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
408	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(node,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(node,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
409	[BUG]  [BUGGY]  NodeUtil.removeChild(assignNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(assignNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(assignNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
410	[BUG]  [BUGGY]  NodeUtil.removeChild(allFunctionScopes)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(allFunctionScopes)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(allFunctionScopes)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
411	[BUG]  [BUGGY]  NodeUtil.removeChild(scope,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(scope,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(scope,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
413	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
414	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
415	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
416	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
417	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	135	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	135	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Assign());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Assign());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  new  Assign());	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    new    Assign());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
421	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    new    Assign());    }    	non-compiled	[CE]  ')'  expected	115	None	replace
422	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  new  Assign());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  new  Assign());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  new  Assign());  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    new    Assign());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
423	[BUG]  [BUGGY]  for(Scope  scope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  scope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  scope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    new    Assign());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
424	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getParent(),  scope);	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
425	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  root);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getParent(),  root);	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
426	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getLastChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getLastChild());	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
427	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getFirstChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getFirstChild());	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
428	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope);	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
429	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getNameNode());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getNameNode());	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
430	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
431	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
436	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
437	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
438	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	144	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	144	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	144	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	144	None	replace
444	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	144	None	replace
445	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	111	None	replace
451	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  scope);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
452	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(scope);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
453	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  nameNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  nameNode);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
454	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  fnScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  fnScope);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
455	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  root);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  root);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
456	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  codingConvention);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  codingConvention);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  codingConvention);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
457	[BUG]  [BUGGY]  traverseAndRemoveUnreferences(fnScope,  scope);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferences(fnScope,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferences(fnScope,  scope);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
458	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
459	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
460	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
461	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
462	[BUG]  [BUGGY]  AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
465	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
467	[BUG]  [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
470	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  nameNode,  toReplaceWithZero);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  nameNode,  toReplaceWithZero);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  nameNode,  toReplaceWithZero);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
471	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  nameNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  nameNode);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
472	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
473	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  root);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  root);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
474	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
475	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
477	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
478	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
479	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
480	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero  +  1);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero  +  1);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero  +  1);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
482	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
483	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
484	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  ';'  expected	125	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
486	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
488	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
489	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
490	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
491	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
492	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
493	[BUG]  [BUGGY]  For(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  scopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
495	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	161	None	replace
500	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	161	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	161	None	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	161	None	replace
505	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
506	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	165	None	replace
507	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	165	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	165	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	165	None	replace
510	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
511	[BUG]  [BUGGY]  Constructor  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Constructor  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Constructor  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
512	[BUG]  [BUGGY]  Assign  <  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
513	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedReferenceArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedReferenceArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedReferenceArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
514	[BUG]  [BUGGY]  Assign  <  S,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  S,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  S,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
515	[BUG]  [BUGGY]  Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
516	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
517	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
518	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
520	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(!isFunctionAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isFunctionAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isFunctionAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(!isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
524	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
526	[BUG]  [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
527	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
528	[BUG]  [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
529	[BUG]  [BUGGY]  if(isPropertyAssign)  {  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }	  cast(fnScope,    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
530	[BUG]  [BUGGY]  if(isPropertyAssign)  {  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  cast(fnScope,    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
531	[BUG]  [BUGGY]  traverse(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverse(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverse(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  cast(fnScope,    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
532	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  cast(fnScope,    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
533	[BUG]  [BUGGY]  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	cast(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  cast(fnScope,    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
534	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
537	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
540	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
546	[BUG]  [BUGGY]  Assigns.For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assigns.For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assigns.For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
547	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
548	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
549	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
550	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
551	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
552	[BUG]  [BUGGY]  Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isReferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
553	[BUG]  [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
554	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
555	[BUG]  [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
558	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
559	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
560	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkState(removeUnreferencedVars)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeUnreferencedVars)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeUnreferencedVars)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
563	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
564	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
565	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
566	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
567	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
569	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
570	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
571	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
573	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
574	[BUG]  [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
575	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
576	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	151	None	replace
577	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
578	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
579	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
580	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
581	[BUG]  [BUGGY]  AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
582	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
583	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
584	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
585	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
586	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
587	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
588	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
589	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
590	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  allFunctionScopes);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  allFunctionScopes);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  node,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
591	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  scope,  allFunctionScopes);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  scope,  allFunctionScopes);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  scope,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  isPropertyAssign);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  isPropertyAssign);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  isPropertyAssign);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
593	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  scope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  scope);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
594	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  toReplaceWithZero);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  toReplaceWithZero);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  toReplaceWithZero);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
595	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  allFunctionScopes);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  allFunctionScopes);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  nameNode,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
597	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
598	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
600	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
601	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
602	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
603	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
604	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Traversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Traversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
605	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
609	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign()  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign()  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign()  ||  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
610	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
611	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
612	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign(),  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign(),  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign(),  isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
613	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	148	None	replace
615	[BUG]  [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
616	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
617	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
618	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
619	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
620	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
621	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
622	[BUG]  [BUGGY]  NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
623	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
624	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
625	[BUG]  [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
626	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  scope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  scope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
629	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
630	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
631	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
632	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
633	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
634	[BUG]  [BUGGY]  Context.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
635	[BUG]  [BUGGY]  Context.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
636	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	181	None	replace
637	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	181	None	replace
638	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	181	None	replace
639	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  scope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	181	None	replace
640	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
641	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
642	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
643	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
644	[BUG]  [BUGGY]  traverseAndRemoveUnreferencedReferences(fnScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferencedReferences(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferencedReferences(fnScope);	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
645	[BUG]  [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
646	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
648	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
649	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
650	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
651	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
652	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
653	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
654	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
655	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
656	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero,  scope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
657	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
658	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
659	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
660	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  +  1);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  +  1);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  +  1);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
661	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
662	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
663	[BUG]  [BUGGY]  NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
664	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
665	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  ')'  expected	157	None	replace
666	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
667	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
668	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	157	None	replace
669	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
670	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedParameters(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
671	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
672	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
673	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
674	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  fnScope);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
675	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  fnScope);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope,  fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
676	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
677	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
678	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  ')'  expected	162	None	replace
679	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
680	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	162	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  scope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
684	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
686	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
687	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
688	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
689	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
690	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
691	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
692	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
693	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
694	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
696	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
697	[BUG]  [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
698	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
699	[BUG]  [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
700	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
701	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
702	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
703	[BUG]  [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
704	[BUG]  [BUGGY]  NodeUtil.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
705	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
706	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
707	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssignment());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
708	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope.isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
709	[BUG]  [BUGGY]  AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  ';'  expected	171	None	replace
711	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
712	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  ';'  expected	171	None	replace
713	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
714	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondaryS  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondaryS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondaryS	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  ';'  expected	171	None	replace
715	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondary  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondary  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondary	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  ';'  expected	171	None	replace
716	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondaryS  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondaryS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondaryS	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  ';'  expected	171	None	replace
717	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
718	[BUG]  [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
719	[BUG]  [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
720	[BUG]  [BUGGY]  Context.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
721	[BUG]  [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
722	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
723	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
724	[BUG]  [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
725	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
726	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
727	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
728	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
729	[BUG]  [BUGGY]  Assign.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
730	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
731	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	156	None	replace
732	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  unclosed  string  literal	156	None	replace
733	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign()  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign()  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign()  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssignment()  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssignment()  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssignment()  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
735	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
736	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  resolveGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  resolveGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  resolveGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
737	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
738	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
739	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
740	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
741	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	166	None	replace
742	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	166	None	replace
743	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	166	None	replace
744	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	166	None	replace
745	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	166	None	replace
746	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
747	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  scope);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
748	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  nameNode);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  nameNode);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
749	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  nameNode);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  nameNode);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
750	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  root);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  root);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
751	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  root);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  root);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
752	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  scope);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
753	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
754	[BUG]  [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
755	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
756	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
757	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
758	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
759	[BUG]  [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
760	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
761	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
762	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
763	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  root);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  root);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
764	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
765	[BUG]  [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
766	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
767	[BUG]  [BUGGY]  AssertionFailedError.checkState(root  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(root  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(root  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
768	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
769	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
770	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  root);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope,  root);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
771	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferencedVars(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
772	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
773	[BUG]  [BUGGY]  AssertionFailedError  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
774	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
775	[BUG]  [BUGGY]  AssertionFailedError  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
776	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
777	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeReferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeReferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeReferencedFunctionArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
778	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
779	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
780	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
781	[BUG]  [BUGGY]  Preconditions.checkState(isReferenced());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isReferenced());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isReferenced());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
782	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
783	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
784	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	135	None	replace
785	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	135	None	replace
786	[BUG]  [BUGGY]  Preconditions.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	135	None	replace
787	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
788	[BUG]  [BUGGY]  Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
789	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    treceAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
790	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    treceAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
791	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
792	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
793	[BUG]  [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
794	[BUG]  [BUGGY]  cast(fnScope,  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  cast(fnScope,  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	cast(fnScope,  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  cast(fnScope,    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
795	[BUG]  [BUGGY]  traverse(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverse(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverse(fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  cast(fnScope,    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
796	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
797	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	73	None	replace
798	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
799	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
800	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
801	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
802	[BUG]  [BUGGY]  Context.checkState(fnScope  instanceof  Scope  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope  instanceof  Scope  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope  instanceof  Scope  &&  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
803	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
804	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
805	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
806	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
807	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
808	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  compiler.reportCodeChange();  }	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	118	None	replace
809	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  compiler.reportCodeChange();	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
810	[BUG]  [BUGGY]  Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
811	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
812	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
813	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
814	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
815	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
816	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
817	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
818	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
819	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  ';'  expected	125	None	replace
820	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  ';'  expected	125	None	replace
821	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  removeGlobals,  preserveFunctionExpressionNames)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  ';'  expected	125	None	replace
822	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctions,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctions,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctions,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  ';'  expected	125	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
826	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
827	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
828	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getName());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getName());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getName());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
829	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNameNode());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNameNode());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getNameNode());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
830	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
831	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	166	None	replace
832	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
833	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnS  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnS	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	166	None	replace
834	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
835	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
836	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
837	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
838	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
839	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
840	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
841	[BUG]  [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
842	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveReferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveReferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveReferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
843	[BUG]  [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
844	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
845	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionVars(fnScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionVars(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
846	[BUG]  [BUGGY]  Preconditions.checkState(isReferenceAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isReferenceAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isReferenceAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
847	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
848	[BUG]  [BUGGY]  Assign.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
849	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
850	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
851	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
852	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
853	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
854	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
855	[BUG]  [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
856	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByVar);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByVar);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByVar);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
857	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this.assignsByNode);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this.assignsByNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this.assignsByNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
858	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  nodeTraversal.traverse(compiler,  root,  assignsByNode);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  nodeTraversal.traverse(compiler,  root,  assignsByNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  nodeTraversal.traverse(compiler,  root,  assignsByNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
859	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  assignsByNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  ')'  expected	117	None	replace
860	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
861	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
862	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  mayHaveSecondarySideEffects);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  mayHaveSecondarySideEffects);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  mayHaveSecondarySideEffects);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
863	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  codingConvention);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  codingConvention);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  codingConvention);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
864	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  root);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  root);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
865	[BUG]  [BUGGY]  AssertionFailedError.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
866	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
867	[BUG]  [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
868	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
869	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  nameNode);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  nameNode);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
870	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  referenced);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  referenced);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  referenced);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
871	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
872	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
873	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
874	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
875	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	158	None	replace
876	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	158	None	replace
877	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	158	None	replace
878	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
879	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
880	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
881	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
882	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
883	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplace  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplace  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplace	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
884	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
885	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnS  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnS	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
886	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  treceAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    treceAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
887	[BUG]  [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
888	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	140	None	replace
889	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
890	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
891	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
892	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
893	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnS  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnS	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
894	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScop  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScop  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScop	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
895	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(f  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(f	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
896	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fn  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fn  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fn	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
897	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	174	None	replace
899	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	174	None	replace
900	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
901	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
902	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
903	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
904	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
905	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
906	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
907	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  nameNode);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  nameNode);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
908	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  root);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  root);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
909	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
910	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
911	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
912	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  nameNode,  new  Assign());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  nameNode,  new  Assign());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  nameNode,  new  Assign());  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    new    Assign());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
913	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseNode(root,  null,  scope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseNode(root,  null,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseNode(root,  null,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    new    Assign());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
914	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
915	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  root);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  root);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
916	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  nameNode);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
917	[BUG]  [BUGGY]  AllFunctionScopes.remove(root);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AllFunctionScopes.remove(root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(root);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
918	[BUG]  [BUGGY]  AllFunctionScopes.remove(fnScope,  nameNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AllFunctionScopes.remove(fnScope,  nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(fnScope,  nameNode);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
919	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
920	[BUG]  [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(root!=  null);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
921	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
922	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
923	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
924	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
925	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  ';'  expected	1	None	replace
926	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
927	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
928	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
929	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
930	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
931	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
932	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
933	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
934	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
935	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
936	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
937	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
938	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  scope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(root,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(root,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
939	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnS  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnS	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
940	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
941	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
942	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
943	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
944	[BUG]  [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
945	[BUG]  [BUGGY]  AssertionFailedError.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
946	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
947	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
948	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
949	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
950	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
951	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
952	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
953	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
954	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
955	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
956	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
957	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
958	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
959	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
960	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
961	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
962	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  =  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  =  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  =  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
963	[BUG]  [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
964	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
965	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
966	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
967	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
968	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
969	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
970	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  root);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  root);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
971	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  nameNode);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
972	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
973	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
974	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
975	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
976	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
977	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
978	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getName());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getName());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getName());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
979	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	144	None	replace
980	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	144	None	replace
981	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	144	None	replace
982	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.traverse(compiler,  root,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
983	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
984	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
985	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
986	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
987	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
988	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
989	[BUG]  [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
990	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	100	None	replace
991	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
992	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getName());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getName());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getName());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	100	None	replace
993	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNameNode());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNameNode());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNameNode());  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	100	None	replace
994	[BUG]  [BUGGY]  Assign.For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
995	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  nameNode);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
996	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  referenced);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  referenced);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  referenced);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
997	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
998	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
999	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
1000	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1001	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1002	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1003	[BUG]  [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1004	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1005	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
1006	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
1007	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
1008	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	181	None	replace
1009	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
1010	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
1011	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
1012	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope,  fnScope);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  traverseAndRemoveUnreferences(fnScope,  fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
1013	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getNext());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
1014	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1015	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1016	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1017	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1018	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1019	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1020	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1021	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1022	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1023	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1024	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign;  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign;  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign;  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	93	None	replace
1025	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1026	[BUG]  [BUGGY]  traverse(fnScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverse(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverse(fnScope);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1027	[BUG]  [BUGGY]  traverseAndRemoveUnreferences(fnScope,  root);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferences(fnScope,  root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferences(fnScope,  root);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1028	[BUG]  [BUGGY]  traverseAndRemoveUnreferences(fnScope,  nameNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferences(fnScope,  nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferences(fnScope,  nameNode);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1029	[BUG]  [BUGGY]  traverse(root,  fnScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverse(root,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverse(root,  fnScope);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1030	[BUG]  [BUGGY]  traverseAndRemoveUnreferences(root,  fnScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferences(root,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferences(root,  fnScope);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1031	[BUG]  [BUGGY]  traverseAndRemoveUnreferences(fnScope,  codingConvention);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferences(fnScope,  codingConvention);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferences(fnScope,  codingConvention);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1032	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
1033	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
1034	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
1035	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
1036	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1037	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  ';'  expected	171	None	replace
1038	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1039	[BUG]  [BUGGY]  Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
1040	[BUG]  [BUGGY]  NodeUtil.removeChild(memberNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(memberNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(memberNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
1041	[BUG]  [BUGGY]  NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
1042	[BUG]  [BUGGY]  NodeUtil.removeChild(allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
1043	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
1044	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
1045	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  scope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
1046	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	145	None	replace
1047	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)&&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
1048	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1049	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1050	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVariables(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1051	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVariables(fnScope);    }    	non-compiled	[CE]  ';'  expected	168	None	replace
1052	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1053	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
1054	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
1055	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
1056	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
1057	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
1058	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
1059	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1060	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnS  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnS	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1061	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1062	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferenced  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferenced  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferenced	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1063	[BUG]  [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root.getType()  ==  Token.FUNCTION  &&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
1064	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
1065	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1066	[BUG]  [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1067	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1068	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1069	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
1070	[BUG]  [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1071	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1072	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1073	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1074	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1075	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  null);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  null);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  null);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1076	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1077	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1078	[BUG]  [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1079	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1080	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1081	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
1082	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1083	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1084	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1085	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
1086	[BUG]  [BUGGY]  Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
1087	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  ensureFunctionExpressionNames;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
1088	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
1089	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||!removeGlobals)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||!removeGlobals)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||!removeGlobals)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
1090	[BUG]  [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1091	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
1092	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1093	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1094	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1095	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1096	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isFunctionAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1097	[BUG]  [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	151	None	replace
1098	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	151	None	replace
1099	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1100	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1101	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getName());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getName());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getName());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1102	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1103	[BUG]  [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(root!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1104	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1105	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
1106	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isFunctionAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
1107	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
1108	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    scope);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1109	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
1110	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	175	None	replace
1111	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)&&  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign)&&  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	175	None	replace
1112	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&!removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&!removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&!removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	175	None	replace
1113	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1114	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
1115	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope!=  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1116	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(root!=  null)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
1117	[BUG]  [BUGGY]  Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeAllFunctions)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
1118	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNameNode());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNameNode());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNameNode());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
1119	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	165	None	replace
1120	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  nameNode);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
1121	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(root,  toReplaceWithZero);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(root,  toReplaceWithZero);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(root,  toReplaceWithZero);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1122	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  root);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  root);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  root);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1123	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  scope);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1124	[BUG]  [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
1125	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
1126	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
1127	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
1128	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
1129	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
1130	[BUG]  [BUGGY]  Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
1131	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1132	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1133	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1134	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1135	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAllVars(fnScope);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAllVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAllVars(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
1136	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  nameNode);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  nameNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  nameNode);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
1137	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseNode(fnScope);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseNode(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseNode(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
1138	[BUG]  [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplace  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplace  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplace	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
1139	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
1140	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
1141	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent());	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1142	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1143	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
1144	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
1145	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  root);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope,  root);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope,  root);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
1146	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  nameNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope,  nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope,  nameNode);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
1147	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
1148	[BUG]  [BUGGY]  NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(root,  allFunctionScopes)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
1149	[BUG]  [BUGGY]  NodeUtil.removeChild(fnScope,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(fnScope,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(fnScope,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
1150	[BUG]  [BUGGY]  NodeUtil.removeChild(assignNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeUtil.removeChild(assignNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeUtil.removeChild(assignNode,  allFunctionScopes)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeUtil.removeChild(root,    allFunctionScopes)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	101	None	replace
1151	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1152	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
1153	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope,    fnScope);    }    	non-compiled	[CE]  ';'  expected	162	None	replace
1154	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope.getNameNode());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getParent(),  fnScope.getNameNode());	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1155	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope.getLastChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getParent(),  fnScope.getLastChild());	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1156	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope.getTarget());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope.getTarget());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getParent(),  fnScope.getTarget());	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1157	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope.getDeclaringConvention());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.getParent(),  fnScope.getDeclaringConvention());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.getParent(),  fnScope.getDeclaringConvention());	  removeUnreferencedVars(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1158	[BUG]  [BUGGY]  traverse(root,  fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverse(root,  fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverse(root,  fnScope,  isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  cast(fnScope,    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
1159	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  ignoreUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    ignoreUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1160	[BUG]  [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1161	[BUG]  [BUGGY]  Preconditions.checkState(!removeUnreferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!removeUnreferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!removeUnreferenced);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferences(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1162	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1163	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
1164	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1165	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1166	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1167	[BUG]  [BUGGY]  Context.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
1168	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
1169	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  assignsByNode);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  assignsByNode);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  assignsByNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1170	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  assignsByNode,  scope);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  assignsByNode,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  assignsByNode,  scope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    assignsByNode);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1171	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1172	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)moveUnreferencedFunctionArgs(fnScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)moveUnreferencedFunctionArgs(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)moveUnreferencedFunctionArgs(fnScope);	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1173	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
1174	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  <  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  <  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  <  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
1175	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.scope);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.scope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
1176	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
1177	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
1178	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1179	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1180	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
1181	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedParameters(fnScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedParameters(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedParameters(fnScope);	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1182	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedParameters(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedParameters(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1183	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
1184	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
1185	[BUG]  [BUGGY]  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferences(fnScope,  toReplaceWithZero);	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1186	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
1187	[BUG]  [BUGGY]  Preconditions.checkState(removeGlobals  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(removeGlobals  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(removeGlobals  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1188	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
1189	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  mayHaveSecondarySideEffects);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  mayHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  mayHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1190	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1191	[BUG]  [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(fnScope!=  null);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1192	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1193	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnusedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1194	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1195	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
1196	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
1197	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
1198	[BUG]  [BUGGY]  AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
1199	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
1200	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes);  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes);  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  =  allFunctionScopes);  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
1201	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedParameters(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedParameters(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedParameters(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	181	None	replace
1202	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1203	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1204	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  ||  isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
1205	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
1206	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1207	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1208	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(f  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(f	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
1209	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)remov  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)remov  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)remov	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
1210	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fn  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fn  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedVars(fn	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	159	None	replace
1211	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
1212	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
1213	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
1214	[BUG]  [BUGGY]  Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
1215	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1216	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
1218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  this,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
1219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	176	None	replace
1220	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	146	None	replace
1221	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnS  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnS	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1222	[BUG]  [BUGGY]  Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
1223	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getNameNode());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getNameNode());	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1224	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getParent());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getParent());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getParent());	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1225	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getLastChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedFunctionArgs(fnScope.getParent(),  fnScope.getLastChild());	  removeUnreferencedFunctionArgs(fnScope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1226	[BUG]  [BUGGY]  AssertionFailedError.checkNotNull(toReplaceWithZero);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkNotNull(toReplaceWithZero);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkNotNull(toReplaceWithZero);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
1227	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope  ==  null);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
1228	[BUG]  [BUGGY]  AssertionFailedError.checkState(shouldHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplace  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(shouldHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplace  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(shouldHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplace	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ')'  expected	140	None	replace
1229	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1230	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
1231	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
1232	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1233	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
1234	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1235	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1236	[BUG]  [BUGGY]  AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1237	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
1238	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
1239	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  this,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
1241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
1242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  nameNode,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  nameNode,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  nameNode,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent()	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent()    	non-compiled	[CE]  ';'  expected	177	None	replace
1243	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
1244	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  ')'  expected	116	None	replace
1245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  ';'  expected	125	None	replace
1246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  ';'  expected	125	None	replace
1247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    	non-compiled	[CE]  ';'  expected	125	None	replace
1248	[BUG]  [BUGGY]  traverseAndRemoveUnreferences(fnScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferences(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferences(fnScope);	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
1249	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  ';'  expected	1	None	replace
1250	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1251	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope.getScope());  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope.getScope());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope.getScope());  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  	1	None	replace
1252	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope()  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getScope()	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getScope());    }    	non-compiled	[CE]  ';'  expected	1	None	replace
1253	[BUG]  [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
1254	[BUG]  [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
1255	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
1256	[BUG]  [BUGGY]  AssertionFailedError.checkState(shouldHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(shouldHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(shouldHaveSecondarySideEffects);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
1257	[BUG]  [BUGGY]  AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
1258	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1259	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign());  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign());    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
1260	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1261	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isVarArgs)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isVarArgs)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  isVarArgs)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")&&    isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	150	None	replace
1262	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  scope);  }	  Preconditions.checkState(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
1263	[BUG]  [BUGGY]  Context.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkArgument(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
1264	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
1265	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  scope)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
1266	[BUG]  [BUGGY]  Assigns.For(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assigns.For(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assigns.For(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    fnScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
1267	[BUG]  [BUGGY]  if(!isPropertyAssign  &&!removeGlobals)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign  &&!removeGlobals)  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign  &&!removeGlobals)  {  compiler.reportCodeChange();  }	  if(!isPropertyAssign)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReference  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReference  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReference	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
1269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedRe  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedRe  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedRe	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
1270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(f  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  preserveFunctionExpressionNames,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(f	  NodeTraversal.traverse(compiler,    root,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
1271	[BUG]  [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
1272	[BUG]  [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  Preconditions.checkState(!removeGlobals);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
1273	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(!removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
1274	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fn  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fn  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fn	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  not  a  statement	158	None	replace
1275	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
1276	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
1277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScop	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
1278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  defGlobals,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
1279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  nameNode,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  nameNode,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  nameNode,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
1280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  toReplaceWithZero,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  toReplaceWithZero,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  fnScope,  toReplaceWithZero,  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.get	  NodeTraversal.traverse(compiler,    fnScope,    preserveFunctionExpressionNames,    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	178	None	replace
1281	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAllVars(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAllVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAllVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
1282	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
1283	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1284	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  visitUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    visitUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1285	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
1286	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1287	[BUG]  [BUGGY]  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferencedVars(fnScope,  toReplaceWithZero);	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1288	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1289	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1290	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1291	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1292	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedReferences(fnScope);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
1293	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedVars(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedVars(fnScope);    	non-compiled	[CE]  ';'  expected	68	None	replace
1294	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  cloneTree);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  cloneTree);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  cloneTree);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1295	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  namingNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  namingNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  namingNode);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1296	[BUG]  [BUGGY]  traverse(fnScope,  toReplaceWithZero);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverse(fnScope,  toReplaceWithZero);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverse(fnScope,  toReplaceWithZero);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1297	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  fnNameNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  fnNameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  fnNameNode);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1298	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  vars);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  vars);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  vars);	  traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1299	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1300	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  new  Assign());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  new  Assign());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  new  Assign());  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    new    Assign());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1301	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  Assign());  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeTraversal.traverse(compiler,    root,    new    Assign());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1302	[BUG]  [BUGGY]  Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  T>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
1303	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1304	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1305	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedVars(fnScope,  toReplaceWithZero);  }	  if(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedVars(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
1306	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
1307	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
1308	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  collectUnreferencedVars(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    collectUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
1309	[BUG]  [BUGGY]  AllFunctionScopes.remove(fnScope.getOwnerFunction());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AllFunctionScopes.remove(fnScope.getOwnerFunction());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AllFunctionScopes.remove(fnScope.getOwnerFunction());	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
1310	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
1311	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseWithRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseWithRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseWithRemoveUnusedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
1312	[BUG]  [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseOrRemoveUnusedVars(fnScope);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseOrRemoveUnusedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign  <  N,  V>  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseOrRemoveUnusedVars(fnScope);  }	  Assign    <    N,    V>    isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedVars(fnScope);    }    	non-compiled	[CE]  ';'  expected	163	None	replace
1313	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mayHaveSecondarySideEffects	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  ')'  expected	171	None	replace
1314	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  couldHaveSecondarySideEffects);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  couldHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  couldHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1315	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mightHaveSecondarySideEffects);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mightHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  mightHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1316	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  maybeAliased);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  maybeAliased);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  maybeAliased);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1317	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  couldHaveSecondarySideEffects);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  couldHaveSecondarySideEffects);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope,  couldHaveSecondarySideEffects);  }	  if(!isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope,    mayHaveSecondarySideEffects);    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1318	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1319	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope,  fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1320	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
1321	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
1322	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(scope,  root,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(scope,  root,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(scope,  root,  fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(root,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1323	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(root,  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(root,  fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	for(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(root,  fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    NodeUtil.removeChild(root,    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1324	[BUG]  [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(this.isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1325	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseVars(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1326	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  ';'  expected	64	None	replace
1327	[BUG]  [BUGGY]  if(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
1328	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1329	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  removeUnreferencedVars(fnScope.scope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	removeUnreferencedVars(fnScope.scope);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
1330	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(f	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	175	None	replace
1331	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
1332	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
1333	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getPar	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
1334	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    &&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getPar    	non-compiled	[CE]  ';'  expected	22	None	replace
1335	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1336	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1337	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1338	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(f  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(f  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(f	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1339	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1340	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1341	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnS  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnS	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1342	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(!isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1343	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1344	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1345	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  removedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    removedFunctionArgs(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
1346	[BUG]  [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  fnScope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnusedReferences(fnScope,  fnScope.cloneTree());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnusedReferences(fnScope,  fnScope.cloneTree());	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1347	[BUG]  [BUGGY]  traverseAndRemoveUnreferences(fnScope,  fnScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  traverseAndRemoveUnreferences(fnScope,  fnScope);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	traverseAndRemoveUnreferences(fnScope,  fnScope);	  traverseAndRemoveUnusedReferences(fnScope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1348	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVariables(fnScope);  }	  For(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
1349	[BUG]  [BUGGY]  AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1350	[BUG]  [BUGGY]  AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(fnScope!=  allFunctionScopes);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1351	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(Scope  scope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	  AssertionFailedError.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1352	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
1353	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)&&  removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
1354	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
1355	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  scope);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  scope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedFunctionArgs(fnScope,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
1356	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  not  a  statement	143	None	replace
1357	[BUG]  [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  Preconditions.checkState(!isPropertyAssign)  {  removeGlobals;  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnS	  Preconditions.checkState(!isPropertyAssign)    {    removeGlobals;    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope);    }    	non-compiled	[CE]  ';'  expected	143	None	replace
1358	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  for(Scope  fnScope  :  allFunctionScopes)  {  resolveUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals);    for(Scope    fnScope    :    allFunctionScopes)    {    resolveUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1359	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removedUnreferencedFunctionArgs(fnScope.getParent());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removedUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
1360	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
1361	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)&&  mayHaveSecondarySideEffects)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fn	  Preconditions.checkState(isPropertyAssign)&&    removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getParent());    }    	non-compiled	[CE]  not  a  statement	174	None	replace
1362	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1363	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Context.checkState(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVariables(fnScope);  }	  Context.checkState(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1364	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Assign.checkState(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getNext());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
1365	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getNext());  }	  Preconditions.checkState(removeGlobals)    {    for(Scope    fnScope    :    allFunctionScopes)    {    removeUnreferencedFunctionArgs(fnScope.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1366	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedReferences(fnScope,  toReplaceWithZero);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1367	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	Preconditions.checkArgument(isPropertyAssign);  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedFunctionArgs(fnScope,  toReplaceWithZero);  }	  Preconditions.checkArgument(isPropertyAssign);    for(Scope    fnScope    :    allFunctionScopes)    {    traverseAndRemoveUnusedReferences(fnScope,    toReplaceWithZero);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  toReplace);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  toReplace);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	NodeTraversal.traverse(compiler,  root,  allFunctionScopes,  toReplace);	  NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
