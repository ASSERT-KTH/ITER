bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
2	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
3	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
4	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseUnreferencedVars(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
5	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope,  toReplaceWithZero);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
6	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  fnScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
7	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]    [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
9	[BUG]  [BUGGY]  if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
10	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
11	[BUG]  [BUGGY]  if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
12	[BUG]  [BUGGY]  if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope.getParent());  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
13	[BUG]  [BUGGY]  if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(removeGlobals)  {  for(Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedVars(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
14	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedVars(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
15	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnreferencedVars(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
16	[BUG]  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {  removeUnreferencedFunctionArgs(fnScope);  [BUGGY]  if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }  [BUGGY]  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	if(!isPropertyAssign)  {  for(Scope  fnScope  :  allFunctionScopes)  {  traverseAndRemoveUnusedReferences(fnScope);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
