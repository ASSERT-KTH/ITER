bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
2	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(parent))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
3	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  type  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  type  ==  Token.FUNCTION)  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  type  ==  Token.FUNCTION)  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
5	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	  	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  orphaned  case	61	None	replace
6	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(parent))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(parent))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(parent))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isFunctionDeclaration(n))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
9	[BUG]  [BUGGY]    Node  n  =  n.getFirstChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  n  =  n.getFirstChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  n  =  n.getFirstChild();		non-compiled	[CE]  	62	None	add
10	[BUG]  [BUGGY]    Node  n  =  parent.getFirstChild();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  n  =  parent.getFirstChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  n  =  parent.getFirstChild();		non-compiled	[CE]  	62	None	add
11	[BUG]  [BUGGY]    Node  scope  =  n.getFirstChild();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  scope  =  n.getFirstChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  scope  =  n.getFirstChild();		non-compiled	[CE]  	62	None	add
12	[BUG]  [BUGGY]    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);		non-compiled	[CE]  	62	None	add
13	[BUG]  [BUGGY]    Node  c  =  n.getFirstChild();  [CE]  [FE]            AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  c  =  n.getFirstChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  c  =  n.getFirstChild();		non-compiled	[CE]  	62	None	add
14	[BUG]  [BUGGY]    Node  scope  =  n.getLastChild();  [CE]  [FE]              AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  scope  =  n.getLastChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  scope  =  n.getLastChild();		non-compiled	[CE]  	62	None	add
15	[BUG]  [BUGGY]    Node  n  =  n.getLastChild();  [CE]  [FE]                AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  n  =  n.getLastChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  n  =  n.getLastChild();		non-compiled	[CE]  	62	None	add
16	[BUG]  [BUGGY]    Node  n  =  scope.getFirstChild();  [CE]  [FE]                  AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  n  =  scope.getFirstChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  n  =  scope.getFirstChild();		non-compiled	[CE]  	62	None	add
17	[BUG]  [BUGGY]    Node  n  =  parent.getParent();  [CE]  [FE]                    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  n  =  parent.getParent();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  n  =  parent.getParent();		non-compiled	[CE]  	62	None	add
18	[BUG]  [BUGGY]    n  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    n  =  n.getFirstChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    n  =  n.getFirstChild();		non-compiled	[CE]  	62	None	add
19	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  scope.getVar(n.getFirstChild().getString())!=  null  &&  isRemovableVar(var))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  scope.getVar(n.getFirstChild().getString())!=  null  &&  isRemovableVar(var))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  scope.getVar(n.getFirstChild().getString())!=  null  &&  isRemovableVar(var))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
20	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  scope.getVar(n.getFirstChild().getString())!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  scope.getVar(n.getFirstChild().getString())!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  scope.getVar(n.getFirstChild().getString())!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
21	[BUG]  [BUGGY]    var  =  scope.getVar(n.getLastChild().getString());  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    var  =  scope.getVar(n.getLastChild().getString());  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    var  =  scope.getVar(n.getLastChild().getString());		non-compiled	[CE]  	62	None	add
22	[BUG]  [BUGGY]    var  =  scope.getVar(n.getFirstChild().getString());  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    var  =  scope.getVar(n.getFirstChild().getString());  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    var  =  scope.getVar(n.getFirstChild().getString());		non-compiled	[CE]  	62	None	add
23	[BUG]  [BUGGY]    Node  var  =  n.getFirstChild();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Node  var  =  n.getFirstChild();  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Node  var  =  n.getFirstChild();		non-compiled	[CE]  	62	None	add
24	[BUG]  [BUGGY]    Preconditions.checkState(type  ==  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Preconditions.checkState(type  ==  Token.FUNCTION);  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Preconditions.checkState(type  ==  Token.FUNCTION);		non-compiled	[CE]  	62	None	add
25	[BUG]  [BUGGY]  if(scope!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(scope!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(scope!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
26	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getFirstChild()!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getFirstChild()!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)&&  parent.getFirstChild()!=  null  &&  NodeUtil.isFunctionDeclaration(n))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
27	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {	if  (NodeUtil.isFunctionDeclaration(n))  {  	non-compiled	[CE]  	61	None	replace
28	[BUG]  [BUGGY]    Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Preconditions.checkState(n.getType()  ==  Token.VAR);		non-compiled	[CE]  	62	None	add
29	[BUG]  [BUGGY]    Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    Context.checkState(n.getType()  ==  Token.FUNCTION);		non-compiled	[CE]  	62	None	add
30	[BUG]  [BUGGY]    var  =  scope.getVar(n.getLastChild());  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  void  traverseNode(Node  n,  Node  parent,  Scope  scope)  {  int  type  =  n.getType();  Var  var  =  null;  switch  (type)  {  case  Token.FUNCTION:    [BUGGY]    var  =  scope.getVar(n.getLastChild());  [BUGGY]  if  (NodeUtil.isFunctionDeclaration(n))  {  var  =  scope.getVar(n.getFirstChild().getString());  }  if  (var  !=  null  &&  isRemovableVar(var))  {  continuations.put(var,  new  Continuation(n,  scope));  }  else  {  traverseFunction(n,  scope);  }  return;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseNode  [RETURN_TYPE]  void  Node  n  Node  parent  Scope  scope  [VARIABLES]  Set  referenced  Var  modifiedVar  var  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  SubclassRelationship  subclassRelationship  SimpleDefinitionFinder  defFinder  String  className  int  type  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  scope  CodingConvention  codingConvention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  maybeAssign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	    var  =  scope.getVar(n.getLastChild());		non-compiled	[CE]  	62	None	add
